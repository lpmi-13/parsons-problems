{"functions": ["{\"type\": \"functions\", \"project_source\": \"https://github.com/s0md3v/XSStrike\", \"direct_link_to_file_line\": \"https://github.com/s0md3v/XSStrike/blob/master/XSStrike/modes/singleFuzz.py#L15\", \"contents\": {\"total_lines\": 30, \"lines\": [{\"line_number\": 1, \"line_content\": \"def singleFuzz(target, paramData, encoding, headers, delay, timeout):\"}, {\"line_number\": 2, \"line_content\": \"    GET, POST = (False, True) if paramData else (True, False)\"}, {\"line_number\": 3, \"line_content\": \"    if not target.startswith('http'):\"}, {\"line_number\": 4, \"line_content\": \"        try:\"}, {\"line_number\": 5, \"line_content\": \"            response = requester('https://' + target, {}, headers, GET,\"}, {\"line_number\": 6, \"line_content\": \"                delay, timeout)\"}, {\"line_number\": 7, \"line_content\": \"            target = 'https://' + target\"}, {\"line_number\": 8, \"line_content\": \"        except:\"}, {\"line_number\": 9, \"line_content\": \"            target = 'http://' + target\"}, {\"line_number\": 10, \"line_content\": \"    logger.debug('Single Fuzz target: {}'.format(target))\"}, {\"line_number\": 11, \"line_content\": \"    host = urlparse(target).netloc\"}, {\"line_number\": 12, \"line_content\": \"    logger.debug('Single fuzz host: {}'.format(host))\"}, {\"line_number\": 13, \"line_content\": \"    url = getUrl(target, GET)\"}, {\"line_number\": 14, \"line_content\": \"    logger.debug('Single fuzz url: {}'.format(url))\"}, {\"line_number\": 15, \"line_content\": \"    params = getParams(target, paramData, GET)\"}, {\"line_number\": 16, \"line_content\": \"    logger.debug_json('Single fuzz params:', params)\"}, {\"line_number\": 17, \"line_content\": \"    if not params:\"}, {\"line_number\": 18, \"line_content\": \"        logger.error('No parameters to test.')\"}, {\"line_number\": 19, \"line_content\": \"        quit()\"}, {\"line_number\": 20, \"line_content\": \"    WAF = wafDetector(url, {list(params.keys())[0]: xsschecker}, headers,\"}, {\"line_number\": 21, \"line_content\": \"        GET, delay, timeout)\"}, {\"line_number\": 22, \"line_content\": \"    if WAF:\"}, {\"line_number\": 23, \"line_content\": \"        logger.error('WAF detected: %s%s%s' % (green, WAF, end))\"}, {\"line_number\": 24, \"line_content\": \"    else:\"}, {\"line_number\": 25, \"line_content\": \"        logger.good('WAF Status: %sOffline%s' % (green, end))\"}, {\"line_number\": 26, \"line_content\": \"    for paramName in params.keys():\"}, {\"line_number\": 27, \"line_content\": \"        logger.info('Fuzzing parameter: %s' % paramName)\"}, {\"line_number\": 28, \"line_content\": \"        paramsCopy = copy.deepcopy(params)\"}, {\"line_number\": 29, \"line_content\": \"        paramsCopy[paramName] = xsschecker\"}, {\"line_number\": 30, \"line_content\": \"        fuzzer(url, paramsCopy, headers, GET, delay, timeout, WAF, encoding)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/s0md3v/XSStrike\", \"direct_link_to_file_line\": \"https://github.com/s0md3v/XSStrike/blob/master/XSStrike/core/jsContexter.py#L7\", \"contents\": {\"total_lines\": 28, \"lines\": [{\"line_number\": 1, \"line_content\": \"def jsContexter(script):\"}, {\"line_number\": 2, \"line_content\": \"    broken = script.split(xsschecker)\"}, {\"line_number\": 3, \"line_content\": \"    pre = broken[0]\"}, {\"line_number\": 4, \"line_content\": \"    pre = re.sub('(?s)\\\\\\\\{.*?\\\\\\\\}|(?s)\\\\\\\\(.*?\\\\\\\\)|(?s)\\\".*?\\\"|(?s)\\\\\\\\\\\\'.*?\\\\\\\\\\\\'',\"}, {\"line_number\": 5, \"line_content\": \"        '', pre)\"}, {\"line_number\": 6, \"line_content\": \"    breaker = ''\"}, {\"line_number\": 7, \"line_content\": \"    num = 0\"}, {\"line_number\": 8, \"line_content\": \"    for char in pre:\"}, {\"line_number\": 9, \"line_content\": \"        if char == '{':\"}, {\"line_number\": 10, \"line_content\": \"            breaker += '}'\"}, {\"line_number\": 11, \"line_content\": \"        elif char == '(':\"}, {\"line_number\": 12, \"line_content\": \"            breaker += ';)'\"}, {\"line_number\": 13, \"line_content\": \"        elif char == '[':\"}, {\"line_number\": 14, \"line_content\": \"            breaker += ']'\"}, {\"line_number\": 15, \"line_content\": \"        elif char == '/':\"}, {\"line_number\": 16, \"line_content\": \"            try:\"}, {\"line_number\": 17, \"line_content\": \"                if pre[num + 1] == '*':\"}, {\"line_number\": 18, \"line_content\": \"                    breaker += '/*'\"}, {\"line_number\": 19, \"line_content\": \"            except IndexError:\"}, {\"line_number\": 20, \"line_content\": \"                pass\"}, {\"line_number\": 21, \"line_content\": \"        elif char == '}':\"}, {\"line_number\": 22, \"line_content\": \"            breaker = stripper(breaker, '}')\"}, {\"line_number\": 23, \"line_content\": \"        elif char == ')':\"}, {\"line_number\": 24, \"line_content\": \"            breaker = stripper(breaker, ')')\"}, {\"line_number\": 25, \"line_content\": \"        elif breaker == ']':\"}, {\"line_number\": 26, \"line_content\": \"            breaker = stripper(breaker, ']')\"}, {\"line_number\": 27, \"line_content\": \"        num += 1\"}, {\"line_number\": 28, \"line_content\": \"    return breaker[::-1]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/s0md3v/XSStrike\", \"direct_link_to_file_line\": \"https://github.com/s0md3v/XSStrike/blob/master/XSStrike/core/photon.py#L15\", \"contents\": {\"total_lines\": 64, \"lines\": [{\"line_number\": 1, \"line_content\": \"def photon(seedUrl, headers, level, threadCount, delay, timeout, skipDOM):\"}, {\"line_number\": 2, \"line_content\": \"    forms = []\"}, {\"line_number\": 3, \"line_content\": \"    processed = set()\"}, {\"line_number\": 4, \"line_content\": \"    storage = set()\"}, {\"line_number\": 5, \"line_content\": \"    schema = urlparse(seedUrl).scheme\"}, {\"line_number\": 6, \"line_content\": \"    host = urlparse(seedUrl).netloc\"}, {\"line_number\": 7, \"line_content\": \"    main_url = schema + '://' + host\"}, {\"line_number\": 8, \"line_content\": \"    storage.add(seedUrl)\"}, {\"line_number\": 9, \"line_content\": \"    checkedDOMs = []\"}, {\"line_number\": 10, \"line_content\": \"    def rec(target):\"}, {\"line_number\": 11, \"line_content\": \"        processed.add(target)\"}, {\"line_number\": 12, \"line_content\": \"        printableTarget = '/'.join(target.split('/')[3:])\"}, {\"line_number\": 13, \"line_content\": \"        if len(printableTarget) > 40:\"}, {\"line_number\": 14, \"line_content\": \"            printableTarget = printableTarget[-40:]\"}, {\"line_number\": 15, \"line_content\": \"        else:\"}, {\"line_number\": 16, \"line_content\": \"            printableTarget = printableTarget + ' ' * (40 - len(\"}, {\"line_number\": 17, \"line_content\": \"                printableTarget))\"}, {\"line_number\": 18, \"line_content\": \"        logger.run('Parsing %s\\\\r' % printableTarget)\"}, {\"line_number\": 19, \"line_content\": \"        url = getUrl(target, True)\"}, {\"line_number\": 20, \"line_content\": \"        params = getParams(target, '', True)\"}, {\"line_number\": 21, \"line_content\": \"        if '=' in target:\"}, {\"line_number\": 22, \"line_content\": \"            inps = []\"}, {\"line_number\": 23, \"line_content\": \"            for name, value in params.items():\"}, {\"line_number\": 24, \"line_content\": \"                inps.append({'name': name, 'value': value})\"}, {\"line_number\": 25, \"line_content\": \"            forms.append({(0): {'action': url, 'method': 'get', 'inputs':\"}, {\"line_number\": 26, \"line_content\": \"                inps}})\"}, {\"line_number\": 27, \"line_content\": \"        response = requester(url, params, headers, True, delay, timeout).text\"}, {\"line_number\": 28, \"line_content\": \"        retireJs(url, response)\"}, {\"line_number\": 29, \"line_content\": \"        if not skipDOM:\"}, {\"line_number\": 30, \"line_content\": \"            highlighted = dom(response)\"}, {\"line_number\": 31, \"line_content\": \"            clean_highlighted = ''.join([re.sub('^\\\\\\\\d+\\\\\\\\s+', '', line) for\"}, {\"line_number\": 32, \"line_content\": \"                line in highlighted])\"}, {\"line_number\": 33, \"line_content\": \"            if highlighted and clean_highlighted not in checkedDOMs:\"}, {\"line_number\": 34, \"line_content\": \"                checkedDOMs.append(clean_highlighted)\"}, {\"line_number\": 35, \"line_content\": \"                logger.good('Potentially vulnerable objects found at %s' % url)\"}, {\"line_number\": 36, \"line_content\": \"                logger.red_line(level='good')\"}, {\"line_number\": 37, \"line_content\": \"                for line in highlighted:\"}, {\"line_number\": 38, \"line_content\": \"                    logger.no_format(line, level='good')\"}, {\"line_number\": 39, \"line_content\": \"                logger.red_line(level='good')\"}, {\"line_number\": 40, \"line_content\": \"        forms.append(zetanize(response))\"}, {\"line_number\": 41, \"line_content\": \"        matches = re.findall('<[aA].*href=[\\\"\\\\\\\\\\\\']{0,1}(.*?)[\\\"\\\\\\\\\\\\']', response)\"}, {\"line_number\": 42, \"line_content\": \"        for link in matches:\"}, {\"line_number\": 43, \"line_content\": \"            link = link.split('#')[0]\"}, {\"line_number\": 44, \"line_content\": \"            if link.endswith(('.pdf', '.png', '.jpg', '.jpeg', '.xls',\"}, {\"line_number\": 45, \"line_content\": \"                '.xml', '.docx', '.doc')):\"}, {\"line_number\": 46, \"line_content\": \"                pass\"}, {\"line_number\": 47, \"line_content\": \"            elif link[:4] == 'http':\"}, {\"line_number\": 48, \"line_content\": \"                if link.startswith(main_url):\"}, {\"line_number\": 49, \"line_content\": \"                    storage.add(link)\"}, {\"line_number\": 50, \"line_content\": \"            elif link[:2] == '//':\"}, {\"line_number\": 51, \"line_content\": \"                if link.split('/')[2].startswith(host):\"}, {\"line_number\": 52, \"line_content\": \"                    storage.add(schema + link)\"}, {\"line_number\": 53, \"line_content\": \"            elif link[:1] == '/':\"}, {\"line_number\": 54, \"line_content\": \"                storage.add(main_url + link)\"}, {\"line_number\": 55, \"line_content\": \"            else:\"}, {\"line_number\": 56, \"line_content\": \"                storage.add(main_url + '/' + link)\"}, {\"line_number\": 57, \"line_content\": \"    for x in range(level):\"}, {\"line_number\": 58, \"line_content\": \"        urls = storage - processed\"}, {\"line_number\": 59, \"line_content\": \"        threadpool = concurrent.futures.ThreadPoolExecutor(max_workers=\"}, {\"line_number\": 60, \"line_content\": \"            threadCount)\"}, {\"line_number\": 61, \"line_content\": \"        futures = (threadpool.submit(rec, url) for url in urls)\"}, {\"line_number\": 62, \"line_content\": \"        for i in concurrent.futures.as_completed(futures):\"}, {\"line_number\": 63, \"line_content\": \"            pass\"}, {\"line_number\": 64, \"line_content\": \"    return [forms, processed]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/s0md3v/XSStrike\", \"direct_link_to_file_line\": \"https://github.com/s0md3v/XSStrike/blob/master/XSStrike/core/photon.py#L25\", \"contents\": {\"total_lines\": 45, \"lines\": [{\"line_number\": 1, \"line_content\": \"def rec(target):\"}, {\"line_number\": 2, \"line_content\": \"    processed.add(target)\"}, {\"line_number\": 3, \"line_content\": \"    printableTarget = '/'.join(target.split('/')[3:])\"}, {\"line_number\": 4, \"line_content\": \"    if len(printableTarget) > 40:\"}, {\"line_number\": 5, \"line_content\": \"        printableTarget = printableTarget[-40:]\"}, {\"line_number\": 6, \"line_content\": \"    else:\"}, {\"line_number\": 7, \"line_content\": \"        printableTarget = printableTarget + ' ' * (40 - len(printableTarget))\"}, {\"line_number\": 8, \"line_content\": \"    logger.run('Parsing %s\\\\r' % printableTarget)\"}, {\"line_number\": 9, \"line_content\": \"    url = getUrl(target, True)\"}, {\"line_number\": 10, \"line_content\": \"    params = getParams(target, '', True)\"}, {\"line_number\": 11, \"line_content\": \"    if '=' in target:\"}, {\"line_number\": 12, \"line_content\": \"        inps = []\"}, {\"line_number\": 13, \"line_content\": \"        for name, value in params.items():\"}, {\"line_number\": 14, \"line_content\": \"            inps.append({'name': name, 'value': value})\"}, {\"line_number\": 15, \"line_content\": \"        forms.append({(0): {'action': url, 'method': 'get', 'inputs': inps}})\"}, {\"line_number\": 16, \"line_content\": \"    response = requester(url, params, headers, True, delay, timeout).text\"}, {\"line_number\": 17, \"line_content\": \"    retireJs(url, response)\"}, {\"line_number\": 18, \"line_content\": \"    if not skipDOM:\"}, {\"line_number\": 19, \"line_content\": \"        highlighted = dom(response)\"}, {\"line_number\": 20, \"line_content\": \"        clean_highlighted = ''.join([re.sub('^\\\\\\\\d+\\\\\\\\s+', '', line) for line in\"}, {\"line_number\": 21, \"line_content\": \"            highlighted])\"}, {\"line_number\": 22, \"line_content\": \"        if highlighted and clean_highlighted not in checkedDOMs:\"}, {\"line_number\": 23, \"line_content\": \"            checkedDOMs.append(clean_highlighted)\"}, {\"line_number\": 24, \"line_content\": \"            logger.good('Potentially vulnerable objects found at %s' % url)\"}, {\"line_number\": 25, \"line_content\": \"            logger.red_line(level='good')\"}, {\"line_number\": 26, \"line_content\": \"            for line in highlighted:\"}, {\"line_number\": 27, \"line_content\": \"                logger.no_format(line, level='good')\"}, {\"line_number\": 28, \"line_content\": \"            logger.red_line(level='good')\"}, {\"line_number\": 29, \"line_content\": \"    forms.append(zetanize(response))\"}, {\"line_number\": 30, \"line_content\": \"    matches = re.findall('<[aA].*href=[\\\"\\\\\\\\\\\\']{0,1}(.*?)[\\\"\\\\\\\\\\\\']', response)\"}, {\"line_number\": 31, \"line_content\": \"    for link in matches:\"}, {\"line_number\": 32, \"line_content\": \"        link = link.split('#')[0]\"}, {\"line_number\": 33, \"line_content\": \"        if link.endswith(('.pdf', '.png', '.jpg', '.jpeg', '.xls', '.xml',\"}, {\"line_number\": 34, \"line_content\": \"            '.docx', '.doc')):\"}, {\"line_number\": 35, \"line_content\": \"            pass\"}, {\"line_number\": 36, \"line_content\": \"        elif link[:4] == 'http':\"}, {\"line_number\": 37, \"line_content\": \"            if link.startswith(main_url):\"}, {\"line_number\": 38, \"line_content\": \"                storage.add(link)\"}, {\"line_number\": 39, \"line_content\": \"        elif link[:2] == '//':\"}, {\"line_number\": 40, \"line_content\": \"            if link.split('/')[2].startswith(host):\"}, {\"line_number\": 41, \"line_content\": \"                storage.add(schema + link)\"}, {\"line_number\": 42, \"line_content\": \"        elif link[:1] == '/':\"}, {\"line_number\": 43, \"line_content\": \"            storage.add(main_url + link)\"}, {\"line_number\": 44, \"line_content\": \"        else:\"}, {\"line_number\": 45, \"line_content\": \"            storage.add(main_url + '/' + link)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/s0md3v/XSStrike\", \"direct_link_to_file_line\": \"https://github.com/s0md3v/XSStrike/blob/master/XSStrike/core/arjun.py#L12\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def checky(param, paraNames, url, headers, GET, delay, timeout):\"}, {\"line_number\": 2, \"line_content\": \"    if param not in paraNames:\"}, {\"line_number\": 3, \"line_content\": \"        logger.debug('Checking param: {}'.format(param))\"}, {\"line_number\": 4, \"line_content\": \"        response = requester(url, {param: xsschecker}, headers, GET, delay,\"}, {\"line_number\": 5, \"line_content\": \"            timeout).text\"}, {\"line_number\": 6, \"line_content\": \"        if (\\\"'%s'\\\" % xsschecker in response or '\\\"%s\\\"' % xsschecker in\"}, {\"line_number\": 7, \"line_content\": \"            response or ' %s ' % xsschecker in response):\"}, {\"line_number\": 8, \"line_content\": \"            paraNames[param] = ''\"}, {\"line_number\": 9, \"line_content\": \"            logger.good('Valid parameter found: %s%s', green, param)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ddbourgin/numpy-ml\", \"direct_link_to_file_line\": \"https://github.com/ddbourgin/numpy-ml/blob/master/numpy-ml/numpy_ml/trees/dt.py#L215\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def mse(y):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Mean squared error for decision tree (ie., mean) predictions\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    return np.mean((y - np.mean(y)) ** 2)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ddbourgin/numpy-ml\", \"direct_link_to_file_line\": \"https://github.com/ddbourgin/numpy-ml/blob/master/numpy-ml/numpy_ml/trees/dt.py#L222\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def entropy(y):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Entropy of a label sequence\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    hist = np.bincount(y)\"}, {\"line_number\": 6, \"line_content\": \"    ps = hist / np.sum(hist)\"}, {\"line_number\": 7, \"line_content\": \"    return -np.sum([(p * np.log2(p)) for p in ps if p > 0])\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ddbourgin/numpy-ml\", \"direct_link_to_file_line\": \"https://github.com/ddbourgin/numpy-ml/blob/master/numpy-ml/numpy_ml/trees/dt.py#L231\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def gini(y):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Gini impurity (local entropy) of a label sequence\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    hist = np.bincount(y)\"}, {\"line_number\": 6, \"line_content\": \"    N = np.sum(hist)\"}, {\"line_number\": 7, \"line_content\": \"    return 1 - sum([((i / N) ** 2) for i in hist])\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ddbourgin/numpy-ml\", \"direct_link_to_file_line\": \"https://github.com/ddbourgin/numpy-ml/blob/master/numpy-ml/numpy_ml/trees/dt.py#L5\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, left, right, rule):\"}, {\"line_number\": 2, \"line_content\": \"    self.left = left\"}, {\"line_number\": 3, \"line_content\": \"    self.right = right\"}, {\"line_number\": 4, \"line_content\": \"    self.feature = rule[0]\"}, {\"line_number\": 5, \"line_content\": \"    self.threshold = rule[1]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ddbourgin/numpy-ml\", \"direct_link_to_file_line\": \"https://github.com/ddbourgin/numpy-ml/blob/master/numpy-ml/numpy_ml/trees/dt.py#L13\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, value):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"        `value` is an array of class probabilities if classifier is True, else\"}, {\"line_number\": 4, \"line_content\": \"        the mean of the region\"}, {\"line_number\": 5, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    self.value = value\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/coleifer/peewee\", \"direct_link_to_file_line\": \"https://github.com/coleifer/peewee/blob/master/peewee/bench.py#L25\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def timed(fn):\"}, {\"line_number\": 2, \"line_content\": \"    @functools.wraps(fn)\"}, {\"line_number\": 3, \"line_content\": \"    def inner(*args, **kwargs):\"}, {\"line_number\": 4, \"line_content\": \"        times = []\"}, {\"line_number\": 5, \"line_content\": \"        N = 10\"}, {\"line_number\": 6, \"line_content\": \"        for i in range(N):\"}, {\"line_number\": 7, \"line_content\": \"            start = time.time()\"}, {\"line_number\": 8, \"line_content\": \"            fn(i, *args, **kwargs)\"}, {\"line_number\": 9, \"line_content\": \"            times.append(time.time() - start)\"}, {\"line_number\": 10, \"line_content\": \"        print('%0.3f ... %s' % (round(sum(times) / N, 3), fn.__name__))\"}, {\"line_number\": 11, \"line_content\": \"    return inner\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/coleifer/peewee\", \"direct_link_to_file_line\": \"https://github.com/coleifer/peewee/blob/master/peewee/bench.py#L37\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def populate_register(s, n):\"}, {\"line_number\": 2, \"line_content\": \"    for i in range(s, n):\"}, {\"line_number\": 3, \"line_content\": \"        Register.create(value=i)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/coleifer/peewee\", \"direct_link_to_file_line\": \"https://github.com/coleifer/peewee/blob/master/peewee/bench.py#L41\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def populate_collections(n, n_i):\"}, {\"line_number\": 2, \"line_content\": \"    for i in range(n):\"}, {\"line_number\": 3, \"line_content\": \"        c = Collection.create(name=str(i))\"}, {\"line_number\": 4, \"line_content\": \"        for j in range(n_i):\"}, {\"line_number\": 5, \"line_content\": \"            Item.create(collection=c, name=str(j))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/coleifer/peewee\", \"direct_link_to_file_line\": \"https://github.com/coleifer/peewee/blob/master/peewee/bench.py#L47\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"@timed\"}, {\"line_number\": 2, \"line_content\": \"def insert(i):\"}, {\"line_number\": 3, \"line_content\": \"    with db.atomic():\"}, {\"line_number\": 4, \"line_content\": \"        populate_register(i * 1000, (i + 1) * 1000)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/coleifer/peewee\", \"direct_link_to_file_line\": \"https://github.com/coleifer/peewee/blob/master/peewee/bench.py#L47\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"@timed\"}, {\"line_number\": 2, \"line_content\": \"def batch_insert(i):\"}, {\"line_number\": 3, \"line_content\": \"    it = range(i * 1000, (i + 1) * 1000)\"}, {\"line_number\": 4, \"line_content\": \"    for i in db.batch_commit(it, 100):\"}, {\"line_number\": 5, \"line_content\": \"        Register.insert(value=i).execute()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/codelucas/newspaper\", \"direct_link_to_file_line\": \"https://github.com/codelucas/newspaper/blob/master/newspaper/download_corpora.py#L17\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    for each in REQUIRED_CORPORA:\"}, {\"line_number\": 3, \"line_content\": \"        print('Downloading \\\"{0}\\\"'.format(each))\"}, {\"line_number\": 4, \"line_content\": \"        nltk.download(each)\"}, {\"line_number\": 5, \"line_content\": \"    print('Finished.')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/codelucas/newspaper\", \"direct_link_to_file_line\": \"https://github.com/codelucas/newspaper/blob/master/newspaper/newspaper/source.py#L28\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, url):\"}, {\"line_number\": 2, \"line_content\": \"    self.url = url\"}, {\"line_number\": 3, \"line_content\": \"    self.html = None\"}, {\"line_number\": 4, \"line_content\": \"    self.doc = None\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/codelucas/newspaper\", \"direct_link_to_file_line\": \"https://github.com/codelucas/newspaper/blob/master/newspaper/newspaper/source.py#L28\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, url):\"}, {\"line_number\": 2, \"line_content\": \"    self.url = url\"}, {\"line_number\": 3, \"line_content\": \"    self.rss = None\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/codelucas/newspaper\", \"direct_link_to_file_line\": \"https://github.com/codelucas/newspaper/blob/master/newspaper/newspaper/source.py#L54\", \"contents\": {\"total_lines\": 24, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, url, config=None, **kwargs):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"The config object for this source will be passed into all of this\"}, {\"line_number\": 3, \"line_content\": \"        source's children articles unless specified otherwise or re-set.\"}, {\"line_number\": 4, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    if url is None or '://' not in url or url[:4] != 'http':\"}, {\"line_number\": 6, \"line_content\": \"        raise Exception('Input url is bad!')\"}, {\"line_number\": 7, \"line_content\": \"    self.config = config or Configuration()\"}, {\"line_number\": 8, \"line_content\": \"    self.config = utils.extend_config(self.config, kwargs)\"}, {\"line_number\": 9, \"line_content\": \"    self.extractor = ContentExtractor(self.config)\"}, {\"line_number\": 10, \"line_content\": \"    self.url = url\"}, {\"line_number\": 11, \"line_content\": \"    self.url = urls.prepare_url(url)\"}, {\"line_number\": 12, \"line_content\": \"    self.domain = urls.get_domain(self.url)\"}, {\"line_number\": 13, \"line_content\": \"    self.scheme = urls.get_scheme(self.url)\"}, {\"line_number\": 14, \"line_content\": \"    self.categories = []\"}, {\"line_number\": 15, \"line_content\": \"    self.feeds = []\"}, {\"line_number\": 16, \"line_content\": \"    self.articles = []\"}, {\"line_number\": 17, \"line_content\": \"    self.html = ''\"}, {\"line_number\": 18, \"line_content\": \"    self.doc = None\"}, {\"line_number\": 19, \"line_content\": \"    self.logo_url = ''\"}, {\"line_number\": 20, \"line_content\": \"    self.favicon = ''\"}, {\"line_number\": 21, \"line_content\": \"    self.brand = tldextract.extract(self.url).domain\"}, {\"line_number\": 22, \"line_content\": \"    self.description = ''\"}, {\"line_number\": 23, \"line_content\": \"    self.is_parsed = False\"}, {\"line_number\": 24, \"line_content\": \"    self.is_downloaded = False\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/codelucas/newspaper\", \"direct_link_to_file_line\": \"https://github.com/codelucas/newspaper/blob/master/newspaper/newspaper/source.py#L87\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def build(self):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Encapsulates download and basic parsing with lxml. May be a\"}, {\"line_number\": 3, \"line_content\": \"        good idea to split this into download() and parse() methods.\"}, {\"line_number\": 4, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    self.download()\"}, {\"line_number\": 6, \"line_content\": \"    self.parse()\"}, {\"line_number\": 7, \"line_content\": \"    self.set_categories()\"}, {\"line_number\": 8, \"line_content\": \"    self.download_categories()\"}, {\"line_number\": 9, \"line_content\": \"    self.parse_categories()\"}, {\"line_number\": 10, \"line_content\": \"    self.set_feeds()\"}, {\"line_number\": 11, \"line_content\": \"    self.download_feeds()\"}, {\"line_number\": 12, \"line_content\": \"    self.generate_articles()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mirumee/saleor\", \"direct_link_to_file_line\": \"https://github.com/mirumee/saleor/blob/master/saleor/saleor/settings.py#L21\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_list(text):\"}, {\"line_number\": 2, \"line_content\": \"    return [item.strip() for item in text.split(',')]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mirumee/saleor\", \"direct_link_to_file_line\": \"https://github.com/mirumee/saleor/blob/master/saleor/saleor/settings.py#L25\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_bool_from_env(name, default_value):\"}, {\"line_number\": 2, \"line_content\": \"    if name in os.environ:\"}, {\"line_number\": 3, \"line_content\": \"        value = os.environ[name]\"}, {\"line_number\": 4, \"line_content\": \"        try:\"}, {\"line_number\": 5, \"line_content\": \"            return ast.literal_eval(value)\"}, {\"line_number\": 6, \"line_content\": \"        except ValueError as e:\"}, {\"line_number\": 7, \"line_content\": \"            raise ValueError('{} is an invalid value for {}'.format(value,\"}, {\"line_number\": 8, \"line_content\": \"                name)) from e\"}, {\"line_number\": 9, \"line_content\": \"    return default_value\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mirumee/saleor\", \"direct_link_to_file_line\": \"https://github.com/mirumee/saleor/blob/master/saleor/saleor/settings.py#L375\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_host():\"}, {\"line_number\": 2, \"line_content\": \"    from django.contrib.sites.models import Site\"}, {\"line_number\": 3, \"line_content\": \"    return Site.objects.get_current().domain\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mirumee/saleor\", \"direct_link_to_file_line\": \"https://github.com/mirumee/saleor/blob/master/saleor/saleor/seo/schema/email.py#L13\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_organization():\"}, {\"line_number\": 2, \"line_content\": \"    site = Site.objects.get_current()\"}, {\"line_number\": 3, \"line_content\": \"    return {'@type': 'Organization', 'name': site.name}\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mirumee/saleor\", \"direct_link_to_file_line\": \"https://github.com/mirumee/saleor/blob/master/saleor/saleor/seo/tests/test_seo_schema.py#L12\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_get_organization(site_settings):\"}, {\"line_number\": 2, \"line_content\": \"    example_name = 'Saleor Brand Name'\"}, {\"line_number\": 3, \"line_content\": \"    site = site_settings.site\"}, {\"line_number\": 4, \"line_content\": \"    site.name = example_name\"}, {\"line_number\": 5, \"line_content\": \"    site.save()\"}, {\"line_number\": 6, \"line_content\": \"    result = get_organization()\"}, {\"line_number\": 7, \"line_content\": \"    assert result['name'] == example_name\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apache/airflow\", \"direct_link_to_file_line\": \"https://github.com/apache/airflow/blob/master/airflow/setup.py#L56\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def airflow_test_suite():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Test suite for Airflow tests\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    test_loader = unittest.TestLoader()\"}, {\"line_number\": 4, \"line_content\": \"    test_suite = test_loader.discover(os.path.join(my_dir, 'tests'),\"}, {\"line_number\": 5, \"line_content\": \"        pattern='test_*.py')\"}, {\"line_number\": 6, \"line_content\": \"    return test_suite\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apache/airflow\", \"direct_link_to_file_line\": \"https://github.com/apache/airflow/blob/master/airflow/setup.py#L661\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def is_package_excluded(package: str, exclusion_list: List[str]):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Checks if package should be excluded.\"}, {\"line_number\": 4, \"line_content\": \"    :param package: package name (beginning of it)\"}, {\"line_number\": 5, \"line_content\": \"    :param exclusion_list: list of excluded packages\"}, {\"line_number\": 6, \"line_content\": \"    :return: true if package should be excluded\"}, {\"line_number\": 7, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 8, \"line_content\": \"    return any([package.startswith(excluded_package) for excluded_package in\"}, {\"line_number\": 9, \"line_content\": \"        exclusion_list])\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apache/airflow\", \"direct_link_to_file_line\": \"https://github.com/apache/airflow/blob/master/airflow/setup.py#L745\", \"contents\": {\"total_lines\": 32, \"lines\": [{\"line_number\": 1, \"line_content\": \"def do_setup():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Perform the Airflow package setup.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    write_version()\"}, {\"line_number\": 4, \"line_content\": \"    setup(name='apache-airflow', description=\"}, {\"line_number\": 5, \"line_content\": \"        'Programmatically author, schedule and monitor data pipelines',\"}, {\"line_number\": 6, \"line_content\": \"        long_description=long_description, long_description_content_type=\"}, {\"line_number\": 7, \"line_content\": \"        'text/markdown', license='Apache License 2.0', version=version,\"}, {\"line_number\": 8, \"line_content\": \"        packages=find_packages(exclude=['tests*']), package_data={'airflow':\"}, {\"line_number\": 9, \"line_content\": \"        ['py.typed'], '': ['airflow/alembic.ini', 'airflow/git_version',\"}, {\"line_number\": 10, \"line_content\": \"        '*.ipynb', 'airflow/providers/cncf/kubernetes/example_dags/*.yaml'],\"}, {\"line_number\": 11, \"line_content\": \"        'airflow.api_connexion.openapi': ['*.yaml'],\"}, {\"line_number\": 12, \"line_content\": \"        'airflow.serialization': ['*.json']}, include_package_data=True,\"}, {\"line_number\": 13, \"line_content\": \"        zip_safe=False, entry_points={'console_scripts': [\"}, {\"line_number\": 14, \"line_content\": \"        'airflow = airflow.__main__:main']}, install_requires=\"}, {\"line_number\": 15, \"line_content\": \"        INSTALL_REQUIREMENTS, setup_requires=['bowler', 'docutils',\"}, {\"line_number\": 16, \"line_content\": \"        'gitpython', 'setuptools', 'wheel'], extras_require=\"}, {\"line_number\": 17, \"line_content\": \"        EXTRAS_REQUIREMENTS, classifiers=[\"}, {\"line_number\": 18, \"line_content\": \"        'Development Status :: 5 - Production/Stable',\"}, {\"line_number\": 19, \"line_content\": \"        'Environment :: Console', 'Environment :: Web Environment',\"}, {\"line_number\": 20, \"line_content\": \"        'Intended Audience :: Developers',\"}, {\"line_number\": 21, \"line_content\": \"        'Intended Audience :: System Administrators',\"}, {\"line_number\": 22, \"line_content\": \"        'License :: OSI Approved :: Apache Software License',\"}, {\"line_number\": 23, \"line_content\": \"        'Programming Language :: Python :: 3.6',\"}, {\"line_number\": 24, \"line_content\": \"        'Programming Language :: Python :: 3.7',\"}, {\"line_number\": 25, \"line_content\": \"        'Programming Language :: Python :: 3.8',\"}, {\"line_number\": 26, \"line_content\": \"        'Topic :: System :: Monitoring'], author=\"}, {\"line_number\": 27, \"line_content\": \"        'Apache Software Foundation', author_email='dev@airflow.apache.org',\"}, {\"line_number\": 28, \"line_content\": \"        url='http://airflow.apache.org/', download_url=\"}, {\"line_number\": 29, \"line_content\": \"        'https://dist.apache.org/repos/dist/release/airflow/' + version,\"}, {\"line_number\": 30, \"line_content\": \"        cmdclass={'extra_clean': CleanCommand, 'compile_assets':\"}, {\"line_number\": 31, \"line_content\": \"        CompileAssets, 'list_extras': ListExtras}, test_suite=\"}, {\"line_number\": 32, \"line_content\": \"        'setup.airflow_test_suite', python_requires='~=3.6')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apache/airflow\", \"direct_link_to_file_line\": \"https://github.com/apache/airflow/blob/master/airflow/setup.py#L72\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def initialize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Set default values for options.\\\"\\\"\\\"\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apache/airflow\", \"direct_link_to_file_line\": \"https://github.com/apache/airflow/blob/master/airflow/setup.py#L75\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def finalize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Set final values for options.\\\"\\\"\\\"\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Jack-Cherish/python-spider\", \"direct_link_to_file_line\": \"https://github.com/Jack-Cherish/python-spider/blob/master/python-spider/geetest.py#L18\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def save_base64img(data_str, save_name):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    \\u5c06 base64 \\u6570\\u636e\\u8f6c\\u5316\\u4e3a\\u56fe\\u7247\\u4fdd\\u5b58\\u5230\\u6307\\u5b9a\\u4f4d\\u7f6e\"}, {\"line_number\": 4, \"line_content\": \"    :param data_str: base64 \\u6570\\u636e\\uff0c\\u4e0d\\u5305\\u542b\\u7c7b\\u578b\"}, {\"line_number\": 5, \"line_content\": \"    :param save_name: \\u4fdd\\u5b58\\u7684\\u5168\\u8def\\u5f84\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    img_data = base64.b64decode(data_str)\"}, {\"line_number\": 8, \"line_content\": \"    file = open(save_name, 'wb')\"}, {\"line_number\": 9, \"line_content\": \"    file.write(img_data)\"}, {\"line_number\": 10, \"line_content\": \"    file.close()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Jack-Cherish/python-spider\", \"direct_link_to_file_line\": \"https://github.com/Jack-Cherish/python-spider/blob/master/python-spider/geetest.py#L30\", \"contents\": {\"total_lines\": 18, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_base64_by_canvas(driver, class_name, contain_type):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    \\u5c06 canvas \\u6807\\u7b7e\\u5185\\u5bb9\\u8f6c\\u6362\\u4e3a base64 \\u6570\\u636e\"}, {\"line_number\": 4, \"line_content\": \"    :param driver: webdriver \\u5bf9\\u8c61\"}, {\"line_number\": 5, \"line_content\": \"    :param class_name: canvas \\u6807\\u7b7e\\u7684\\u7c7b\\u540d\"}, {\"line_number\": 6, \"line_content\": \"    :param contain_type: \\u8fd4\\u56de\\u7684\\u6570\\u636e\\u662f\\u5426\\u5305\\u542b\\u7c7b\\u578b\"}, {\"line_number\": 7, \"line_content\": \"    :return: base64 \\u6570\\u636e\"}, {\"line_number\": 8, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 9, \"line_content\": \"    bg_img = ''\"}, {\"line_number\": 10, \"line_content\": \"    while len(bg_img) < 5000:\"}, {\"line_number\": 11, \"line_content\": \"        getImgJS = ('return document.getElementsByClassName(\\\"' + class_name +\"}, {\"line_number\": 12, \"line_content\": \"            '\\\")[0].toDataURL(\\\"image/png\\\");')\"}, {\"line_number\": 13, \"line_content\": \"        bg_img = driver.execute_script(getImgJS)\"}, {\"line_number\": 14, \"line_content\": \"        time.sleep(0.5)\"}, {\"line_number\": 15, \"line_content\": \"    if contain_type:\"}, {\"line_number\": 16, \"line_content\": \"        return bg_img\"}, {\"line_number\": 17, \"line_content\": \"    else:\"}, {\"line_number\": 18, \"line_content\": \"        return bg_img[bg_img.find(',') + 1:]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Jack-Cherish/python-spider\", \"direct_link_to_file_line\": \"https://github.com/Jack-Cherish/python-spider/blob/master/python-spider/geetest.py#L84\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def open(self):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"\\t\\t\\u6253\\u5f00\\u6d4f\\u89c8\\u5668,\\u5e76\\u8f93\\u5165\\u67e5\\u8be2\\u5185\\u5bb9\"}, {\"line_number\": 4, \"line_content\": \"\\t\\t\\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    self.browser.get(self.url)\"}, {\"line_number\": 6, \"line_content\": \"    keyword = self.wait.until(EC.presence_of_element_located((By.ID,\"}, {\"line_number\": 7, \"line_content\": \"        'keyword_qycx')))\"}, {\"line_number\": 8, \"line_content\": \"    bowton = self.wait.until(EC.presence_of_element_located((By.CLASS_NAME,\"}, {\"line_number\": 9, \"line_content\": \"        'btn')))\"}, {\"line_number\": 10, \"line_content\": \"    keyword.send_keys(self.keyword)\"}, {\"line_number\": 11, \"line_content\": \"    bowton.click()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Jack-Cherish/python-spider\", \"direct_link_to_file_line\": \"https://github.com/Jack-Cherish/python-spider/blob/master/python-spider/geetest.py#L126\", \"contents\": {\"total_lines\": 28, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_merge_image(self, filename, location_list):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"\\t\\t\\u6839\\u636e\\u4f4d\\u7f6e\\u5bf9\\u56fe\\u7247\\u8fdb\\u884c\\u5408\\u5e76\\u8fd8\\u539f\"}, {\"line_number\": 4, \"line_content\": \"\\t\\t:filename:\\u56fe\\u7247\"}, {\"line_number\": 5, \"line_content\": \"\\t\\t:location_list:\\u56fe\\u7247\\u4f4d\\u7f6e\"}, {\"line_number\": 6, \"line_content\": \"\\t\\t\\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    im = image.open(filename)\"}, {\"line_number\": 8, \"line_content\": \"    new_im = image.new('RGB', (260, 116))\"}, {\"line_number\": 9, \"line_content\": \"    im_list_upper = []\"}, {\"line_number\": 10, \"line_content\": \"    im_list_down = []\"}, {\"line_number\": 11, \"line_content\": \"    for location in location_list:\"}, {\"line_number\": 12, \"line_content\": \"        if location['y'] == -58:\"}, {\"line_number\": 13, \"line_content\": \"            im_list_upper.append(im.crop((abs(location['x']), 58, abs(\"}, {\"line_number\": 14, \"line_content\": \"                location['x']) + 10, 166)))\"}, {\"line_number\": 15, \"line_content\": \"        if location['y'] == 0:\"}, {\"line_number\": 16, \"line_content\": \"            im_list_down.append(im.crop((abs(location['x']), 0, abs(\"}, {\"line_number\": 17, \"line_content\": \"                location['x']) + 10, 58)))\"}, {\"line_number\": 18, \"line_content\": \"    new_im = image.new('RGB', (260, 116))\"}, {\"line_number\": 19, \"line_content\": \"    x_offset = 0\"}, {\"line_number\": 20, \"line_content\": \"    for im in im_list_upper:\"}, {\"line_number\": 21, \"line_content\": \"        new_im.paste(im, (x_offset, 0))\"}, {\"line_number\": 22, \"line_content\": \"        x_offset += im.size[0]\"}, {\"line_number\": 23, \"line_content\": \"    x_offset = 0\"}, {\"line_number\": 24, \"line_content\": \"    for im in im_list_down:\"}, {\"line_number\": 25, \"line_content\": \"        new_im.paste(im, (x_offset, 58))\"}, {\"line_number\": 26, \"line_content\": \"        x_offset += im.size[0]\"}, {\"line_number\": 27, \"line_content\": \"    new_im.save(filename)\"}, {\"line_number\": 28, \"line_content\": \"    return new_im\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Jack-Cherish/python-spider\", \"direct_link_to_file_line\": \"https://github.com/Jack-Cherish/python-spider/blob/master/python-spider/geetest.py#L126\", \"contents\": {\"total_lines\": 28, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_merge_image(self, filename, location_list):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"\\t\\t\\u6839\\u636e\\u4f4d\\u7f6e\\u5bf9\\u56fe\\u7247\\u8fdb\\u884c\\u5408\\u5e76\\u8fd8\\u539f\"}, {\"line_number\": 4, \"line_content\": \"\\t\\t:filename:\\u56fe\\u7247\"}, {\"line_number\": 5, \"line_content\": \"\\t\\t:location_list:\\u56fe\\u7247\\u4f4d\\u7f6e\"}, {\"line_number\": 6, \"line_content\": \"\\t\\t\\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    im = image.open(filename)\"}, {\"line_number\": 8, \"line_content\": \"    new_im = image.new('RGB', (260, 116))\"}, {\"line_number\": 9, \"line_content\": \"    im_list_upper = []\"}, {\"line_number\": 10, \"line_content\": \"    im_list_down = []\"}, {\"line_number\": 11, \"line_content\": \"    for location in location_list:\"}, {\"line_number\": 12, \"line_content\": \"        if location['y'] == -58:\"}, {\"line_number\": 13, \"line_content\": \"            im_list_upper.append(im.crop((abs(location['x']), 58, abs(\"}, {\"line_number\": 14, \"line_content\": \"                location['x']) + 10, 166)))\"}, {\"line_number\": 15, \"line_content\": \"        if location['y'] == 0:\"}, {\"line_number\": 16, \"line_content\": \"            im_list_down.append(im.crop((abs(location['x']), 0, abs(\"}, {\"line_number\": 17, \"line_content\": \"                location['x']) + 10, 58)))\"}, {\"line_number\": 18, \"line_content\": \"    new_im = image.new('RGB', (260, 116))\"}, {\"line_number\": 19, \"line_content\": \"    x_offset = 0\"}, {\"line_number\": 20, \"line_content\": \"    for im in im_list_upper:\"}, {\"line_number\": 21, \"line_content\": \"        new_im.paste(im, (x_offset, 0))\"}, {\"line_number\": 22, \"line_content\": \"        x_offset += im.size[0]\"}, {\"line_number\": 23, \"line_content\": \"    x_offset = 0\"}, {\"line_number\": 24, \"line_content\": \"    for im in im_list_down:\"}, {\"line_number\": 25, \"line_content\": \"        new_im.paste(im, (x_offset, 58))\"}, {\"line_number\": 26, \"line_content\": \"        x_offset += im.size[0]\"}, {\"line_number\": 27, \"line_content\": \"    new_im.save(filename)\"}, {\"line_number\": 28, \"line_content\": \"    return new_im\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/eriklindernoren/ML-From-Scratch\", \"direct_link_to_file_line\": \"https://github.com/eriklindernoren/ML-From-Scratch/blob/master/ML-From-Scratch/mlfromscratch/utils/data_operation.py#L7\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def calculate_entropy(y):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Calculate the entropy of label array y \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    log2 = lambda x: math.log(x) / math.log(2)\"}, {\"line_number\": 4, \"line_content\": \"    unique_labels = np.unique(y)\"}, {\"line_number\": 5, \"line_content\": \"    entropy = 0\"}, {\"line_number\": 6, \"line_content\": \"    for label in unique_labels:\"}, {\"line_number\": 7, \"line_content\": \"        count = len(y[y == label])\"}, {\"line_number\": 8, \"line_content\": \"        p = count / len(y)\"}, {\"line_number\": 9, \"line_content\": \"        entropy += -p * log2(p)\"}, {\"line_number\": 10, \"line_content\": \"    return entropy\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/eriklindernoren/ML-From-Scratch\", \"direct_link_to_file_line\": \"https://github.com/eriklindernoren/ML-From-Scratch/blob/master/ML-From-Scratch/mlfromscratch/utils/data_operation.py#L19\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def mean_squared_error(y_true, y_pred):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Returns the mean squared error between y_true and y_pred \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    mse = np.mean(np.power(y_true - y_pred, 2))\"}, {\"line_number\": 4, \"line_content\": \"    return mse\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/eriklindernoren/ML-From-Scratch\", \"direct_link_to_file_line\": \"https://github.com/eriklindernoren/ML-From-Scratch/blob/master/ML-From-Scratch/mlfromscratch/utils/data_operation.py#L25\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def calculate_variance(X):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Return the variance of the features in dataset X \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    mean = np.ones(np.shape(X)) * X.mean(0)\"}, {\"line_number\": 4, \"line_content\": \"    n_samples = np.shape(X)[0]\"}, {\"line_number\": 5, \"line_content\": \"    variance = 1 / n_samples * np.diag((X - mean).T.dot(X - mean))\"}, {\"line_number\": 6, \"line_content\": \"    return variance\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/eriklindernoren/ML-From-Scratch\", \"direct_link_to_file_line\": \"https://github.com/eriklindernoren/ML-From-Scratch/blob/master/ML-From-Scratch/mlfromscratch/utils/data_operation.py#L34\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def calculate_std_dev(X):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Calculate the standard deviations of the features in dataset X \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    std_dev = np.sqrt(calculate_variance(X))\"}, {\"line_number\": 4, \"line_content\": \"    return std_dev\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/eriklindernoren/ML-From-Scratch\", \"direct_link_to_file_line\": \"https://github.com/eriklindernoren/ML-From-Scratch/blob/master/ML-From-Scratch/mlfromscratch/utils/data_operation.py#L40\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def euclidean_distance(x1, x2):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Calculates the l2 distance between two vectors \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    distance = 0\"}, {\"line_number\": 4, \"line_content\": \"    for i in range(len(x1)):\"}, {\"line_number\": 5, \"line_content\": \"        distance += pow(x1[i] - x2[i], 2)\"}, {\"line_number\": 6, \"line_content\": \"    return math.sqrt(distance)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Eloston/ungoogled-chromium\", \"direct_link_to_file_line\": \"https://github.com/Eloston/ungoogled-chromium/blob/master/ungoogled-chromium/utils/patches.py#L18\", \"contents\": {\"total_lines\": 17, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _find_patch_from_env():\"}, {\"line_number\": 2, \"line_content\": \"    patch_bin_path = None\"}, {\"line_number\": 3, \"line_content\": \"    patch_bin_env = os.environ.get('PATCH_BIN')\"}, {\"line_number\": 4, \"line_content\": \"    if patch_bin_env:\"}, {\"line_number\": 5, \"line_content\": \"        patch_bin_path = Path(patch_bin_env)\"}, {\"line_number\": 6, \"line_content\": \"        if patch_bin_path.exists():\"}, {\"line_number\": 7, \"line_content\": \"            get_logger().debug('Found PATCH_BIN with path \\\"%s\\\"', patch_bin_path\"}, {\"line_number\": 8, \"line_content\": \"                )\"}, {\"line_number\": 9, \"line_content\": \"        else:\"}, {\"line_number\": 10, \"line_content\": \"            patch_which = shutil.which(patch_bin_env)\"}, {\"line_number\": 11, \"line_content\": \"            if patch_which:\"}, {\"line_number\": 12, \"line_content\": \"                get_logger().debug('Found PATCH_BIN for command with path \\\"%s\\\"'\"}, {\"line_number\": 13, \"line_content\": \"                    , patch_which)\"}, {\"line_number\": 14, \"line_content\": \"                patch_bin_path = Path(patch_which)\"}, {\"line_number\": 15, \"line_content\": \"    else:\"}, {\"line_number\": 16, \"line_content\": \"        get_logger().debug('PATCH_BIN env variable is not set')\"}, {\"line_number\": 17, \"line_content\": \"    return patch_bin_path\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Eloston/ungoogled-chromium\", \"direct_link_to_file_line\": \"https://github.com/Eloston/ungoogled-chromium/blob/master/ungoogled-chromium/utils/patches.py#L35\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _find_patch_from_which():\"}, {\"line_number\": 2, \"line_content\": \"    patch_which = shutil.which('patch')\"}, {\"line_number\": 3, \"line_content\": \"    if not patch_which:\"}, {\"line_number\": 4, \"line_content\": \"        get_logger().debug('Did not find \\\"patch\\\" in PATH environment variable')\"}, {\"line_number\": 5, \"line_content\": \"        return None\"}, {\"line_number\": 6, \"line_content\": \"    return Path(patch_which)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Eloston/ungoogled-chromium\", \"direct_link_to_file_line\": \"https://github.com/Eloston/ungoogled-chromium/blob/master/ungoogled-chromium/utils/patches.py#L43\", \"contents\": {\"total_lines\": 29, \"lines\": [{\"line_number\": 1, \"line_content\": \"def find_and_check_patch(patch_bin_path=None):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Find and/or check the patch binary is working. It finds a path to patch in this order:\"}, {\"line_number\": 4, \"line_content\": \"    1. Use patch_bin_path if it is not None\"}, {\"line_number\": 5, \"line_content\": \"    2. See if \\\"PATCH_BIN\\\" environment variable is set\"}, {\"line_number\": 6, \"line_content\": \"    3. Do \\\"which patch\\\" to find GNU patch\"}, {\"line_number\": 7, \"line_content\": \"    Then it does some sanity checks to see if the patch command is valid.\"}, {\"line_number\": 8, \"line_content\": \"    Returns the path to the patch binary found.\"}, {\"line_number\": 9, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 10, \"line_content\": \"    if patch_bin_path is None:\"}, {\"line_number\": 11, \"line_content\": \"        patch_bin_path = _find_patch_from_env()\"}, {\"line_number\": 12, \"line_content\": \"    if patch_bin_path is None:\"}, {\"line_number\": 13, \"line_content\": \"        patch_bin_path = _find_patch_from_which()\"}, {\"line_number\": 14, \"line_content\": \"    if not patch_bin_path:\"}, {\"line_number\": 15, \"line_content\": \"        raise ValueError(\"}, {\"line_number\": 16, \"line_content\": \"            'Could not find patch from PATCH_BIN env var or \\\"which patch\\\"')\"}, {\"line_number\": 17, \"line_content\": \"    if not patch_bin_path.exists():\"}, {\"line_number\": 18, \"line_content\": \"        raise ValueError('Could not find the patch binary: {}'.format(\"}, {\"line_number\": 19, \"line_content\": \"            patch_bin_path))\"}, {\"line_number\": 20, \"line_content\": \"    cmd = [str(patch_bin_path), '--version']\"}, {\"line_number\": 21, \"line_content\": \"    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.\"}, {\"line_number\": 22, \"line_content\": \"        PIPE, universal_newlines=True)\"}, {\"line_number\": 23, \"line_content\": \"    if result.returncode:\"}, {\"line_number\": 24, \"line_content\": \"        get_logger().error('\\\"%s\\\" returned non-zero exit code', ' '.join(cmd))\"}, {\"line_number\": 25, \"line_content\": \"        get_logger().error('stdout:\\\\n%s', result.stdout)\"}, {\"line_number\": 26, \"line_content\": \"        get_logger().error('stderr:\\\\n%s', result.stderr)\"}, {\"line_number\": 27, \"line_content\": \"        raise RuntimeError('Got non-zero exit code running \\\"{}\\\"'.format(' '\"}, {\"line_number\": 28, \"line_content\": \"            .join(cmd)))\"}, {\"line_number\": 29, \"line_content\": \"    return patch_bin_path\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Eloston/ungoogled-chromium\", \"direct_link_to_file_line\": \"https://github.com/Eloston/ungoogled-chromium/blob/master/ungoogled-chromium/utils/patches.py#L78\", \"contents\": {\"total_lines\": 16, \"lines\": [{\"line_number\": 1, \"line_content\": \"def dry_run_check(patch_path, tree_path, patch_bin_path=None):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Run patch --dry-run on a patch\"}, {\"line_number\": 4, \"line_content\": \"    tree_path is the pathlib.Path of the source tree to patch\"}, {\"line_number\": 5, \"line_content\": \"    patch_path is a pathlib.Path to check\"}, {\"line_number\": 6, \"line_content\": \"    reverse is whether the patches should be reversed\"}, {\"line_number\": 7, \"line_content\": \"    patch_bin_path is the pathlib.Path of the patch binary, or None to find it automatically\"}, {\"line_number\": 8, \"line_content\": \"        See find_and_check_patch() for logic to find \\\"patch\\\"\"}, {\"line_number\": 9, \"line_content\": \"    Returns the status code, stdout, and stderr of patch --dry-run\"}, {\"line_number\": 10, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 11, \"line_content\": \"    cmd = [str(find_and_check_patch(patch_bin_path)), '-p1',\"}, {\"line_number\": 12, \"line_content\": \"        '--ignore-whitespace', '-i', str(patch_path), '-d', str(tree_path),\"}, {\"line_number\": 13, \"line_content\": \"        '--no-backup-if-mismatch', '--dry-run']\"}, {\"line_number\": 14, \"line_content\": \"    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.\"}, {\"line_number\": 15, \"line_content\": \"        PIPE, universal_newlines=True)\"}, {\"line_number\": 16, \"line_content\": \"    return result.returncode, result.stdout, result.stderr\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Eloston/ungoogled-chromium\", \"direct_link_to_file_line\": \"https://github.com/Eloston/ungoogled-chromium/blob/master/ungoogled-chromium/utils/patches.py#L135\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def generate_patches_from_series(patches_dir, resolve=False):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Generates pathlib.Path for patches from a directory in GNU Quilt format\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    for patch_path in parse_series(patches_dir / 'series'):\"}, {\"line_number\": 4, \"line_content\": \"        if resolve:\"}, {\"line_number\": 5, \"line_content\": \"            yield (patches_dir / patch_path).resolve()\"}, {\"line_number\": 6, \"line_content\": \"        else:\"}, {\"line_number\": 7, \"line_content\": \"            yield patch_path\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tensorflow/models\", \"direct_link_to_file_line\": \"https://github.com/tensorflow/models/blob/master/models/official/core/input_reader.py#L179\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"@property\"}, {\"line_number\": 2, \"line_content\": \"def tfds_info(self) ->tfds.core.DatasetInfo:\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Returns TFDS dataset info, if available.\\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    if self._tfds_builder:\"}, {\"line_number\": 5, \"line_content\": \"        return self._tfds_builder.info\"}, {\"line_number\": 6, \"line_content\": \"    else:\"}, {\"line_number\": 7, \"line_content\": \"        raise ValueError(\"}, {\"line_number\": 8, \"line_content\": \"            'tfds_info is not available, because the dataset is not loaded from tfds.'\"}, {\"line_number\": 9, \"line_content\": \"            )\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tensorflow/models\", \"direct_link_to_file_line\": \"https://github.com/tensorflow/models/blob/master/models/official/core/input_reader.py#L210\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def maybe_map_fn(dataset, fn):\"}, {\"line_number\": 2, \"line_content\": \"    return dataset if fn is None else dataset.map(fn, num_parallel_calls=tf\"}, {\"line_number\": 3, \"line_content\": \"        .data.experimental.AUTOTUNE)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tensorflow/models\", \"direct_link_to_file_line\": \"https://github.com/tensorflow/models/blob/master/models/official/core/base_task.py#L291\", \"contents\": {\"total_lines\": 26, \"lines\": [{\"line_number\": 1, \"line_content\": \"def register_task_cls(task_config_cls):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Decorates a factory of Tasks for lookup by a subclass of TaskConfig.\"}, {\"line_number\": 3, \"line_content\": \"  This decorator supports registration of tasks as follows:\"}, {\"line_number\": 4, \"line_content\": \"  ```\"}, {\"line_number\": 5, \"line_content\": \"  @dataclasses.dataclass\"}, {\"line_number\": 6, \"line_content\": \"  class MyTaskConfig(TaskConfig):\"}, {\"line_number\": 7, \"line_content\": \"    # Add fields here.\"}, {\"line_number\": 8, \"line_content\": \"    pass\"}, {\"line_number\": 9, \"line_content\": \"  @register_task_cls(MyTaskConfig)\"}, {\"line_number\": 10, \"line_content\": \"  class MyTask(Task):\"}, {\"line_number\": 11, \"line_content\": \"    # Inherits def __init__(self, task_config).\"}, {\"line_number\": 12, \"line_content\": \"    pass\"}, {\"line_number\": 13, \"line_content\": \"  my_task_config = MyTaskConfig()\"}, {\"line_number\": 14, \"line_content\": \"  my_task = get_task(my_task_config)  # Returns MyTask(my_task_config).\"}, {\"line_number\": 15, \"line_content\": \"  ```\"}, {\"line_number\": 16, \"line_content\": \"  Besisdes a class itself, other callables that create a Task from a TaskConfig\"}, {\"line_number\": 17, \"line_content\": \"  can be decorated by the result of this function, as long as there is at most\"}, {\"line_number\": 18, \"line_content\": \"  one registration for each config class.\"}, {\"line_number\": 19, \"line_content\": \"  Args:\"}, {\"line_number\": 20, \"line_content\": \"    task_config_cls: a subclass of TaskConfig (*not* an instance of TaskConfig).\"}, {\"line_number\": 21, \"line_content\": \"      Each task_config_cls can only be used for a single registration.\"}, {\"line_number\": 22, \"line_content\": \"  Returns:\"}, {\"line_number\": 23, \"line_content\": \"    A callable for use as class decorator that registers the decorated class\"}, {\"line_number\": 24, \"line_content\": \"    for creation from an instance of task_config_cls.\"}, {\"line_number\": 25, \"line_content\": \"  \\\"\\\"\\\"\"}, {\"line_number\": 26, \"line_content\": \"    return registry.register(_REGISTERED_TASK_CLS, task_config_cls)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tensorflow/models\", \"direct_link_to_file_line\": \"https://github.com/tensorflow/models/blob/master/models/official/core/base_task.py#L328\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_task_cls(task_config_cls):\"}, {\"line_number\": 2, \"line_content\": \"    task_cls = registry.lookup(_REGISTERED_TASK_CLS, task_config_cls)\"}, {\"line_number\": 3, \"line_content\": \"    return task_cls\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tensorflow/models\", \"direct_link_to_file_line\": \"https://github.com/tensorflow/models/blob/master/models/official/core/base_task.py#L51\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"@property\"}, {\"line_number\": 2, \"line_content\": \"def task_config(self) ->cfg.TaskConfig:\"}, {\"line_number\": 3, \"line_content\": \"    return self._task_config\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kovidgoyal/calibre\", \"direct_link_to_file_line\": \"https://github.com/kovidgoyal/calibre/blob/master/calibre/setup.py#L12\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def check_version_info():\"}, {\"line_number\": 2, \"line_content\": \"    vi = sys.version_info\"}, {\"line_number\": 3, \"line_content\": \"    if vi[0] == 2 and vi[1:3] >= (7, 9):\"}, {\"line_number\": 4, \"line_content\": \"        return\"}, {\"line_number\": 5, \"line_content\": \"    if vi.major > 2 and 'CALIBRE_PY3_PORT' in os.environ:\"}, {\"line_number\": 6, \"line_content\": \"        return\"}, {\"line_number\": 7, \"line_content\": \"    raise SystemExit(\"}, {\"line_number\": 8, \"line_content\": \"        'calibre requires python >= 2.7.9 and < 3. Current python version: ' +\"}, {\"line_number\": 9, \"line_content\": \"        '.'.join(map(str, vi[:3])))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kovidgoyal/calibre\", \"direct_link_to_file_line\": \"https://github.com/kovidgoyal/calibre/blob/master/calibre/setup.py#L31\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def option_parser():\"}, {\"line_number\": 2, \"line_content\": \"    import optparse\"}, {\"line_number\": 3, \"line_content\": \"    parser = optparse.OptionParser()\"}, {\"line_number\": 4, \"line_content\": \"    parser.add_option('-c', '--clean', default=False, action='store_true',\"}, {\"line_number\": 5, \"line_content\": \"        help=\"}, {\"line_number\": 6, \"line_content\": \"        'Instead of running the command delete all files generated by the command'\"}, {\"line_number\": 7, \"line_content\": \"        )\"}, {\"line_number\": 8, \"line_content\": \"    parser.add_option('--clean-backups', default=False, action='store_true',\"}, {\"line_number\": 9, \"line_content\": \"        help='Delete all backup files from the source tree')\"}, {\"line_number\": 10, \"line_content\": \"    parser.add_option('--clean-all', default=False, action='store_true',\"}, {\"line_number\": 11, \"line_content\": \"        help='Delete all machine generated files from the source tree')\"}, {\"line_number\": 12, \"line_content\": \"    return parser\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kovidgoyal/calibre\", \"direct_link_to_file_line\": \"https://github.com/kovidgoyal/calibre/blob/master/calibre/setup.py#L54\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def clean_backups():\"}, {\"line_number\": 2, \"line_content\": \"    for root, _, files in os.walk('.'):\"}, {\"line_number\": 3, \"line_content\": \"        for name in files:\"}, {\"line_number\": 4, \"line_content\": \"            for t in ('.pyc', '.pyo', '~', '.swp', '.swo'):\"}, {\"line_number\": 5, \"line_content\": \"                if name.endswith(t):\"}, {\"line_number\": 6, \"line_content\": \"                    os.remove(os.path.join(root, name))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kovidgoyal/calibre\", \"direct_link_to_file_line\": \"https://github.com/kovidgoyal/calibre/blob/master/calibre/setup.py#L62\", \"contents\": {\"total_lines\": 46, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main(args=sys.argv):\"}, {\"line_number\": 2, \"line_content\": \"    if len(args) == 1 or args[1] in ('-h', '--help'):\"}, {\"line_number\": 3, \"line_content\": \"        print('Usage: python', args[0], 'command', '[options]')\"}, {\"line_number\": 4, \"line_content\": \"        print('\\\\nWhere command is one of:')\"}, {\"line_number\": 5, \"line_content\": \"        print()\"}, {\"line_number\": 6, \"line_content\": \"        for x in sorted(commands.__all__):\"}, {\"line_number\": 7, \"line_content\": \"            print('{:20} -'.format(x), end=' ')\"}, {\"line_number\": 8, \"line_content\": \"            c = getattr(commands, x)\"}, {\"line_number\": 9, \"line_content\": \"            desc = getattr(c, 'short_description', c.description)\"}, {\"line_number\": 10, \"line_content\": \"            print(desc)\"}, {\"line_number\": 11, \"line_content\": \"        print('\\\\nTo get help on a particular command, run:')\"}, {\"line_number\": 12, \"line_content\": \"        print('\\\\tpython', args[0], 'command -h')\"}, {\"line_number\": 13, \"line_content\": \"        return 1\"}, {\"line_number\": 14, \"line_content\": \"    command = args[1]\"}, {\"line_number\": 15, \"line_content\": \"    if command not in commands.__all__:\"}, {\"line_number\": 16, \"line_content\": \"        print(command, 'is not a recognized command.')\"}, {\"line_number\": 17, \"line_content\": \"        print('Valid commands:', ', '.join(commands.__all__))\"}, {\"line_number\": 18, \"line_content\": \"        return 1\"}, {\"line_number\": 19, \"line_content\": \"    command = getattr(commands, command)\"}, {\"line_number\": 20, \"line_content\": \"    parser = option_parser()\"}, {\"line_number\": 21, \"line_content\": \"    command.add_all_options(parser)\"}, {\"line_number\": 22, \"line_content\": \"    parser.set_usage('Usage: python setup.py {} [options]\\\\n\\\\n'.format(args[\"}, {\"line_number\": 23, \"line_content\": \"        1]) + command.description)\"}, {\"line_number\": 24, \"line_content\": \"    opts, args = parser.parse_args(args)\"}, {\"line_number\": 25, \"line_content\": \"    opts.cli_args = args[2:]\"}, {\"line_number\": 26, \"line_content\": \"    if opts.clean_backups:\"}, {\"line_number\": 27, \"line_content\": \"        clean_backups()\"}, {\"line_number\": 28, \"line_content\": \"    if opts.clean:\"}, {\"line_number\": 29, \"line_content\": \"        prints('Cleaning', args[1])\"}, {\"line_number\": 30, \"line_content\": \"        command.clean()\"}, {\"line_number\": 31, \"line_content\": \"        return 0\"}, {\"line_number\": 32, \"line_content\": \"    if opts.clean_all:\"}, {\"line_number\": 33, \"line_content\": \"        for cmd in commands.__all__:\"}, {\"line_number\": 34, \"line_content\": \"            prints('Cleaning', cmd)\"}, {\"line_number\": 35, \"line_content\": \"            getattr(commands, cmd).clean()\"}, {\"line_number\": 36, \"line_content\": \"        return 0\"}, {\"line_number\": 37, \"line_content\": \"    command.run_all(opts)\"}, {\"line_number\": 38, \"line_content\": \"    warnings = get_warnings()\"}, {\"line_number\": 39, \"line_content\": \"    if warnings:\"}, {\"line_number\": 40, \"line_content\": \"        print()\"}, {\"line_number\": 41, \"line_content\": \"        prints('There were', len(warnings), 'warning(s):')\"}, {\"line_number\": 42, \"line_content\": \"        print()\"}, {\"line_number\": 43, \"line_content\": \"        for args, kwargs in warnings:\"}, {\"line_number\": 44, \"line_content\": \"            prints('*', *args, **kwargs)\"}, {\"line_number\": 45, \"line_content\": \"            print()\"}, {\"line_number\": 46, \"line_content\": \"    return 0\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kovidgoyal/calibre\", \"direct_link_to_file_line\": \"https://github.com/kovidgoyal/calibre/blob/master/calibre/bypy/init_env.py#L105\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def read_cal_file(name):\"}, {\"line_number\": 2, \"line_content\": \"    with open(os.path.join(CALIBRE_DIR, 'src', 'calibre', name), 'rb') as f:\"}, {\"line_number\": 3, \"line_content\": \"        return f.read().decode('utf-8')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/donnemartin/system-design-primer\", \"direct_link_to_file_line\": \"https://github.com/donnemartin/system-design-primer/blob/master/system-design-primer/solutions/system_design/sales_rank/sales_rank_mapreduce.py#L8\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def within_past_week(self, timestamp):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Return True if timestamp is within past week, False otherwise.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    ...\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/donnemartin/system-design-primer\", \"direct_link_to_file_line\": \"https://github.com/donnemartin/system-design-primer/blob/master/system-design-primer/solutions/system_design/sales_rank/sales_rank_mapreduce.py#L12\", \"contents\": {\"total_lines\": 13, \"lines\": [{\"line_number\": 1, \"line_content\": \"def mapper(self, _, line):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Parse each log line, extract and transform relevant lines.\"}, {\"line_number\": 3, \"line_content\": \"        Emit key value pairs of the form:\"}, {\"line_number\": 4, \"line_content\": \"        (foo, p1), 2\"}, {\"line_number\": 5, \"line_content\": \"        (bar, p1), 2\"}, {\"line_number\": 6, \"line_content\": \"        (bar, p1), 1\"}, {\"line_number\": 7, \"line_content\": \"        (foo, p2), 3\"}, {\"line_number\": 8, \"line_content\": \"        (bar, p3), 10\"}, {\"line_number\": 9, \"line_content\": \"        (foo, p4), 1\"}, {\"line_number\": 10, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 11, \"line_content\": \"    timestamp, product_id, category, quantity = line.split('\\\\t')\"}, {\"line_number\": 12, \"line_content\": \"    if self.within_past_week(timestamp):\"}, {\"line_number\": 13, \"line_content\": \"        yield (category, product_id), quantity\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/donnemartin/system-design-primer\", \"direct_link_to_file_line\": \"https://github.com/donnemartin/system-design-primer/blob/master/system-design-primer/solutions/system_design/sales_rank/sales_rank_mapreduce.py#L28\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def reducer(self, key, values):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Sum values for each key.\"}, {\"line_number\": 3, \"line_content\": \"        (foo, p1), 2\"}, {\"line_number\": 4, \"line_content\": \"        (bar, p1), 3\"}, {\"line_number\": 5, \"line_content\": \"        (foo, p2), 3\"}, {\"line_number\": 6, \"line_content\": \"        (bar, p3), 10\"}, {\"line_number\": 7, \"line_content\": \"        (foo, p4), 1\"}, {\"line_number\": 8, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 9, \"line_content\": \"    yield key, sum(values)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/donnemartin/system-design-primer\", \"direct_link_to_file_line\": \"https://github.com/donnemartin/system-design-primer/blob/master/system-design-primer/solutions/system_design/sales_rank/sales_rank_mapreduce.py#L39\", \"contents\": {\"total_lines\": 19, \"lines\": [{\"line_number\": 1, \"line_content\": \"def mapper_sort(self, key, value):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Construct key to ensure proper sorting.\"}, {\"line_number\": 3, \"line_content\": \"        Transform key and value to the form:\"}, {\"line_number\": 4, \"line_content\": \"        (foo, 2), p1\"}, {\"line_number\": 5, \"line_content\": \"        (bar, 3), p1\"}, {\"line_number\": 6, \"line_content\": \"        (foo, 3), p2\"}, {\"line_number\": 7, \"line_content\": \"        (bar, 10), p3\"}, {\"line_number\": 8, \"line_content\": \"        (foo, 1), p4\"}, {\"line_number\": 9, \"line_content\": \"        The shuffle/sort step of MapReduce will then do a\"}, {\"line_number\": 10, \"line_content\": \"        distributed sort on the keys, resulting in:\"}, {\"line_number\": 11, \"line_content\": \"        (category1, 1), product4\"}, {\"line_number\": 12, \"line_content\": \"        (category1, 2), product1\"}, {\"line_number\": 13, \"line_content\": \"        (category1, 3), product2\"}, {\"line_number\": 14, \"line_content\": \"        (category2, 3), product1\"}, {\"line_number\": 15, \"line_content\": \"        (category2, 7), product3\"}, {\"line_number\": 16, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 17, \"line_content\": \"    category, product_id = key\"}, {\"line_number\": 18, \"line_content\": \"    quantity = value\"}, {\"line_number\": 19, \"line_content\": \"    yield (category, quantity), product_id\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/donnemartin/system-design-primer\", \"direct_link_to_file_line\": \"https://github.com/donnemartin/system-design-primer/blob/master/system-design-primer/solutions/system_design/sales_rank/sales_rank_mapreduce.py#L63\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def reducer_identity(self, key, value):\"}, {\"line_number\": 2, \"line_content\": \"    yield key, value\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/wifiphisher/wifiphisher\", \"direct_link_to_file_line\": \"https://github.com/wifiphisher/wifiphisher/blob/master/wifiphisher/setup.py#L75\", \"contents\": {\"total_lines\": 35, \"lines\": [{\"line_number\": 1, \"line_content\": \"def check_required_library(libname, libraries=None, include_dir=None):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Check if the required shared library exists\"}, {\"line_number\": 4, \"line_content\": \"    :param libname: The name of shared library\"}, {\"line_number\": 5, \"line_content\": \"    :type libname: str\"}, {\"line_number\": 6, \"line_content\": \"    :return True if the required shared lib exists else false\"}, {\"line_number\": 7, \"line_content\": \"    :rtype: bool\"}, {\"line_number\": 8, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 9, \"line_content\": \"    build_success = True\"}, {\"line_number\": 10, \"line_content\": \"    tmp_dir = tempfile.mkdtemp(prefix='tmp_' + libname + '_')\"}, {\"line_number\": 11, \"line_content\": \"    bin_file_name = os.path.join(tmp_dir, 'test_' + libname)\"}, {\"line_number\": 12, \"line_content\": \"    file_name = bin_file_name + '.c'\"}, {\"line_number\": 13, \"line_content\": \"    with open(file_name, 'w') as filep:\"}, {\"line_number\": 14, \"line_content\": \"        filep.write(LIBNAME_CODE_DICT[libname])\"}, {\"line_number\": 15, \"line_content\": \"    compiler = distutils.ccompiler.new_compiler()\"}, {\"line_number\": 16, \"line_content\": \"    distutils.sysconfig.customize_compiler(compiler)\"}, {\"line_number\": 17, \"line_content\": \"    try:\"}, {\"line_number\": 18, \"line_content\": \"        compiler.link_executable(compiler.compile([file_name], include_dirs\"}, {\"line_number\": 19, \"line_content\": \"            =include_dir), bin_file_name, libraries=libraries)\"}, {\"line_number\": 20, \"line_content\": \"    except CompileError:\"}, {\"line_number\": 21, \"line_content\": \"        build_success = False\"}, {\"line_number\": 22, \"line_content\": \"    except LinkError:\"}, {\"line_number\": 23, \"line_content\": \"        build_success = False\"}, {\"line_number\": 24, \"line_content\": \"    finally:\"}, {\"line_number\": 25, \"line_content\": \"        shutil.rmtree(tmp_dir)\"}, {\"line_number\": 26, \"line_content\": \"    if build_success:\"}, {\"line_number\": 27, \"line_content\": \"        return True\"}, {\"line_number\": 28, \"line_content\": \"    err_msg = ('The development package for ' + libname + ' is required ' +\"}, {\"line_number\": 29, \"line_content\": \"        'for the compilation of roguehostapd. ' + 'Please install it and ' +\"}, {\"line_number\": 30, \"line_content\": \"        'rerun the script (e.g. on Debian-based systems run: apt-get install ')\"}, {\"line_number\": 31, \"line_content\": \"    if libname == 'openssl':\"}, {\"line_number\": 32, \"line_content\": \"        err_msg += 'libssl-dev'\"}, {\"line_number\": 33, \"line_content\": \"    else:\"}, {\"line_number\": 34, \"line_content\": \"        err_msg += 'libnl-3-dev libnl-genl-3-dev'\"}, {\"line_number\": 35, \"line_content\": \"    sys.exit(err_msg)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/wifiphisher/wifiphisher\", \"direct_link_to_file_line\": \"https://github.com/wifiphisher/wifiphisher/blob/master/wifiphisher/setup.py#L119\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def check_dnsmasq():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Try to install dnsmasq on host machine if not present.\"}, {\"line_number\": 4, \"line_content\": \"    :return: None\"}, {\"line_number\": 5, \"line_content\": \"    :rtype: None\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    if not os.path.isfile('/usr/sbin/dnsmasq'):\"}, {\"line_number\": 8, \"line_content\": \"        sys.exit('dnsmasq not found in /usr/sbin/dnsmasq. ' +\"}, {\"line_number\": 9, \"line_content\": \"            'Please install dnsmasq and rerun the script ' +\"}, {\"line_number\": 10, \"line_content\": \"            '(e.g. on Debian-based systems: ' + 'apt-get install dnsmasq)')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/wifiphisher/wifiphisher\", \"direct_link_to_file_line\": \"https://github.com/wifiphisher/wifiphisher/blob/master/wifiphisher/setup.py#L38\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def initialize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/wifiphisher/wifiphisher\", \"direct_link_to_file_line\": \"https://github.com/wifiphisher/wifiphisher/blob/master/wifiphisher/setup.py#L40\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def finalize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/wifiphisher/wifiphisher\", \"direct_link_to_file_line\": \"https://github.com/wifiphisher/wifiphisher/blob/master/wifiphisher/setup.py#L42\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run(self):\"}, {\"line_number\": 2, \"line_content\": \"    os.system('rm -vrf ./build ./dist ./*.pyc ./*.tgz ./*.egg-info')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/huge-success/sanic\", \"direct_link_to_file_line\": \"https://github.com/huge-success/sanic/blob/master/sanic/setup.py#L33\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def open_local(paths, mode='r', encoding='utf8'):\"}, {\"line_number\": 2, \"line_content\": \"    path = os.path.join(os.path.abspath(os.path.dirname(__file__)), *paths)\"}, {\"line_number\": 3, \"line_content\": \"    return codecs.open(path, mode, encoding)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/huge-success/sanic\", \"direct_link_to_file_line\": \"https://github.com/huge-success/sanic/blob/master/sanic/setup.py#L21\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def initialize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    TestCommand.initialize_options(self)\"}, {\"line_number\": 3, \"line_content\": \"    self.pytest_args = ''\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/huge-success/sanic\", \"direct_link_to_file_line\": \"https://github.com/huge-success/sanic/blob/master/sanic/setup.py#L25\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run_tests(self):\"}, {\"line_number\": 2, \"line_content\": \"    import shlex\"}, {\"line_number\": 3, \"line_content\": \"    import pytest\"}, {\"line_number\": 4, \"line_content\": \"    errno = pytest.main(shlex.split(self.pytest_args))\"}, {\"line_number\": 5, \"line_content\": \"    sys.exit(errno)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/huge-success/sanic\", \"direct_link_to_file_line\": \"https://github.com/huge-success/sanic/blob/master/sanic/scripts/release.py#L72\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _run_shell_command(command: list):\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        process = Popen(command, stderr=PIPE, stdout=PIPE, stdin=PIPE,\"}, {\"line_number\": 4, \"line_content\": \"            shell=True)\"}, {\"line_number\": 5, \"line_content\": \"        output, error = process.communicate()\"}, {\"line_number\": 6, \"line_content\": \"        return_code = process.returncode\"}, {\"line_number\": 7, \"line_content\": \"        return output.decode('utf-8'), error, return_code\"}, {\"line_number\": 8, \"line_content\": \"    except:\"}, {\"line_number\": 9, \"line_content\": \"        return None, None, -1\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/huge-success/sanic\", \"direct_link_to_file_line\": \"https://github.com/huge-success/sanic/blob/master/sanic/scripts/release.py#L84\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _fetch_default_calendar_release_version():\"}, {\"line_number\": 2, \"line_content\": \"    return datetime.now().strftime('%y.%m.0')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/gunthercox/ChatterBot\", \"direct_link_to_file_line\": \"https://github.com/gunthercox/ChatterBot/blob/master/ChatterBot/chatterbot/trainers.py#L21\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, chatbot, **kwargs):\"}, {\"line_number\": 2, \"line_content\": \"    self.chatbot = chatbot\"}, {\"line_number\": 3, \"line_content\": \"    environment_default = os.getenv('CHATTERBOT_SHOW_TRAINING_PROGRESS', True)\"}, {\"line_number\": 4, \"line_content\": \"    self.show_training_progress = kwargs.get('show_training_progress',\"}, {\"line_number\": 5, \"line_content\": \"        environment_default)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/gunthercox/ChatterBot\", \"direct_link_to_file_line\": \"https://github.com/gunthercox/ChatterBot/blob/master/ChatterBot/chatterbot/trainers.py#L30\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_preprocessed_statement(self, input_statement):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"        Preprocess the input statement.\"}, {\"line_number\": 4, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    for preprocessor in self.chatbot.preprocessors:\"}, {\"line_number\": 6, \"line_content\": \"        input_statement = preprocessor(input_statement)\"}, {\"line_number\": 7, \"line_content\": \"    return input_statement\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/gunthercox/ChatterBot\", \"direct_link_to_file_line\": \"https://github.com/gunthercox/ChatterBot/blob/master/ChatterBot/chatterbot/trainers.py#L39\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def train(self, *args, **kwargs):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"        This method must be overridden by a child class.\"}, {\"line_number\": 4, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    raise self.TrainerInitializationException()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/gunthercox/ChatterBot\", \"direct_link_to_file_line\": \"https://github.com/gunthercox/ChatterBot/blob/master/ChatterBot/chatterbot/trainers.py#L58\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _generate_export_data(self):\"}, {\"line_number\": 2, \"line_content\": \"    result = []\"}, {\"line_number\": 3, \"line_content\": \"    for statement in self.chatbot.storage.filter():\"}, {\"line_number\": 4, \"line_content\": \"        if statement.in_response_to:\"}, {\"line_number\": 5, \"line_content\": \"            result.append([statement.in_response_to, statement.text])\"}, {\"line_number\": 6, \"line_content\": \"    return result\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/gunthercox/ChatterBot\", \"direct_link_to_file_line\": \"https://github.com/gunthercox/ChatterBot/blob/master/ChatterBot/chatterbot/trainers.py#L66\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def export_for_training(self, file_path='./export.json'):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"        Create a file from the database that can be used to\"}, {\"line_number\": 4, \"line_content\": \"        train other chat bots.\"}, {\"line_number\": 5, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    import json\"}, {\"line_number\": 7, \"line_content\": \"    export = {'conversations': self._generate_export_data()}\"}, {\"line_number\": 8, \"line_content\": \"    with open(file_path, 'w+', encoding='utf8') as jsonfile:\"}, {\"line_number\": 9, \"line_content\": \"        json.dump(export, jsonfile, ensure_ascii=False)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/willmcgugan/rich\", \"direct_link_to_file_line\": \"https://github.com/willmcgugan/rich/blob/master/rich/tools/make_terminal_widths.py#L62\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test(widths_table):\"}, {\"line_number\": 2, \"line_content\": \"    for codepoint in progress.track(range(0, sys.maxunicode + 1),\"}, {\"line_number\": 3, \"line_content\": \"        description='Testing...'):\"}, {\"line_number\": 4, \"line_content\": \"        character = chr(codepoint)\"}, {\"line_number\": 5, \"line_content\": \"        width1 = get_cell_size(widths_table, character)\"}, {\"line_number\": 6, \"line_content\": \"        width2 = wcwidth(character)\"}, {\"line_number\": 7, \"line_content\": \"        if width1 != width2:\"}, {\"line_number\": 8, \"line_content\": \"            print(f'{width1} != {width2}')\"}, {\"line_number\": 9, \"line_content\": \"            break\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/willmcgugan/rich\", \"direct_link_to_file_line\": \"https://github.com/willmcgugan/rich/blob/master/rich/tools/make_terminal_widths.py#L74\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run():\"}, {\"line_number\": 2, \"line_content\": \"    with progress:\"}, {\"line_number\": 3, \"line_content\": \"        widths_table = make_widths_table()\"}, {\"line_number\": 4, \"line_content\": \"        test(widths_table)\"}, {\"line_number\": 5, \"line_content\": \"    table_file = f\\\"\\\"\\\"# Auto generated by make_terminal_widths.py\"}, {\"line_number\": 6, \"line_content\": \"CELL_WIDTHS = {widths_table!r}\"}, {\"line_number\": 7, \"line_content\": \"\\\"\\\"\\\"\"}, {\"line_number\": 8, \"line_content\": \"    with open('../rich/_cell_widths.py', 'wt') as fh:\"}, {\"line_number\": 9, \"line_content\": \"        fh.write(table_file)\"}, {\"line_number\": 10, \"line_content\": \"    subprocess.run('black ../rich/_cell_widths.py', shell=True)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/willmcgugan/rich\", \"direct_link_to_file_line\": \"https://github.com/willmcgugan/rich/blob/master/rich/rich/panel.py#L61\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"@classmethod\"}, {\"line_number\": 2, \"line_content\": \"def fit(cls, renderable: 'RenderableType', box: Box=ROUNDED, *, title:\"}, {\"line_number\": 3, \"line_content\": \"    TextType=None, title_align: AlignValues='center', safe_box: Optional[\"}, {\"line_number\": 4, \"line_content\": \"    bool]=None, style: StyleType='none', border_style: StyleType='none',\"}, {\"line_number\": 5, \"line_content\": \"    width: Optional[int]=None, padding: PaddingDimensions=0):\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"An alternative constructor that sets expand=False.\\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    return cls(renderable, box, title=title, title_align=title_align,\"}, {\"line_number\": 8, \"line_content\": \"        safe_box=safe_box, style=style, border_style=border_style, width=\"}, {\"line_number\": 9, \"line_content\": \"        width, padding=padding, expand=False)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/willmcgugan/rich\", \"direct_link_to_file_line\": \"https://github.com/willmcgugan/rich/blob/master/rich/rich/cells.py#L44\", \"contents\": {\"total_lines\": 26, \"lines\": [{\"line_number\": 1, \"line_content\": \"@lru_cache(maxsize=4096)\"}, {\"line_number\": 2, \"line_content\": \"def _get_codepoint_cell_size(codepoint: int) ->int:\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Get the cell size of a character.\"}, {\"line_number\": 4, \"line_content\": \"    \"}, {\"line_number\": 5, \"line_content\": \"    Args:\"}, {\"line_number\": 6, \"line_content\": \"        character (str): A single character.\"}, {\"line_number\": 7, \"line_content\": \"    \"}, {\"line_number\": 8, \"line_content\": \"    Returns:\"}, {\"line_number\": 9, \"line_content\": \"        int: Number of cells (0, 1 or 2) occupied by that character.\"}, {\"line_number\": 10, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 11, \"line_content\": \"    _table = CELL_WIDTHS\"}, {\"line_number\": 12, \"line_content\": \"    lower_bound = 0\"}, {\"line_number\": 13, \"line_content\": \"    upper_bound = len(_table) - 1\"}, {\"line_number\": 14, \"line_content\": \"    index = (lower_bound + upper_bound) // 2\"}, {\"line_number\": 15, \"line_content\": \"    while True:\"}, {\"line_number\": 16, \"line_content\": \"        start, end, width = _table[index]\"}, {\"line_number\": 17, \"line_content\": \"        if codepoint < start:\"}, {\"line_number\": 18, \"line_content\": \"            upper_bound = index - 1\"}, {\"line_number\": 19, \"line_content\": \"        elif codepoint > end:\"}, {\"line_number\": 20, \"line_content\": \"            lower_bound = index + 1\"}, {\"line_number\": 21, \"line_content\": \"        else:\"}, {\"line_number\": 22, \"line_content\": \"            return 0 if width == -1 else width\"}, {\"line_number\": 23, \"line_content\": \"        if upper_bound < lower_bound:\"}, {\"line_number\": 24, \"line_content\": \"            break\"}, {\"line_number\": 25, \"line_content\": \"        index = (lower_bound + upper_bound) // 2\"}, {\"line_number\": 26, \"line_content\": \"    return 1\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/willmcgugan/rich\", \"direct_link_to_file_line\": \"https://github.com/willmcgugan/rich/blob/master/rich/rich/scope.py#L55\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test(foo, bar):\"}, {\"line_number\": 2, \"line_content\": \"    list_of_things = [1, 2, 3, None, 4, True, False, 'Hello World']\"}, {\"line_number\": 3, \"line_content\": \"    dict_of_things = {'version': '1.1', 'method': 'confirmFruitPurchase',\"}, {\"line_number\": 4, \"line_content\": \"        'params': [['apple', 'orange', 'mangoes', 'pomelo'], 1.123], 'id':\"}, {\"line_number\": 5, \"line_content\": \"        '194521489'}\"}, {\"line_number\": 6, \"line_content\": \"    print(render_scope(locals(), title='[i]locals', sort_keys=False))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tflearn/tflearn\", \"direct_link_to_file_line\": \"https://github.com/tflearn/tflearn/blob/master/tflearn/setup.py#L18\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def initialize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    TestCommand.initialize_options(self)\"}, {\"line_number\": 3, \"line_content\": \"    self.pytest_args = test_args\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tflearn/tflearn\", \"direct_link_to_file_line\": \"https://github.com/tflearn/tflearn/blob/master/tflearn/setup.py#L22\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run_tests(self):\"}, {\"line_number\": 2, \"line_content\": \"    import pytest\"}, {\"line_number\": 3, \"line_content\": \"    errno = pytest.main(self.pytest_args)\"}, {\"line_number\": 4, \"line_content\": \"    sys.exit(errno)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tflearn/tflearn\", \"direct_link_to_file_line\": \"https://github.com/tflearn/tflearn/blob/master/tflearn/tflearn/objectives.py#L9\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get(identifier):\"}, {\"line_number\": 2, \"line_content\": \"    return get_from_module(identifier, globals(), 'objective')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tflearn/tflearn\", \"direct_link_to_file_line\": \"https://github.com/tflearn/tflearn/blob/master/tflearn/tflearn/objectives.py#L13\", \"contents\": {\"total_lines\": 22, \"lines\": [{\"line_number\": 1, \"line_content\": \"def softmax_categorical_crossentropy(y_pred, y_true):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Softmax Categorical Crossentropy.\"}, {\"line_number\": 3, \"line_content\": \"    Computes softmax cross entropy between y_pred (logits) and\"}, {\"line_number\": 4, \"line_content\": \"    y_true (labels).\"}, {\"line_number\": 5, \"line_content\": \"    Measures the probability error in discrete classification tasks in which\"}, {\"line_number\": 6, \"line_content\": \"    the classes are mutually exclusive (each entry is in exactly one class).\"}, {\"line_number\": 7, \"line_content\": \"    For example, each CIFAR-10 image is labeled with one and only one label:\"}, {\"line_number\": 8, \"line_content\": \"    an image can be a dog or a truck, but not both.\"}, {\"line_number\": 9, \"line_content\": \"    **WARNING:** This op expects unscaled logits, since it performs a `softmax`\"}, {\"line_number\": 10, \"line_content\": \"    on `y_pred` internally for efficiency.  Do not call this op with the\"}, {\"line_number\": 11, \"line_content\": \"    output of `softmax`, as it will produce incorrect results.\"}, {\"line_number\": 12, \"line_content\": \"    `y_pred` and `y_true` must have the same shape `[batch_size, num_classes]`\"}, {\"line_number\": 13, \"line_content\": \"    and the same dtype (either `float32` or `float64`). It is also required\"}, {\"line_number\": 14, \"line_content\": \"    that `y_true` (labels) are binary arrays (For example, class 2 out of a\"}, {\"line_number\": 15, \"line_content\": \"    total of 5 different classes, will be define as [0., 1., 0., 0., 0.])\"}, {\"line_number\": 16, \"line_content\": \"    Arguments:\"}, {\"line_number\": 17, \"line_content\": \"        y_pred: `Tensor`. Predicted values.\"}, {\"line_number\": 18, \"line_content\": \"        y_true: `Tensor` . Targets (labels), a probability distribution.\"}, {\"line_number\": 19, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 20, \"line_content\": \"    with tf.name_scope('SoftmaxCrossentropy'):\"}, {\"line_number\": 21, \"line_content\": \"        return tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\"}, {\"line_number\": 22, \"line_content\": \"            logits=y_pred, labels=y_true))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tflearn/tflearn\", \"direct_link_to_file_line\": \"https://github.com/tflearn/tflearn/blob/master/tflearn/tflearn/objectives.py#L43\", \"contents\": {\"total_lines\": 23, \"lines\": [{\"line_number\": 1, \"line_content\": \"def categorical_crossentropy(y_pred, y_true):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Categorical Crossentropy.\"}, {\"line_number\": 3, \"line_content\": \"    Computes cross entropy between y_pred (logits) and y_true (labels).\"}, {\"line_number\": 4, \"line_content\": \"    Measures the probability error in discrete classification tasks in which\"}, {\"line_number\": 5, \"line_content\": \"    the classes are mutually exclusive (each entry is in exactly one class).\"}, {\"line_number\": 6, \"line_content\": \"    For example, each CIFAR-10 image is labeled with one and only one label:\"}, {\"line_number\": 7, \"line_content\": \"    an image can be a dog or a truck, but not both.\"}, {\"line_number\": 8, \"line_content\": \"    `y_pred` and `y_true` must have the same shape `[batch_size, num_classes]`\"}, {\"line_number\": 9, \"line_content\": \"    and the same dtype (either `float32` or `float64`). It is also required\"}, {\"line_number\": 10, \"line_content\": \"    that `y_true` (labels) are binary arrays (For example, class 2 out of a\"}, {\"line_number\": 11, \"line_content\": \"    total of 5 different classes, will be define as [0., 1., 0., 0., 0.])\"}, {\"line_number\": 12, \"line_content\": \"    Arguments:\"}, {\"line_number\": 13, \"line_content\": \"        y_pred: `Tensor`. Predicted values.\"}, {\"line_number\": 14, \"line_content\": \"        y_true: `Tensor` . Targets (labels), a probability distribution.\"}, {\"line_number\": 15, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 16, \"line_content\": \"    with tf.name_scope('Crossentropy'):\"}, {\"line_number\": 17, \"line_content\": \"        y_pred /= tf.reduce_sum(y_pred, reduction_indices=len(y_pred.\"}, {\"line_number\": 18, \"line_content\": \"            get_shape()) - 1, keepdims=True)\"}, {\"line_number\": 19, \"line_content\": \"        y_pred = tf.clip_by_value(y_pred, tf.cast(_EPSILON, dtype=_FLOATX),\"}, {\"line_number\": 20, \"line_content\": \"            tf.cast(1.0 - _EPSILON, dtype=_FLOATX))\"}, {\"line_number\": 21, \"line_content\": \"        cross_entropy = -tf.reduce_sum(y_true * tf.log(y_pred),\"}, {\"line_number\": 22, \"line_content\": \"            reduction_indices=len(y_pred.get_shape()) - 1)\"}, {\"line_number\": 23, \"line_content\": \"        return tf.reduce_mean(cross_entropy)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/waditu/tushare\", \"direct_link_to_file_line\": \"https://github.com/waditu/tushare/blob/master/tushare/setup.py#L6\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def read(fname):\"}, {\"line_number\": 2, \"line_content\": \"    return codecs.open(os.path.join(os.path.dirname(__file__), fname)).read()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/waditu/tushare\", \"direct_link_to_file_line\": \"https://github.com/waditu/tushare/blob/master/tushare/setup.py#L65\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def read_install_requires():\"}, {\"line_number\": 2, \"line_content\": \"    reqs = ['pandas>=0.18.0', 'requests>=2.0.0', 'lxml>=3.8.0',\"}, {\"line_number\": 3, \"line_content\": \"        'simplejson>=3.16.0', 'msgpack>=0.5.6', 'pyzmq>=16.0.0']\"}, {\"line_number\": 4, \"line_content\": \"    return reqs\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/waditu/tushare\", \"direct_link_to_file_line\": \"https://github.com/waditu/tushare/blob/master/tushare/test_unittest.py#L10\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def set_data(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.code = '600848'\"}, {\"line_number\": 3, \"line_content\": \"    self.start = '2014-11-03'\"}, {\"line_number\": 4, \"line_content\": \"    self.end = '2014-11-07'\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/waditu/tushare\", \"direct_link_to_file_line\": \"https://github.com/waditu/tushare/blob/master/tushare/test_unittest.py#L15\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_tickData(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.set_data()\"}, {\"line_number\": 3, \"line_content\": \"    td.get_tick_data(self.code, date=self.start)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/waditu/tushare\", \"direct_link_to_file_line\": \"https://github.com/waditu/tushare/blob/master/tushare/test/indictor_test.py#L13\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_plot_all(self):\"}, {\"line_number\": 2, \"line_content\": \"    data = ts.get_k_data('601398', start='2018-01-01', end='2018-05-27')\"}, {\"line_number\": 3, \"line_content\": \"    data = data.sort_values(by=['date'], ascending=True)\"}, {\"line_number\": 4, \"line_content\": \"    idx.plot_all(data, is_show=True, output=None)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/shengqiangzhang/examples-of-web-crawlers\", \"direct_link_to_file_line\": \"https://github.com/shengqiangzhang/examples-of-web-crawlers/blob/master/examples-of-web-crawlers/2.\\u5929\\u732b\\u5546\\u54c1\\u6570\\u636e\\u722c\\u866b(\\u5df2\\u6a21\\u62df\\u767b\\u5f55)/tmall_crawler.py#L16\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self):\"}, {\"line_number\": 2, \"line_content\": \"    url = 'https://login.taobao.com/member/login.jhtml'\"}, {\"line_number\": 3, \"line_content\": \"    self.url = url\"}, {\"line_number\": 4, \"line_content\": \"    options = webdriver.ChromeOptions()\"}, {\"line_number\": 5, \"line_content\": \"    options.add_experimental_option('prefs', {\"}, {\"line_number\": 6, \"line_content\": \"        'profile.managed_default_content_settings.images': 2})\"}, {\"line_number\": 7, \"line_content\": \"    options.add_experimental_option('excludeSwitches', ['enable-automation'])\"}, {\"line_number\": 8, \"line_content\": \"    self.browser = webdriver.Chrome(executable_path=chromedriver_path,\"}, {\"line_number\": 9, \"line_content\": \"        options=options)\"}, {\"line_number\": 10, \"line_content\": \"    self.wait = WebDriverWait(self.browser, 10)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/shengqiangzhang/examples-of-web-crawlers\", \"direct_link_to_file_line\": \"https://github.com/shengqiangzhang/examples-of-web-crawlers/blob/master/examples-of-web-crawlers/2.\\u5929\\u732b\\u5546\\u54c1\\u6570\\u636e\\u722c\\u866b(\\u5df2\\u6a21\\u62df\\u767b\\u5f55)/tmall_crawler.py#L43\", \"contents\": {\"total_lines\": 18, \"lines\": [{\"line_number\": 1, \"line_content\": \"def login(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.browser.get(self.url)\"}, {\"line_number\": 3, \"line_content\": \"    self.browser.implicitly_wait(30)\"}, {\"line_number\": 4, \"line_content\": \"    self.browser.find_element_by_xpath(\"}, {\"line_number\": 5, \"line_content\": \"        '//*[@class=\\\"forget-pwd J_Quick2Static\\\"]').click()\"}, {\"line_number\": 6, \"line_content\": \"    self.browser.implicitly_wait(30)\"}, {\"line_number\": 7, \"line_content\": \"    self.browser.find_element_by_xpath('//*[@class=\\\"weibo-login\\\"]').click()\"}, {\"line_number\": 8, \"line_content\": \"    self.browser.implicitly_wait(30)\"}, {\"line_number\": 9, \"line_content\": \"    self.browser.find_element_by_name('username').send_keys(weibo_username)\"}, {\"line_number\": 10, \"line_content\": \"    self.browser.implicitly_wait(30)\"}, {\"line_number\": 11, \"line_content\": \"    self.browser.find_element_by_name('password').send_keys(weibo_password)\"}, {\"line_number\": 12, \"line_content\": \"    self.browser.implicitly_wait(30)\"}, {\"line_number\": 13, \"line_content\": \"    self.browser.find_element_by_xpath('//*[@class=\\\"btn_tip\\\"]/a/span').click()\"}, {\"line_number\": 14, \"line_content\": \"    taobao_name = self.wait.until(EC.presence_of_element_located((By.\"}, {\"line_number\": 15, \"line_content\": \"        CSS_SELECTOR,\"}, {\"line_number\": 16, \"line_content\": \"        '.site-nav-bd > ul.site-nav-bd-l > li#J_SiteNavLogin > div.site-nav-menu-hd > div.site-nav-user > a.site-nav-login-info-nick '\"}, {\"line_number\": 17, \"line_content\": \"        )))\"}, {\"line_number\": 18, \"line_content\": \"    print(taobao_name.text)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/shengqiangzhang/examples-of-web-crawlers\", \"direct_link_to_file_line\": \"https://github.com/shengqiangzhang/examples-of-web-crawlers/blob/master/examples-of-web-crawlers/2.\\u5929\\u732b\\u5546\\u54c1\\u6570\\u636e\\u722c\\u866b(\\u5df2\\u6a21\\u62df\\u767b\\u5f55)/tmall_crawler.py#L77\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def search_toal_page(self):\"}, {\"line_number\": 2, \"line_content\": \"    good_total = self.wait.until(EC.presence_of_element_located((By.\"}, {\"line_number\": 3, \"line_content\": \"        CSS_SELECTOR, '#J_ItemList > div.product > div.product-iWrap')))\"}, {\"line_number\": 4, \"line_content\": \"    number_total = self.wait.until(EC.presence_of_element_located((By.\"}, {\"line_number\": 5, \"line_content\": \"        CSS_SELECTOR, '.ui-page > div.ui-page-wrap > b.ui-page-skip > form')))\"}, {\"line_number\": 6, \"line_content\": \"    page_total = number_total.text.replace('\\u5171', '').replace('\\u9875\\uff0c\\u5230\\u7b2c\\u9875 \\u786e\\u5b9a', ''\"}, {\"line_number\": 7, \"line_content\": \"        ).replace('\\uff0c', '')\"}, {\"line_number\": 8, \"line_content\": \"    return page_total\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/shengqiangzhang/examples-of-web-crawlers\", \"direct_link_to_file_line\": \"https://github.com/shengqiangzhang/examples-of-web-crawlers/blob/master/examples-of-web-crawlers/2.\\u5929\\u732b\\u5546\\u54c1\\u6570\\u636e\\u722c\\u866b(\\u5df2\\u6a21\\u62df\\u767b\\u5f55)/tmall_crawler.py#L90\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def next_page(self, page_number):\"}, {\"line_number\": 2, \"line_content\": \"    input = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,\"}, {\"line_number\": 3, \"line_content\": \"        '.ui-page > div.ui-page-wrap > b.ui-page-skip > form > input.ui-page-skipTo'\"}, {\"line_number\": 4, \"line_content\": \"        )))\"}, {\"line_number\": 5, \"line_content\": \"    submit = self.wait.until(EC.presence_of_element_located((By.\"}, {\"line_number\": 6, \"line_content\": \"        CSS_SELECTOR,\"}, {\"line_number\": 7, \"line_content\": \"        '.ui-page > div.ui-page-wrap > b.ui-page-skip > form > button.ui-btn-s'\"}, {\"line_number\": 8, \"line_content\": \"        )))\"}, {\"line_number\": 9, \"line_content\": \"    input.clear()\"}, {\"line_number\": 10, \"line_content\": \"    input.send_keys(page_number)\"}, {\"line_number\": 11, \"line_content\": \"    sleep(1)\"}, {\"line_number\": 12, \"line_content\": \"    submit.click()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/shengqiangzhang/examples-of-web-crawlers\", \"direct_link_to_file_line\": \"https://github.com/shengqiangzhang/examples-of-web-crawlers/blob/master/examples-of-web-crawlers/2.\\u5929\\u732b\\u5546\\u54c1\\u6570\\u636e\\u722c\\u866b(\\u5df2\\u6a21\\u62df\\u767b\\u5f55)/tmall_crawler.py#L122\", \"contents\": {\"total_lines\": 54, \"lines\": [{\"line_number\": 1, \"line_content\": \"def crawl_good_data(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.browser.get('https://list.tmall.com/search_product.htm?q=\\u7fbd\\u6bdb\\u7403')\"}, {\"line_number\": 3, \"line_content\": \"    err1 = self.browser.find_element_by_xpath(\\\"//*[@id='content']/div/div[2]\\\"\"}, {\"line_number\": 4, \"line_content\": \"        ).text\"}, {\"line_number\": 5, \"line_content\": \"    err1 = err1[:5]\"}, {\"line_number\": 6, \"line_content\": \"    if err1 == '\\u55b5~\\u6ca1\\u627e\\u5230':\"}, {\"line_number\": 7, \"line_content\": \"        print('\\u627e\\u4e0d\\u5230\\u60a8\\u8981\\u7684')\"}, {\"line_number\": 8, \"line_content\": \"        return\"}, {\"line_number\": 9, \"line_content\": \"    try:\"}, {\"line_number\": 10, \"line_content\": \"        self.browser.find_element_by_xpath(\\\"//*[@id='J_ComboRec']/div[1]\\\")\"}, {\"line_number\": 11, \"line_content\": \"        err2 = self.browser.find_element_by_xpath(\"}, {\"line_number\": 12, \"line_content\": \"            \\\"//*[@id='J_ComboRec']/div[1]\\\").text\"}, {\"line_number\": 13, \"line_content\": \"        err2 = err2[:5]\"}, {\"line_number\": 14, \"line_content\": \"        if err2 == '\\u6211\\u4eec\\u8fd8\\u4e3a\\u60a8':\"}, {\"line_number\": 15, \"line_content\": \"            print('\\u60a8\\u8981\\u67e5\\u8be2\\u7684\\u5546\\u54c1\\u4e66\\u76ee\\u592a\\u5c11\\u4e86')\"}, {\"line_number\": 16, \"line_content\": \"            return\"}, {\"line_number\": 17, \"line_content\": \"    except:\"}, {\"line_number\": 18, \"line_content\": \"        print('\\u53ef\\u4ee5\\u722c\\u53d6\\u8fd9\\u4e9b\\u4fe1\\u606f')\"}, {\"line_number\": 19, \"line_content\": \"    page_total = self.search_toal_page()\"}, {\"line_number\": 20, \"line_content\": \"    print('\\u603b\\u5171\\u9875\\u6570' + page_total)\"}, {\"line_number\": 21, \"line_content\": \"    for page in range(2, int(page_total)):\"}, {\"line_number\": 22, \"line_content\": \"        good_total = self.wait.until(EC.presence_of_element_located((By.\"}, {\"line_number\": 23, \"line_content\": \"            CSS_SELECTOR, '#J_ItemList > div.product > div.product-iWrap')))\"}, {\"line_number\": 24, \"line_content\": \"        input = self.wait.until(EC.presence_of_element_located((By.\"}, {\"line_number\": 25, \"line_content\": \"            CSS_SELECTOR,\"}, {\"line_number\": 26, \"line_content\": \"            '.ui-page > div.ui-page-wrap > b.ui-page-skip > form > input.ui-page-skipTo'\"}, {\"line_number\": 27, \"line_content\": \"            )))\"}, {\"line_number\": 28, \"line_content\": \"        now_page = input.get_attribute('value')\"}, {\"line_number\": 29, \"line_content\": \"        print('\\u5f53\\u524d\\u9875\\u6570' + now_page + ',\\u603b\\u5171\\u9875\\u6570' + page_total)\"}, {\"line_number\": 30, \"line_content\": \"        html = self.browser.page_source\"}, {\"line_number\": 31, \"line_content\": \"        doc = pq(html)\"}, {\"line_number\": 32, \"line_content\": \"        good_items = doc('#J_ItemList .product').items()\"}, {\"line_number\": 33, \"line_content\": \"        for item in good_items:\"}, {\"line_number\": 34, \"line_content\": \"            good_title = item.find('.productTitle').text().replace('\\\\n', ''\"}, {\"line_number\": 35, \"line_content\": \"                ).replace('\\\\r', '')\"}, {\"line_number\": 36, \"line_content\": \"            good_status = item.find('.productStatus').text().replace(' ', ''\"}, {\"line_number\": 37, \"line_content\": \"                ).replace('\\u7b14', '').replace('\\\\n', '').replace('\\\\r', '')\"}, {\"line_number\": 38, \"line_content\": \"            good_price = item.find('.productPrice').text().replace('\\u00a5', ''\"}, {\"line_number\": 39, \"line_content\": \"                ).replace(' ', '').replace('\\\\n', '').replace('\\\\r', '')\"}, {\"line_number\": 40, \"line_content\": \"            good_url = item.find('.productImg').attr('href')\"}, {\"line_number\": 41, \"line_content\": \"            print(good_title + '   ' + good_status + '   ' + good_price +\"}, {\"line_number\": 42, \"line_content\": \"                '   ' + good_url + '\\\\n')\"}, {\"line_number\": 43, \"line_content\": \"        self.swipe_down(2)\"}, {\"line_number\": 44, \"line_content\": \"        self.next_page(page)\"}, {\"line_number\": 45, \"line_content\": \"        WebDriverWait(self.browser, 5, 0.5).until(EC.\"}, {\"line_number\": 46, \"line_content\": \"            presence_of_element_located((By.ID, 'nc_1_n1z')))\"}, {\"line_number\": 47, \"line_content\": \"        try:\"}, {\"line_number\": 48, \"line_content\": \"            swipe_button = self.browser.find_element_by_id('nc_1_n1z')\"}, {\"line_number\": 49, \"line_content\": \"            action = ActionChains(self.browser)\"}, {\"line_number\": 50, \"line_content\": \"            action.click_and_hold(swipe_button).perform()\"}, {\"line_number\": 51, \"line_content\": \"            action.reset_actions()\"}, {\"line_number\": 52, \"line_content\": \"            action.move_by_offset(580, 0).perform()\"}, {\"line_number\": 53, \"line_content\": \"        except Exception as e:\"}, {\"line_number\": 54, \"line_content\": \"            print('get button failed: ', e)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chubin/wttr.in\", \"direct_link_to_file_line\": \"https://github.com/chubin/wttr.in/blob/master/wttr.in/lib/airports.py#L5\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def load_aiports_index():\"}, {\"line_number\": 2, \"line_content\": \"    file_ = open(AIRPORTS_DAT_FILE, 'r')\"}, {\"line_number\": 3, \"line_content\": \"    reader = csv.reader(file_)\"}, {\"line_number\": 4, \"line_content\": \"    airport_index = {}\"}, {\"line_number\": 5, \"line_content\": \"    for line in reader:\"}, {\"line_number\": 6, \"line_content\": \"        airport_index[line[4]] = line\"}, {\"line_number\": 7, \"line_content\": \"    return airport_index\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chubin/wttr.in\", \"direct_link_to_file_line\": \"https://github.com/chubin/wttr.in/blob/master/wttr.in/lib/airports.py#L17\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_airport_gps_location(iata_code):\"}, {\"line_number\": 2, \"line_content\": \"    if iata_code in AIRPORTS_INDEX:\"}, {\"line_number\": 3, \"line_content\": \"        airport = AIRPORTS_INDEX[iata_code]\"}, {\"line_number\": 4, \"line_content\": \"        return '%s,%s airport' % (airport[6], airport[7])\"}, {\"line_number\": 5, \"line_content\": \"    return None\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chubin/wttr.in\", \"direct_link_to_file_line\": \"https://github.com/chubin/wttr.in/blob/master/wttr.in/lib/globals.py#L100\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def error(text):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"log error `text` and raise a RuntimeError exception\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    if not text.startswith('Too many queries'):\"}, {\"line_number\": 4, \"line_content\": \"        print(text)\"}, {\"line_number\": 5, \"line_content\": \"    logging.error('ERROR %s', text)\"}, {\"line_number\": 6, \"line_content\": \"    raise RuntimeError(text)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chubin/wttr.in\", \"direct_link_to_file_line\": \"https://github.com/chubin/wttr.in/blob/master/wttr.in/lib/globals.py#L108\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def log(text):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"log error `text` and do not raise any exceptions\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    if not text.startswith('Too many queries'):\"}, {\"line_number\": 4, \"line_content\": \"        print(text)\"}, {\"line_number\": 5, \"line_content\": \"        logging.info(text)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chubin/wttr.in\", \"direct_link_to_file_line\": \"https://github.com/chubin/wttr.in/blob/master/wttr.in/lib/globals.py#L115\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def debug_log(text):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Write `text` to the debug log\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    with open('/tmp/wttr.in-debug.log', 'a') as f_debug:\"}, {\"line_number\": 6, \"line_content\": \"        f_debug.write(text + '\\\\n')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/yunjey/pytorch-tutorial\", \"direct_link_to_file_line\": \"https://github.com/yunjey/pytorch-tutorial/blob/master/pytorch-tutorial/tutorials/03-advanced/image_captioning/model.py#L8\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, embed_size):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Load the pretrained ResNet-152 and replace top fc layer.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    super(EncoderCNN, self).__init__()\"}, {\"line_number\": 4, \"line_content\": \"    resnet = models.resnet152(pretrained=True)\"}, {\"line_number\": 5, \"line_content\": \"    modules = list(resnet.children())[:-1]\"}, {\"line_number\": 6, \"line_content\": \"    self.resnet = nn.Sequential(*modules)\"}, {\"line_number\": 7, \"line_content\": \"    self.linear = nn.Linear(resnet.fc.in_features, embed_size)\"}, {\"line_number\": 8, \"line_content\": \"    self.bn = nn.BatchNorm1d(embed_size, momentum=0.01)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/yunjey/pytorch-tutorial\", \"direct_link_to_file_line\": \"https://github.com/yunjey/pytorch-tutorial/blob/master/pytorch-tutorial/tutorials/03-advanced/image_captioning/model.py#L17\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def forward(self, images):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Extract feature vectors from input images.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    with torch.no_grad():\"}, {\"line_number\": 4, \"line_content\": \"        features = self.resnet(images)\"}, {\"line_number\": 5, \"line_content\": \"    features = features.reshape(features.size(0), -1)\"}, {\"line_number\": 6, \"line_content\": \"    features = self.bn(self.linear(features))\"}, {\"line_number\": 7, \"line_content\": \"    return features\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/yunjey/pytorch-tutorial\", \"direct_link_to_file_line\": \"https://github.com/yunjey/pytorch-tutorial/blob/master/pytorch-tutorial/tutorials/03-advanced/image_captioning/model.py#L35\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def forward(self, features, captions, lengths):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Decode image feature vectors and generates captions.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    embeddings = self.embed(captions)\"}, {\"line_number\": 4, \"line_content\": \"    embeddings = torch.cat((features.unsqueeze(1), embeddings), 1)\"}, {\"line_number\": 5, \"line_content\": \"    packed = pack_padded_sequence(embeddings, lengths, batch_first=True)\"}, {\"line_number\": 6, \"line_content\": \"    hiddens, _ = self.lstm(packed)\"}, {\"line_number\": 7, \"line_content\": \"    outputs = self.linear(hiddens[0])\"}, {\"line_number\": 8, \"line_content\": \"    return outputs\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/yunjey/pytorch-tutorial\", \"direct_link_to_file_line\": \"https://github.com/yunjey/pytorch-tutorial/blob/master/pytorch-tutorial/tutorials/03-advanced/image_captioning/model.py#L44\", \"contents\": {\"total_lines\": 13, \"lines\": [{\"line_number\": 1, \"line_content\": \"def sample(self, features, states=None):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Generate captions for given image features using greedy search.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    sampled_ids = []\"}, {\"line_number\": 4, \"line_content\": \"    inputs = features.unsqueeze(1)\"}, {\"line_number\": 5, \"line_content\": \"    for i in range(self.max_seg_length):\"}, {\"line_number\": 6, \"line_content\": \"        hiddens, states = self.lstm(inputs, states)\"}, {\"line_number\": 7, \"line_content\": \"        outputs = self.linear(hiddens.squeeze(1))\"}, {\"line_number\": 8, \"line_content\": \"        _, predicted = outputs.max(1)\"}, {\"line_number\": 9, \"line_content\": \"        sampled_ids.append(predicted)\"}, {\"line_number\": 10, \"line_content\": \"        inputs = self.embed(predicted)\"}, {\"line_number\": 11, \"line_content\": \"        inputs = inputs.unsqueeze(1)\"}, {\"line_number\": 12, \"line_content\": \"    sampled_ids = torch.stack(sampled_ids, 1)\"}, {\"line_number\": 13, \"line_content\": \"    return sampled_ids\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/yunjey/pytorch-tutorial\", \"direct_link_to_file_line\": \"https://github.com/yunjey/pytorch-tutorial/blob/master/pytorch-tutorial/tutorials/03-advanced/image_captioning/data_loader.py#L56\", \"contents\": {\"total_lines\": 23, \"lines\": [{\"line_number\": 1, \"line_content\": \"def collate_fn(data):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Creates mini-batch tensors from the list of tuples (image, caption).\"}, {\"line_number\": 3, \"line_content\": \"    \"}, {\"line_number\": 4, \"line_content\": \"    We should build custom collate_fn rather than using default collate_fn, \"}, {\"line_number\": 5, \"line_content\": \"    because merging caption (including padding) is not supported in default.\"}, {\"line_number\": 6, \"line_content\": \"    Args:\"}, {\"line_number\": 7, \"line_content\": \"        data: list of tuple (image, caption). \"}, {\"line_number\": 8, \"line_content\": \"            - image: torch tensor of shape (3, 256, 256).\"}, {\"line_number\": 9, \"line_content\": \"            - caption: torch tensor of shape (?); variable length.\"}, {\"line_number\": 10, \"line_content\": \"    Returns:\"}, {\"line_number\": 11, \"line_content\": \"        images: torch tensor of shape (batch_size, 3, 256, 256).\"}, {\"line_number\": 12, \"line_content\": \"        targets: torch tensor of shape (batch_size, padded_length).\"}, {\"line_number\": 13, \"line_content\": \"        lengths: list; valid length for each padded caption.\"}, {\"line_number\": 14, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 15, \"line_content\": \"    data.sort(key=lambda x: len(x[1]), reverse=True)\"}, {\"line_number\": 16, \"line_content\": \"    images, captions = zip(*data)\"}, {\"line_number\": 17, \"line_content\": \"    images = torch.stack(images, 0)\"}, {\"line_number\": 18, \"line_content\": \"    lengths = [len(cap) for cap in captions]\"}, {\"line_number\": 19, \"line_content\": \"    targets = torch.zeros(len(captions), max(lengths)).long()\"}, {\"line_number\": 20, \"line_content\": \"    for i, cap in enumerate(captions):\"}, {\"line_number\": 21, \"line_content\": \"        end = lengths[i]\"}, {\"line_number\": 22, \"line_content\": \"        targets[(i), :end] = cap[:end]\"}, {\"line_number\": 23, \"line_content\": \"    return images, targets, lengths\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/jhao104/proxy_pool\", \"direct_link_to_file_line\": \"https://github.com/jhao104/proxy_pool/blob/master/proxy_pool/proxyPool.py#L24\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"@click.group(context_settings=CONTEXT_SETTINGS)\"}, {\"line_number\": 2, \"line_content\": \"@click.version_option(version='2.1.0')\"}, {\"line_number\": 3, \"line_content\": \"def cli():\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"ProxyPool cli\\u5de5\\u5177\\\"\\\"\\\"\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/jhao104/proxy_pool\", \"direct_link_to_file_line\": \"https://github.com/jhao104/proxy_pool/blob/master/proxy_pool/proxyPool.py#L30\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"@cli.command(name='schedule')\"}, {\"line_number\": 2, \"line_content\": \"def schedule():\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\" \\u542f\\u52a8\\u8c03\\u5ea6\\u7a0b\\u5e8f \\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    click.echo(BANNER)\"}, {\"line_number\": 5, \"line_content\": \"    runScheduler()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/jhao104/proxy_pool\", \"direct_link_to_file_line\": \"https://github.com/jhao104/proxy_pool/blob/master/proxy_pool/proxyPool.py#L37\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"@cli.command(name='server')\"}, {\"line_number\": 2, \"line_content\": \"def server():\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\" \\u542f\\u52a8api\\u670d\\u52a1 \\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    click.echo(BANNER)\"}, {\"line_number\": 5, \"line_content\": \"    runFlask()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/jhao104/proxy_pool\", \"direct_link_to_file_line\": \"https://github.com/jhao104/proxy_pool/blob/master/proxy_pool/fetcher/proxyFetcher.py#L26\", \"contents\": {\"total_lines\": 27, \"lines\": [{\"line_number\": 1, \"line_content\": \"@staticmethod\"}, {\"line_number\": 2, \"line_content\": \"def freeProxy01():\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"        \\u65e0\\u5fe7\\u4ee3\\u7406 http://www.data5u.com/\"}, {\"line_number\": 5, \"line_content\": \"        \\u51e0\\u4e4e\\u6ca1\\u6709\\u80fd\\u7528\\u7684\"}, {\"line_number\": 6, \"line_content\": \"        :return:\"}, {\"line_number\": 7, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 8, \"line_content\": \"    url_list = ['http://www.data5u.com/',\"}, {\"line_number\": 9, \"line_content\": \"        'http://www.data5u.com/free/gngn/index.shtml',\"}, {\"line_number\": 10, \"line_content\": \"        'http://www.data5u.com/free/gnpt/index.shtml']\"}, {\"line_number\": 11, \"line_content\": \"    key = 'ABCDEFGHIZ'\"}, {\"line_number\": 12, \"line_content\": \"    for url in url_list:\"}, {\"line_number\": 13, \"line_content\": \"        html_tree = WebRequest().get(url).tree\"}, {\"line_number\": 14, \"line_content\": \"        ul_list = html_tree.xpath('//ul[@class=\\\"l2\\\"]')\"}, {\"line_number\": 15, \"line_content\": \"        for ul in ul_list:\"}, {\"line_number\": 16, \"line_content\": \"            try:\"}, {\"line_number\": 17, \"line_content\": \"                ip = ul.xpath('./span[1]/li/text()')[0]\"}, {\"line_number\": 18, \"line_content\": \"                classnames = ul.xpath('./span[2]/li/attribute::class')[0]\"}, {\"line_number\": 19, \"line_content\": \"                classname = classnames.split(' ')[1]\"}, {\"line_number\": 20, \"line_content\": \"                port_sum = 0\"}, {\"line_number\": 21, \"line_content\": \"                for c in classname:\"}, {\"line_number\": 22, \"line_content\": \"                    port_sum *= 10\"}, {\"line_number\": 23, \"line_content\": \"                    port_sum += key.index(c)\"}, {\"line_number\": 24, \"line_content\": \"                port = port_sum >> 3\"}, {\"line_number\": 25, \"line_content\": \"                yield '{}:{}'.format(ip, port)\"}, {\"line_number\": 26, \"line_content\": \"            except Exception as e:\"}, {\"line_number\": 27, \"line_content\": \"                print(e)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/jhao104/proxy_pool\", \"direct_link_to_file_line\": \"https://github.com/jhao104/proxy_pool/blob/master/proxy_pool/fetcher/proxyFetcher.py#L26\", \"contents\": {\"total_lines\": 48, \"lines\": [{\"line_number\": 1, \"line_content\": \"@staticmethod\"}, {\"line_number\": 2, \"line_content\": \"def freeProxy02(count=20):\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"        \\u4ee3\\u740666 http://www.66ip.cn/\"}, {\"line_number\": 5, \"line_content\": \"        :param count: \\u63d0\\u53d6\\u6570\\u91cf\"}, {\"line_number\": 6, \"line_content\": \"        :return:\"}, {\"line_number\": 7, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 8, \"line_content\": \"    urls = [\"}, {\"line_number\": 9, \"line_content\": \"        'http://www.66ip.cn/mo.php?sxb=&tqsl={}&port=&export=&ktip=&sxa=&submit=%CC%E1++%C8%A1&textarea='\"}, {\"line_number\": 10, \"line_content\": \"        ,\"}, {\"line_number\": 11, \"line_content\": \"        'http://www.66ip.cn/nmtq.php?getnum={}&isp=0&anonymoustype=0&start=&ports=&export=&ipaddress=&area=0&proxytype=2&api=66ip'\"}, {\"line_number\": 12, \"line_content\": \"        ]\"}, {\"line_number\": 13, \"line_content\": \"    try:\"}, {\"line_number\": 14, \"line_content\": \"        import execjs\"}, {\"line_number\": 15, \"line_content\": \"        import requests\"}, {\"line_number\": 16, \"line_content\": \"        headers = {'User-Agent':\"}, {\"line_number\": 17, \"line_content\": \"            'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0'\"}, {\"line_number\": 18, \"line_content\": \"            , 'Accept': '*/*', 'Connection': 'keep-alive',\"}, {\"line_number\": 19, \"line_content\": \"            'Accept-Language': 'zh-CN,zh;q=0.8'}\"}, {\"line_number\": 20, \"line_content\": \"        session = requests.session()\"}, {\"line_number\": 21, \"line_content\": \"        src = session.get('http://www.66ip.cn/', headers=headers).text\"}, {\"line_number\": 22, \"line_content\": \"        src = src.split('</script>')[0] + '}'\"}, {\"line_number\": 23, \"line_content\": \"        src = src.replace('<script>', 'function test() {')\"}, {\"line_number\": 24, \"line_content\": \"        src = src.replace('while(z++)try{eval(',\"}, {\"line_number\": 25, \"line_content\": \"            ';var num=10;while(z++)try{var tmp=')\"}, {\"line_number\": 26, \"line_content\": \"        src = src.replace(');break}',\"}, {\"line_number\": 27, \"line_content\": \"            \\\";num--;if(tmp.search('cookie') != -1 | num<0){return tmp}}\\\")\"}, {\"line_number\": 28, \"line_content\": \"        ctx = execjs.compile(src)\"}, {\"line_number\": 29, \"line_content\": \"        src = ctx.call('test')\"}, {\"line_number\": 30, \"line_content\": \"        src = src[src.find('document.cookie='):src.find('};if((')]\"}, {\"line_number\": 31, \"line_content\": \"        src = src.replace('document.cookie=', '')\"}, {\"line_number\": 32, \"line_content\": \"        src = 'function test() {var window={}; return %s }' % src\"}, {\"line_number\": 33, \"line_content\": \"        cookie = execjs.compile(src).call('test')\"}, {\"line_number\": 34, \"line_content\": \"        js_cookie = cookie.split(';')[0].split('=')[-1]\"}, {\"line_number\": 35, \"line_content\": \"    except Exception as e:\"}, {\"line_number\": 36, \"line_content\": \"        print(e)\"}, {\"line_number\": 37, \"line_content\": \"        return\"}, {\"line_number\": 38, \"line_content\": \"    for url in urls:\"}, {\"line_number\": 39, \"line_content\": \"        try:\"}, {\"line_number\": 40, \"line_content\": \"            html = session.get(url.format(count), cookies={\"}, {\"line_number\": 41, \"line_content\": \"                '__jsl_clearance': js_cookie}, headers=headers).text\"}, {\"line_number\": 42, \"line_content\": \"            ips = re.findall(\"}, {\"line_number\": 43, \"line_content\": \"                '\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}:\\\\\\\\d{1,5}', html)\"}, {\"line_number\": 44, \"line_content\": \"            for ip in ips:\"}, {\"line_number\": 45, \"line_content\": \"                yield ip.strip()\"}, {\"line_number\": 46, \"line_content\": \"        except Exception as e:\"}, {\"line_number\": 47, \"line_content\": \"            print(e)\"}, {\"line_number\": 48, \"line_content\": \"            pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kubernetes-sigs/kubespray\", \"direct_link_to_file_line\": \"https://github.com/kubernetes-sigs/kubespray/blob/master/kubespray/scripts/download_hash.py#L15\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def open_main_yaml():\"}, {\"line_number\": 2, \"line_content\": \"    yaml = YAML()\"}, {\"line_number\": 3, \"line_content\": \"    yaml.explicit_start = True\"}, {\"line_number\": 4, \"line_content\": \"    yaml.preserve_quotes = True\"}, {\"line_number\": 5, \"line_content\": \"    yaml.width = 4096\"}, {\"line_number\": 6, \"line_content\": \"    with open(MAIN_YML, 'r') as main_yml:\"}, {\"line_number\": 7, \"line_content\": \"        data = yaml.load(main_yml)\"}, {\"line_number\": 8, \"line_content\": \"    return data, yaml\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kubernetes-sigs/kubespray\", \"direct_link_to_file_line\": \"https://github.com/kubernetes-sigs/kubespray/blob/master/kubespray/scripts/download_hash.py#L27\", \"contents\": {\"total_lines\": 20, \"lines\": [{\"line_number\": 1, \"line_content\": \"def download_hash(versions):\"}, {\"line_number\": 2, \"line_content\": \"    architectures = ['arm', 'arm64', 'amd64']\"}, {\"line_number\": 3, \"line_content\": \"    downloads = ['kubelet', 'kubectl', 'kubeadm']\"}, {\"line_number\": 4, \"line_content\": \"    data, yaml = open_main_yaml()\"}, {\"line_number\": 5, \"line_content\": \"    for download in downloads:\"}, {\"line_number\": 6, \"line_content\": \"        checksum_name = f'{download}_checksums'\"}, {\"line_number\": 7, \"line_content\": \"        for arch in architectures:\"}, {\"line_number\": 8, \"line_content\": \"            for version in versions:\"}, {\"line_number\": 9, \"line_content\": \"                if not version.startswith('v'):\"}, {\"line_number\": 10, \"line_content\": \"                    version = f'v{version}'\"}, {\"line_number\": 11, \"line_content\": \"                url = (\"}, {\"line_number\": 12, \"line_content\": \"                    f'https://storage.googleapis.com/kubernetes-release/release/{version}/bin/linux/{arch}/{download}'\"}, {\"line_number\": 13, \"line_content\": \"                    )\"}, {\"line_number\": 14, \"line_content\": \"                download_file = requests.get(url, allow_redirects=True)\"}, {\"line_number\": 15, \"line_content\": \"                download_file.raise_for_status()\"}, {\"line_number\": 16, \"line_content\": \"                sha256sum = hashlib.sha256(download_file.content).hexdigest()\"}, {\"line_number\": 17, \"line_content\": \"                data[checksum_name][arch][version] = sha256sum\"}, {\"line_number\": 18, \"line_content\": \"    with open(MAIN_YML, 'w') as main_yml:\"}, {\"line_number\": 19, \"line_content\": \"        yaml.dump(data, main_yml)\"}, {\"line_number\": 20, \"line_content\": \"        print(f'\\\\n\\\\nUpdated {MAIN_YML}\\\\n')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kubernetes-sigs/kubespray\", \"direct_link_to_file_line\": \"https://github.com/kubernetes-sigs/kubespray/blob/master/kubespray/scripts/download_hash.py#L50\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def usage():\"}, {\"line_number\": 2, \"line_content\": \"    print(\"}, {\"line_number\": 3, \"line_content\": \"        f\\\"\\\"\\\"USAGE:\"}, {\"line_number\": 4, \"line_content\": \"    {sys.argv[0]} [k8s_version1] [[k8s_version2]....[k8s_versionN]]\\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"        )\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kubernetes-sigs/kubespray\", \"direct_link_to_file_line\": \"https://github.com/kubernetes-sigs/kubespray/blob/master/kubespray/scripts/download_hash.py#L54\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main(argv=None):\"}, {\"line_number\": 2, \"line_content\": \"    if not argv:\"}, {\"line_number\": 3, \"line_content\": \"        argv = sys.argv[1:]\"}, {\"line_number\": 4, \"line_content\": \"    if not argv:\"}, {\"line_number\": 5, \"line_content\": \"        usage()\"}, {\"line_number\": 6, \"line_content\": \"        sys.exit(1)\"}, {\"line_number\": 7, \"line_content\": \"    download_hash(argv)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kubernetes-sigs/kubespray\", \"direct_link_to_file_line\": \"https://github.com/kubernetes-sigs/kubespray/blob/master/kubespray/scripts/openstack-cleanup/main.py#L28\", \"contents\": {\"total_lines\": 18, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    if args.dry_run:\"}, {\"line_number\": 3, \"line_content\": \"        print('Running in dry-run mode')\"}, {\"line_number\": 4, \"line_content\": \"    else:\"}, {\"line_number\": 5, \"line_content\": \"        print('This will delete resources... (ctrl+c to cancel)')\"}, {\"line_number\": 6, \"line_content\": \"        time.sleep(PAUSE_SECONDS)\"}, {\"line_number\": 7, \"line_content\": \"    conn = openstack.connect()\"}, {\"line_number\": 8, \"line_content\": \"    print('Security groups...')\"}, {\"line_number\": 9, \"line_content\": \"    map_if_old(conn.network.delete_security_group, conn.network.\"}, {\"line_number\": 10, \"line_content\": \"        security_groups())\"}, {\"line_number\": 11, \"line_content\": \"    print('Servers...')\"}, {\"line_number\": 12, \"line_content\": \"    map_if_old(conn.compute.delete_server, conn.compute.servers())\"}, {\"line_number\": 13, \"line_content\": \"    print('Subnets...')\"}, {\"line_number\": 14, \"line_content\": \"    map_if_old(conn.network.delete_subnet, conn.network.subnets())\"}, {\"line_number\": 15, \"line_content\": \"    print('Networks...')\"}, {\"line_number\": 16, \"line_content\": \"    for n in conn.network.networks():\"}, {\"line_number\": 17, \"line_content\": \"        if not n.is_router_external:\"}, {\"line_number\": 18, \"line_content\": \"            fn_if_old(conn.network.delete_network, n)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/idank/explainshell\", \"direct_link_to_file_line\": \"https://github.com/idank/explainshell/blob/master/explainshell/explainshell/options.py#L9\", \"contents\": {\"total_lines\": 14, \"lines\": [{\"line_number\": 1, \"line_content\": \"def extract(manpage):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"extract options from all paragraphs that have been classified as containing\"}, {\"line_number\": 3, \"line_content\": \"    options\\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    for i, p in enumerate(manpage.paragraphs):\"}, {\"line_number\": 5, \"line_content\": \"        if p.is_option:\"}, {\"line_number\": 6, \"line_content\": \"            s, l = extract_option(p.cleantext())\"}, {\"line_number\": 7, \"line_content\": \"            if s or l:\"}, {\"line_number\": 8, \"line_content\": \"                expectsarg = any(x.expectsarg for x in s + l)\"}, {\"line_number\": 9, \"line_content\": \"                s = [x.flag for x in s]\"}, {\"line_number\": 10, \"line_content\": \"                l = [x.flag for x in l]\"}, {\"line_number\": 11, \"line_content\": \"                manpage.paragraphs[i] = store.option(p, s, l, expectsarg)\"}, {\"line_number\": 12, \"line_content\": \"            else:\"}, {\"line_number\": 13, \"line_content\": \"                logger.error('no options could be extracted from paragraph %r',\"}, {\"line_number\": 14, \"line_content\": \"                    p)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/idank/explainshell\", \"direct_link_to_file_line\": \"https://github.com/idank/explainshell/blob/master/explainshell/explainshell/options.py#L52\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _flag(s, pos=0):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    >>> _flag('a=b').groupdict()\"}, {\"line_number\": 4, \"line_content\": \"    {'opt': 'a', 'arg': 'b'}\"}, {\"line_number\": 5, \"line_content\": \"    >>> bool(_flag('---c-d'))\"}, {\"line_number\": 6, \"line_content\": \"    False\"}, {\"line_number\": 7, \"line_content\": \"    >>> bool(_flag('foobar'))\"}, {\"line_number\": 8, \"line_content\": \"    False\"}, {\"line_number\": 9, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 10, \"line_content\": \"    m = opt2_regex.match(s, pos)\"}, {\"line_number\": 11, \"line_content\": \"    return m\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/idank/explainshell\", \"direct_link_to_file_line\": \"https://github.com/idank/explainshell/blob/master/explainshell/explainshell/options.py#L64\", \"contents\": {\"total_lines\": 45, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _option(s, pos=0):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    >>> bool(_option('-'))\"}, {\"line_number\": 4, \"line_content\": \"    False\"}, {\"line_number\": 5, \"line_content\": \"    >>> bool(_option('--'))\"}, {\"line_number\": 6, \"line_content\": \"    False\"}, {\"line_number\": 7, \"line_content\": \"    >>> bool(_option('---'))\"}, {\"line_number\": 8, \"line_content\": \"    False\"}, {\"line_number\": 9, \"line_content\": \"    >>> bool(_option('-a-'))\"}, {\"line_number\": 10, \"line_content\": \"    False\"}, {\"line_number\": 11, \"line_content\": \"    >>> bool(_option('--a-'))\"}, {\"line_number\": 12, \"line_content\": \"    False\"}, {\"line_number\": 13, \"line_content\": \"    >>> bool(_option('--a-b-'))\"}, {\"line_number\": 14, \"line_content\": \"    False\"}, {\"line_number\": 15, \"line_content\": \"    >>> sorted(_option('-a').groupdict().iteritems())\"}, {\"line_number\": 16, \"line_content\": \"    [('arg', None), ('argoptional', None), ('argoptionalc', None), ('ending', ''), ('opt', '-a')]\"}, {\"line_number\": 17, \"line_content\": \"    >>> sorted(_option('--a').groupdict().iteritems())\"}, {\"line_number\": 18, \"line_content\": \"    [('arg', None), ('argoptional', None), ('argoptionalc', None), ('ending', ''), ('opt', '--a')]\"}, {\"line_number\": 19, \"line_content\": \"    >>> sorted(_option('-a<b>').groupdict().iteritems())\"}, {\"line_number\": 20, \"line_content\": \"    [('arg', 'b'), ('argoptional', '<'), ('argoptionalc', '>'), ('ending', ''), ('opt', '-a')]\"}, {\"line_number\": 21, \"line_content\": \"    >>> sorted(_option('-a=[foo]').groupdict().iteritems())\"}, {\"line_number\": 22, \"line_content\": \"    [('arg', 'foo'), ('argoptional', '['), ('argoptionalc', ']'), ('ending', ''), ('opt', '-a')]\"}, {\"line_number\": 23, \"line_content\": \"    >>> sorted(_option('-a=<foo>').groupdict().iteritems())\"}, {\"line_number\": 24, \"line_content\": \"    [('arg', 'foo'), ('argoptional', '<'), ('argoptionalc', '>'), ('ending', ''), ('opt', '-a')]\"}, {\"line_number\": 25, \"line_content\": \"    >>> sorted(_option('-a=<foo bar>').groupdict().iteritems())\"}, {\"line_number\": 26, \"line_content\": \"    [('arg', 'foo bar'), ('argoptional', '<'), ('argoptionalc', '>'), ('ending', ''), ('opt', '-a')]\"}, {\"line_number\": 27, \"line_content\": \"    >>> sorted(_option('-a=foo').groupdict().iteritems())\"}, {\"line_number\": 28, \"line_content\": \"    [('arg', 'foo'), ('argoptional', None), ('argoptionalc', None), ('ending', ''), ('opt', '-a')]\"}, {\"line_number\": 29, \"line_content\": \"    >>> bool(_option('-a=[foo>'))\"}, {\"line_number\": 30, \"line_content\": \"    False\"}, {\"line_number\": 31, \"line_content\": \"    >>> bool(_option('-a=[foo bar'))\"}, {\"line_number\": 32, \"line_content\": \"    False\"}, {\"line_number\": 33, \"line_content\": \"    >>> _option('-a foo').end(0)\"}, {\"line_number\": 34, \"line_content\": \"    3\"}, {\"line_number\": 35, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 36, \"line_content\": \"    m = opt_regex.match(s, pos)\"}, {\"line_number\": 37, \"line_content\": \"    if m:\"}, {\"line_number\": 38, \"line_content\": \"        if m.group('argoptional'):\"}, {\"line_number\": 39, \"line_content\": \"            c = m.group('argoptional')\"}, {\"line_number\": 40, \"line_content\": \"            cc = m.group('argoptionalc')\"}, {\"line_number\": 41, \"line_content\": \"            if c == '[' and cc == ']' or c == '<' and cc == '>':\"}, {\"line_number\": 42, \"line_content\": \"                return m\"}, {\"line_number\": 43, \"line_content\": \"            else:\"}, {\"line_number\": 44, \"line_content\": \"                return\"}, {\"line_number\": 45, \"line_content\": \"    return m\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/idank/explainshell\", \"direct_link_to_file_line\": \"https://github.com/idank/explainshell/blob/master/explainshell/explainshell/options.py#L112\", \"contents\": {\"total_lines\": 15, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _eatbetween(s, pos):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    >>> _eatbetween('foo', 0)\"}, {\"line_number\": 4, \"line_content\": \"    0\"}, {\"line_number\": 5, \"line_content\": \"    >>> _eatbetween('a, b', 1)\"}, {\"line_number\": 6, \"line_content\": \"    3\"}, {\"line_number\": 7, \"line_content\": \"    >>> _eatbetween('a|b', 1)\"}, {\"line_number\": 8, \"line_content\": \"    2\"}, {\"line_number\": 9, \"line_content\": \"    >>> _eatbetween('a or b', 1)\"}, {\"line_number\": 10, \"line_content\": \"    5\"}, {\"line_number\": 11, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 12, \"line_content\": \"    m = _eatbetweenregex.match(s, pos)\"}, {\"line_number\": 13, \"line_content\": \"    if m:\"}, {\"line_number\": 14, \"line_content\": \"        return m.end(0)\"}, {\"line_number\": 15, \"line_content\": \"    return pos\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/idank/explainshell\", \"direct_link_to_file_line\": \"https://github.com/idank/explainshell/blob/master/explainshell/explainshell/options.py#L138\", \"contents\": {\"total_lines\": 40, \"lines\": [{\"line_number\": 1, \"line_content\": \"def extract_option(txt):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"this is where the magic is (suppose) to happen. try and find options\"}, {\"line_number\": 3, \"line_content\": \"    using a regex\\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    startpos = currpos = len(txt) - len(txt.lstrip())\"}, {\"line_number\": 5, \"line_content\": \"    short, long = [], []\"}, {\"line_number\": 6, \"line_content\": \"    m = _option(txt, currpos)\"}, {\"line_number\": 7, \"line_content\": \"    while m:\"}, {\"line_number\": 8, \"line_content\": \"        s = m.group('opt')\"}, {\"line_number\": 9, \"line_content\": \"        po = extractedoption(s, m.group('arg'))\"}, {\"line_number\": 10, \"line_content\": \"        if s.startswith('--'):\"}, {\"line_number\": 11, \"line_content\": \"            long.append(po)\"}, {\"line_number\": 12, \"line_content\": \"        else:\"}, {\"line_number\": 13, \"line_content\": \"            short.append(po)\"}, {\"line_number\": 14, \"line_content\": \"        currpos = m.end(0)\"}, {\"line_number\": 15, \"line_content\": \"        currpos = _eatbetween(txt, currpos)\"}, {\"line_number\": 16, \"line_content\": \"        if m.group('ending') == '|':\"}, {\"line_number\": 17, \"line_content\": \"            m = _option(txt, currpos)\"}, {\"line_number\": 18, \"line_content\": \"            if not m:\"}, {\"line_number\": 19, \"line_content\": \"                startpos = currpos\"}, {\"line_number\": 20, \"line_content\": \"                while currpos < len(txt) and not txt[currpos].isspace():\"}, {\"line_number\": 21, \"line_content\": \"                    if txt[currpos] == '|':\"}, {\"line_number\": 22, \"line_content\": \"                        short.append(extractedoption(txt[startpos:currpos],\"}, {\"line_number\": 23, \"line_content\": \"                            None))\"}, {\"line_number\": 24, \"line_content\": \"                        startpos = currpos\"}, {\"line_number\": 25, \"line_content\": \"                    currpos += 1\"}, {\"line_number\": 26, \"line_content\": \"                leftover = txt[startpos:currpos]\"}, {\"line_number\": 27, \"line_content\": \"                if leftover:\"}, {\"line_number\": 28, \"line_content\": \"                    short.append(extractedoption(leftover, None))\"}, {\"line_number\": 29, \"line_content\": \"        else:\"}, {\"line_number\": 30, \"line_content\": \"            m = _option(txt, currpos)\"}, {\"line_number\": 31, \"line_content\": \"    if currpos == startpos:\"}, {\"line_number\": 32, \"line_content\": \"        m = _flag(txt, currpos)\"}, {\"line_number\": 33, \"line_content\": \"        while m:\"}, {\"line_number\": 34, \"line_content\": \"            s = m.group('opt')\"}, {\"line_number\": 35, \"line_content\": \"            po = extractedoption(s, m.group('arg'))\"}, {\"line_number\": 36, \"line_content\": \"            long.append(po)\"}, {\"line_number\": 37, \"line_content\": \"            currpos = m.end(0)\"}, {\"line_number\": 38, \"line_content\": \"            currpos = _eatbetween(txt, currpos)\"}, {\"line_number\": 39, \"line_content\": \"            m = _flag(txt, currpos)\"}, {\"line_number\": 40, \"line_content\": \"    return short, long\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/gto76/python-cheatsheet\", \"direct_link_to_file_line\": \"https://github.com/gto76/python-cheatsheet/blob/master/python-cheatsheet/web/convert_table.py#L3\", \"contents\": {\"total_lines\": 28, \"lines\": [{\"line_number\": 1, \"line_content\": \"def convert_table(lines):\"}, {\"line_number\": 2, \"line_content\": \"    def from_ascii():\"}, {\"line_number\": 3, \"line_content\": \"        out = []\"}, {\"line_number\": 4, \"line_content\": \"        first, header, third, *body, last = lines\"}, {\"line_number\": 5, \"line_content\": \"        first = first.translate(str.maketrans({'-': '\\u2501', '+': '\\u252f'}))\"}, {\"line_number\": 6, \"line_content\": \"        out.append(f'\\u250f{first[1:-1]}\\u2513')\"}, {\"line_number\": 7, \"line_content\": \"        header = header.translate(str.maketrans({'|': '\\u2502'}))\"}, {\"line_number\": 8, \"line_content\": \"        out.append(f'\\u2503{header[1:-1]}\\u2503')\"}, {\"line_number\": 9, \"line_content\": \"        third = third.translate(str.maketrans({'-': '\\u2500', '+': '\\u253c'}))\"}, {\"line_number\": 10, \"line_content\": \"        out.append(f'\\u2520{third[1:-1]}\\u2528')\"}, {\"line_number\": 11, \"line_content\": \"        for line in body:\"}, {\"line_number\": 12, \"line_content\": \"            line = line.translate(str.maketrans({'|': '\\u2502'}))\"}, {\"line_number\": 13, \"line_content\": \"            line = line.replace('yes', ' \\u2713 ')\"}, {\"line_number\": 14, \"line_content\": \"            out.append(f'\\u2503{line[1:-1]}\\u2503')\"}, {\"line_number\": 15, \"line_content\": \"        last = last.translate(str.maketrans({'-': '\\u2501', '+': '\\u2537'}))\"}, {\"line_number\": 16, \"line_content\": \"        out.append(f'\\u2517{last[1:-1]}\\u251b')\"}, {\"line_number\": 17, \"line_content\": \"        return '\\\\n'.join(out)\"}, {\"line_number\": 18, \"line_content\": \"    def from_unicode():\"}, {\"line_number\": 19, \"line_content\": \"        out = []\"}, {\"line_number\": 20, \"line_content\": \"        for line in lines:\"}, {\"line_number\": 21, \"line_content\": \"            line = line.translate(str.maketrans('\\u250f\\u2513\\u2517\\u251b\\u2520\\u253c\\u2528\\u252f\\u2537\\u2501\\u2500\\u2503\\u2502',\"}, {\"line_number\": 22, \"line_content\": \"                '+++++++++--||'))\"}, {\"line_number\": 23, \"line_content\": \"            line = line.replace(' \\u2713 ', 'yes')\"}, {\"line_number\": 24, \"line_content\": \"            out.append(line)\"}, {\"line_number\": 25, \"line_content\": \"        return '\\\\n'.join(out)\"}, {\"line_number\": 26, \"line_content\": \"    if lines[0][0] == '+':\"}, {\"line_number\": 27, \"line_content\": \"        return from_ascii()\"}, {\"line_number\": 28, \"line_content\": \"    return from_unicode()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/gto76/python-cheatsheet\", \"direct_link_to_file_line\": \"https://github.com/gto76/python-cheatsheet/blob/master/python-cheatsheet/web/convert_table.py#L4\", \"contents\": {\"total_lines\": 16, \"lines\": [{\"line_number\": 1, \"line_content\": \"def from_ascii():\"}, {\"line_number\": 2, \"line_content\": \"    out = []\"}, {\"line_number\": 3, \"line_content\": \"    first, header, third, *body, last = lines\"}, {\"line_number\": 4, \"line_content\": \"    first = first.translate(str.maketrans({'-': '\\u2501', '+': '\\u252f'}))\"}, {\"line_number\": 5, \"line_content\": \"    out.append(f'\\u250f{first[1:-1]}\\u2513')\"}, {\"line_number\": 6, \"line_content\": \"    header = header.translate(str.maketrans({'|': '\\u2502'}))\"}, {\"line_number\": 7, \"line_content\": \"    out.append(f'\\u2503{header[1:-1]}\\u2503')\"}, {\"line_number\": 8, \"line_content\": \"    third = third.translate(str.maketrans({'-': '\\u2500', '+': '\\u253c'}))\"}, {\"line_number\": 9, \"line_content\": \"    out.append(f'\\u2520{third[1:-1]}\\u2528')\"}, {\"line_number\": 10, \"line_content\": \"    for line in body:\"}, {\"line_number\": 11, \"line_content\": \"        line = line.translate(str.maketrans({'|': '\\u2502'}))\"}, {\"line_number\": 12, \"line_content\": \"        line = line.replace('yes', ' \\u2713 ')\"}, {\"line_number\": 13, \"line_content\": \"        out.append(f'\\u2503{line[1:-1]}\\u2503')\"}, {\"line_number\": 14, \"line_content\": \"    last = last.translate(str.maketrans({'-': '\\u2501', '+': '\\u2537'}))\"}, {\"line_number\": 15, \"line_content\": \"    out.append(f'\\u2517{last[1:-1]}\\u251b')\"}, {\"line_number\": 16, \"line_content\": \"    return '\\\\n'.join(out)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/gto76/python-cheatsheet\", \"direct_link_to_file_line\": \"https://github.com/gto76/python-cheatsheet/blob/master/python-cheatsheet/web/convert_table.py#L20\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def from_unicode():\"}, {\"line_number\": 2, \"line_content\": \"    out = []\"}, {\"line_number\": 3, \"line_content\": \"    for line in lines:\"}, {\"line_number\": 4, \"line_content\": \"        line = line.translate(str.maketrans('\\u250f\\u2513\\u2517\\u251b\\u2520\\u253c\\u2528\\u252f\\u2537\\u2501\\u2500\\u2503\\u2502', '+++++++++--||'))\"}, {\"line_number\": 5, \"line_content\": \"        line = line.replace(' \\u2713 ', 'yes')\"}, {\"line_number\": 6, \"line_content\": \"        out.append(line)\"}, {\"line_number\": 7, \"line_content\": \"    return '\\\\n'.join(out)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/gto76/python-cheatsheet\", \"direct_link_to_file_line\": \"https://github.com/gto76/python-cheatsheet/blob/master/python-cheatsheet/pdf/create_index.py#L15\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    html = read_file('index.html')\"}, {\"line_number\": 3, \"line_content\": \"    doc = BeautifulSoup(''.join(html), 'html.parser')\"}, {\"line_number\": 4, \"line_content\": \"    hhh = defaultdict(lambda : defaultdict(list))\"}, {\"line_number\": 5, \"line_content\": \"    for i in range(2, 5):\"}, {\"line_number\": 6, \"line_content\": \"        for h in doc.find_all(f'h{i}'):\"}, {\"line_number\": 7, \"line_content\": \"            an_id = h.attrs['id']\"}, {\"line_number\": 8, \"line_content\": \"            text = h.text.lstrip('#')\"}, {\"line_number\": 9, \"line_content\": \"            first_letter = text[0]\"}, {\"line_number\": 10, \"line_content\": \"            hhh[first_letter][text].append(an_id)\"}, {\"line_number\": 11, \"line_content\": \"    print_hhh(hhh)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/gto76/python-cheatsheet\", \"direct_link_to_file_line\": \"https://github.com/gto76/python-cheatsheet/blob/master/python-cheatsheet/pdf/create_index.py#L28\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def print_hhh(hhh):\"}, {\"line_number\": 2, \"line_content\": \"    letters = hhh.keys()\"}, {\"line_number\": 3, \"line_content\": \"    for letter in sorted(letters):\"}, {\"line_number\": 4, \"line_content\": \"        hh = hhh[letter]\"}, {\"line_number\": 5, \"line_content\": \"        print(f'### {letter}')\"}, {\"line_number\": 6, \"line_content\": \"        commands = hh.keys()\"}, {\"line_number\": 7, \"line_content\": \"        for command in sorted(commands):\"}, {\"line_number\": 8, \"line_content\": \"            links = hh[command]\"}, {\"line_number\": 9, \"line_content\": \"            lll = ', '.join(f'[1](#{l})' for l in links)\"}, {\"line_number\": 10, \"line_content\": \"            print(f'**{command} {lll}**  ')\"}, {\"line_number\": 11, \"line_content\": \"        print()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Rochester-NRT/RocAlphaGo\", \"direct_link_to_file_line\": \"https://github.com/Rochester-NRT/RocAlphaGo/blob/master/RocAlphaGo/interface/gtp_wrapper.py#L10\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run_gnugo(sgf_file_name, command):\"}, {\"line_number\": 2, \"line_content\": \"    from distutils import spawn\"}, {\"line_number\": 3, \"line_content\": \"    if spawn.find_executable('gnugo'):\"}, {\"line_number\": 4, \"line_content\": \"        from subprocess import Popen, PIPE\"}, {\"line_number\": 5, \"line_content\": \"        p = Popen(['gnugo', '--chinese-rules', '--mode', 'gtp', '-l',\"}, {\"line_number\": 6, \"line_content\": \"            sgf_file_name], stdout=PIPE, stdin=PIPE, stderr=PIPE)\"}, {\"line_number\": 7, \"line_content\": \"        out_bytes = p.communicate(input=command)[0]\"}, {\"line_number\": 8, \"line_content\": \"        return out_bytes.decode('utf-8')[2:]\"}, {\"line_number\": 9, \"line_content\": \"    else:\"}, {\"line_number\": 10, \"line_content\": \"        return ''\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Rochester-NRT/RocAlphaGo\", \"direct_link_to_file_line\": \"https://github.com/Rochester-NRT/RocAlphaGo/blob/master/RocAlphaGo/interface/gtp_wrapper.py#L146\", \"contents\": {\"total_lines\": 14, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run_gtp(player_obj, inpt_fn=None, name='Gtp Player', version='0.0'):\"}, {\"line_number\": 2, \"line_content\": \"    gtp_game = GTPGameConnector(player_obj)\"}, {\"line_number\": 3, \"line_content\": \"    gtp_engine = ExtendedGtpEngine(gtp_game, name, version)\"}, {\"line_number\": 4, \"line_content\": \"    if inpt_fn is None:\"}, {\"line_number\": 5, \"line_content\": \"        inpt_fn = input\"}, {\"line_number\": 6, \"line_content\": \"    sys.stderr.write('GTP engine ready\\\\n')\"}, {\"line_number\": 7, \"line_content\": \"    sys.stderr.flush()\"}, {\"line_number\": 8, \"line_content\": \"    while not gtp_engine.disconnect:\"}, {\"line_number\": 9, \"line_content\": \"        inpt = inpt_fn()\"}, {\"line_number\": 10, \"line_content\": \"        cmd_list = inpt.split('\\\\n')\"}, {\"line_number\": 11, \"line_content\": \"        for cmd in cmd_list:\"}, {\"line_number\": 12, \"line_content\": \"            engine_reply = gtp_engine.send(cmd)\"}, {\"line_number\": 13, \"line_content\": \"            sys.stdout.write(engine_reply)\"}, {\"line_number\": 14, \"line_content\": \"            sys.stdout.flush()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Rochester-NRT/RocAlphaGo\", \"direct_link_to_file_line\": \"https://github.com/Rochester-NRT/RocAlphaGo/blob/master/RocAlphaGo/interface/gtp_wrapper.py#L35\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def call_gnugo(self, sgf_file_name, command):\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        pool = multiprocessing.Pool(processes=1)\"}, {\"line_number\": 4, \"line_content\": \"        result = pool.apply_async(run_gnugo, (sgf_file_name, command))\"}, {\"line_number\": 5, \"line_content\": \"        output = result.get(timeout=10)\"}, {\"line_number\": 6, \"line_content\": \"        pool.close()\"}, {\"line_number\": 7, \"line_content\": \"        return output\"}, {\"line_number\": 8, \"line_content\": \"    except multiprocessing.TimeoutError:\"}, {\"line_number\": 9, \"line_content\": \"        pool.terminate()\"}, {\"line_number\": 10, \"line_content\": \"        return ''\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Rochester-NRT/RocAlphaGo\", \"direct_link_to_file_line\": \"https://github.com/Rochester-NRT/RocAlphaGo/blob/master/RocAlphaGo/interface/gtp_wrapper.py#L47\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def cmd_time_left(self, arguments):\"}, {\"line_number\": 2, \"line_content\": \"    pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Rochester-NRT/RocAlphaGo\", \"direct_link_to_file_line\": \"https://github.com/Rochester-NRT/RocAlphaGo/blob/master/RocAlphaGo/interface/gtp_wrapper.py#L50\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def cmd_place_free_handicap(self, arguments):\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        number_of_stones = int(arguments)\"}, {\"line_number\": 4, \"line_content\": \"    except Exception:\"}, {\"line_number\": 5, \"line_content\": \"        raise ValueError('Number of handicaps could not be parsed: {}'.\"}, {\"line_number\": 6, \"line_content\": \"            format(arguments))\"}, {\"line_number\": 7, \"line_content\": \"    if number_of_stones < 2 or number_of_stones > 9:\"}, {\"line_number\": 8, \"line_content\": \"        raise ValueError('Invalid number of handicap stones: {}'.format(\"}, {\"line_number\": 9, \"line_content\": \"            number_of_stones))\"}, {\"line_number\": 10, \"line_content\": \"    vertex_string = ExtendedGtpEngine.recommended_handicaps[number_of_stones]\"}, {\"line_number\": 11, \"line_content\": \"    self.cmd_set_free_handicap(vertex_string)\"}, {\"line_number\": 12, \"line_content\": \"    return vertex_string\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/clips/pattern\", \"direct_link_to_file_line\": \"https://github.com/clips/pattern/blob/master/pattern/test/test_db.py#L30\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def create_db_mysql():\"}, {\"line_number\": 2, \"line_content\": \"    global DB_MYSQL\"}, {\"line_number\": 3, \"line_content\": \"    if not DB_MYSQL or not DB_MYSQL._connection:\"}, {\"line_number\": 4, \"line_content\": \"        DB_MYSQL = db.Database(type=db.MYSQL, name='pattern_unittest_db',\"}, {\"line_number\": 5, \"line_content\": \"            host=HOST, port=PORT, username=USERNAME, password=PASSWORD)\"}, {\"line_number\": 6, \"line_content\": \"    for table in list(DB_MYSQL.tables):\"}, {\"line_number\": 7, \"line_content\": \"        DB_MYSQL.drop(table)\"}, {\"line_number\": 8, \"line_content\": \"    return DB_MYSQL\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/clips/pattern\", \"direct_link_to_file_line\": \"https://github.com/clips/pattern/blob/master/pattern/test/test_db.py#L51\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def create_db_sqlite():\"}, {\"line_number\": 2, \"line_content\": \"    global DB_SQLITE\"}, {\"line_number\": 3, \"line_content\": \"    if not DB_SQLITE or not DB_SQLITE._connection:\"}, {\"line_number\": 4, \"line_content\": \"        DB_SQLITE = db.Database(type=db.SQLITE, name='pattern_unittest_db',\"}, {\"line_number\": 5, \"line_content\": \"            host=HOST, port=PORT, username=USERNAME, password=PASSWORD)\"}, {\"line_number\": 6, \"line_content\": \"    for table in list(DB_MYSQL.tables):\"}, {\"line_number\": 7, \"line_content\": \"        DB_SQLITE.drop(table)\"}, {\"line_number\": 8, \"line_content\": \"    return DB_SQLITE\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/clips/pattern\", \"direct_link_to_file_line\": \"https://github.com/clips/pattern/blob/master/pattern/test/test_db.py#L1129\", \"contents\": {\"total_lines\": 25, \"lines\": [{\"line_number\": 1, \"line_content\": \"def suite(**kwargs):\"}, {\"line_number\": 2, \"line_content\": \"    suite = unittest.TestSuite()\"}, {\"line_number\": 3, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestUnicode))\"}, {\"line_number\": 4, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestEntities))\"}, {\"line_number\": 5, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestDate))\"}, {\"line_number\": 6, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(\"}, {\"line_number\": 7, \"line_content\": \"        TestUtilityFunctions))\"}, {\"line_number\": 8, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestSchema))\"}, {\"line_number\": 9, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(\"}, {\"line_number\": 10, \"line_content\": \"        TestMySQLDatabase))\"}, {\"line_number\": 11, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestMySQLTable))\"}, {\"line_number\": 12, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestMySQLQuery))\"}, {\"line_number\": 13, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestMySQLView))\"}, {\"line_number\": 14, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(\"}, {\"line_number\": 15, \"line_content\": \"        TestDeleteMySQLDatabase))\"}, {\"line_number\": 16, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(\"}, {\"line_number\": 17, \"line_content\": \"        TestSQLiteDatabase))\"}, {\"line_number\": 18, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestSQLiteTable))\"}, {\"line_number\": 19, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestSQLiteQuery))\"}, {\"line_number\": 20, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestSQLiteView))\"}, {\"line_number\": 21, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(\"}, {\"line_number\": 22, \"line_content\": \"        TestDeleteSQLiteDatabase))\"}, {\"line_number\": 23, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestCSV))\"}, {\"line_number\": 24, \"line_content\": \"    suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestDatasheet))\"}, {\"line_number\": 25, \"line_content\": \"    return suite\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/clips/pattern\", \"direct_link_to_file_line\": \"https://github.com/clips/pattern/blob/master/pattern/test/test_db.py#L76\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def setUp(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.strings = '\\u00fcn\\u00eec\\u00f8de', '\\u00fcn\\u00eec\\u00f8de'.encode('utf-16'), '\\u00fcn\\u00eec\\u00f8de'.encode(\"}, {\"line_number\": 3, \"line_content\": \"        'latin-1'), '\\u00fcn\\u00eec\\u00f8de'.encode('windows-1252'), '\\u00fcn\\u00eec\\u00f8de', '\\u05d0\\u05d5\\u05e0\\u05d9\\u05e7\\u05d0\\u05b8\\u05d3'\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/clips/pattern\", \"direct_link_to_file_line\": \"https://github.com/clips/pattern/blob/master/pattern/test/test_db.py#L87\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_decode_utf8(self):\"}, {\"line_number\": 2, \"line_content\": \"    for s in self.strings:\"}, {\"line_number\": 3, \"line_content\": \"        self.assertTrue(isinstance(db.decode_utf8(s), str))\"}, {\"line_number\": 4, \"line_content\": \"    print('pattern.db.decode_utf8()')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/google/yapf\", \"direct_link_to_file_line\": \"https://github.com/google/yapf/blob/master/yapf/setup.py#L28\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def initialize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/google/yapf\", \"direct_link_to_file_line\": \"https://github.com/google/yapf/blob/master/yapf/setup.py#L31\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def finalize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/google/yapf\", \"direct_link_to_file_line\": \"https://github.com/google/yapf/blob/master/yapf/setup.py#L34\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run(self):\"}, {\"line_number\": 2, \"line_content\": \"    loader = unittest.TestLoader()\"}, {\"line_number\": 3, \"line_content\": \"    tests = loader.discover('yapftests', pattern='*_test.py', top_level_dir='.'\"}, {\"line_number\": 4, \"line_content\": \"        )\"}, {\"line_number\": 5, \"line_content\": \"    runner = unittest.TextTestRunner()\"}, {\"line_number\": 6, \"line_content\": \"    results = runner.run(tests)\"}, {\"line_number\": 7, \"line_content\": \"    sys.exit(0 if results.wasSuccessful() else 1)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/google/yapf\", \"direct_link_to_file_line\": \"https://github.com/google/yapf/blob/master/yapf/yapftests/file_resources_test.py#L30\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"@contextlib.contextmanager\"}, {\"line_number\": 2, \"line_content\": \"def _restore_working_dir():\"}, {\"line_number\": 3, \"line_content\": \"    curdir = os.getcwd()\"}, {\"line_number\": 4, \"line_content\": \"    try:\"}, {\"line_number\": 5, \"line_content\": \"        yield\"}, {\"line_number\": 6, \"line_content\": \"    finally:\"}, {\"line_number\": 7, \"line_content\": \"        os.chdir(curdir)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/google/yapf\", \"direct_link_to_file_line\": \"https://github.com/google/yapf/blob/master/yapf/yapftests/file_resources_test.py#L30\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"@contextlib.contextmanager\"}, {\"line_number\": 2, \"line_content\": \"def _exists_mocked_in_module(module, mock_implementation):\"}, {\"line_number\": 3, \"line_content\": \"    unmocked_exists = getattr(module, 'exists')\"}, {\"line_number\": 4, \"line_content\": \"    setattr(module, 'exists', mock_implementation)\"}, {\"line_number\": 5, \"line_content\": \"    try:\"}, {\"line_number\": 6, \"line_content\": \"        yield\"}, {\"line_number\": 7, \"line_content\": \"    finally:\"}, {\"line_number\": 8, \"line_content\": \"        setattr(module, 'exists', unmocked_exists)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebook/chisel\", \"direct_link_to_file_line\": \"https://github.com/facebook/chisel/blob/master/chisel/fbchisellldbinputhelpers.py#L12\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, debugger, callback):\"}, {\"line_number\": 2, \"line_content\": \"    self.debugger = debugger\"}, {\"line_number\": 3, \"line_content\": \"    self.callback = callback\"}, {\"line_number\": 4, \"line_content\": \"    self.inputReader = lldb.SBInputReader()\"}, {\"line_number\": 5, \"line_content\": \"    self.inputReader.Initialize(debugger, self.handleInput, lldb.\"}, {\"line_number\": 6, \"line_content\": \"        eInputReaderGranularityLine, None, None, True)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebook/chisel\", \"direct_link_to_file_line\": \"https://github.com/facebook/chisel/blob/master/chisel/fbchisellldbinputhelpers.py#L25\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def isValid(self):\"}, {\"line_number\": 2, \"line_content\": \"    return not self.inputReader.IsDone()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebook/chisel\", \"direct_link_to_file_line\": \"https://github.com/facebook/chisel/blob/master/chisel/fbchisellldbinputhelpers.py#L28\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def start(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.debugger.PushInputReader(self.inputReader)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebook/chisel\", \"direct_link_to_file_line\": \"https://github.com/facebook/chisel/blob/master/chisel/fbchisellldbinputhelpers.py#L31\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def stop(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.inputReader.SetIsDone(True)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebook/chisel\", \"direct_link_to_file_line\": \"https://github.com/facebook/chisel/blob/master/chisel/fbchisellldbinputhelpers.py#L34\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def handleInput(self, inputReader, notification, bytes):\"}, {\"line_number\": 2, \"line_content\": \"    if notification == lldb.eInputReaderGotToken:\"}, {\"line_number\": 3, \"line_content\": \"        self.callback(bytes)\"}, {\"line_number\": 4, \"line_content\": \"    elif notification == lldb.eInputReaderInterrupt:\"}, {\"line_number\": 5, \"line_content\": \"        self.stop()\"}, {\"line_number\": 6, \"line_content\": \"    return len(bytes)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pypa/pipenv\", \"direct_link_to_file_line\": \"https://github.com/pypa/pipenv/blob/master/pipenv/get-pipenv.py#L86\", \"contents\": {\"total_lines\": 63, \"lines\": [{\"line_number\": 1, \"line_content\": \"def bootstrap(tmpdir=None):\"}, {\"line_number\": 2, \"line_content\": \"    import pip\"}, {\"line_number\": 3, \"line_content\": \"    from pip.commands.install import InstallCommand\"}, {\"line_number\": 4, \"line_content\": \"    from pip.req import InstallRequirement\"}, {\"line_number\": 5, \"line_content\": \"    class CertInstallCommand(InstallCommand):\"}, {\"line_number\": 6, \"line_content\": \"        def parse_args(self, args):\"}, {\"line_number\": 7, \"line_content\": \"            if not self.parser.get_default_values().cert:\"}, {\"line_number\": 8, \"line_content\": \"                self.parser.defaults['cert'] = cert_path\"}, {\"line_number\": 9, \"line_content\": \"            return super(CertInstallCommand, self).parse_args(args)\"}, {\"line_number\": 10, \"line_content\": \"    pip.commands_dict['install'] = CertInstallCommand\"}, {\"line_number\": 11, \"line_content\": \"    implicit_pip = True\"}, {\"line_number\": 12, \"line_content\": \"    implicit_setuptools = True\"}, {\"line_number\": 13, \"line_content\": \"    implicit_wheel = True\"}, {\"line_number\": 14, \"line_content\": \"    if '--no-setuptools' in sys.argv or os.environ.get('PIP_NO_SETUPTOOLS'):\"}, {\"line_number\": 15, \"line_content\": \"        args = [x for x in sys.argv[1:] if x != '--no-setuptools']\"}, {\"line_number\": 16, \"line_content\": \"        implicit_setuptools = False\"}, {\"line_number\": 17, \"line_content\": \"    else:\"}, {\"line_number\": 18, \"line_content\": \"        args = sys.argv[1:]\"}, {\"line_number\": 19, \"line_content\": \"    if '--no-wheel' in args or os.environ.get('PIP_NO_WHEEL'):\"}, {\"line_number\": 20, \"line_content\": \"        args = [x for x in args if x != '--no-wheel']\"}, {\"line_number\": 21, \"line_content\": \"        implicit_wheel = False\"}, {\"line_number\": 22, \"line_content\": \"    if implicit_setuptools:\"}, {\"line_number\": 23, \"line_content\": \"        try:\"}, {\"line_number\": 24, \"line_content\": \"            import setuptools\"}, {\"line_number\": 25, \"line_content\": \"            implicit_setuptools = False\"}, {\"line_number\": 26, \"line_content\": \"        except ImportError:\"}, {\"line_number\": 27, \"line_content\": \"            pass\"}, {\"line_number\": 28, \"line_content\": \"    if implicit_wheel:\"}, {\"line_number\": 29, \"line_content\": \"        try:\"}, {\"line_number\": 30, \"line_content\": \"            import wheel\"}, {\"line_number\": 31, \"line_content\": \"            implicit_wheel = False\"}, {\"line_number\": 32, \"line_content\": \"        except ImportError:\"}, {\"line_number\": 33, \"line_content\": \"            pass\"}, {\"line_number\": 34, \"line_content\": \"    for arg in args:\"}, {\"line_number\": 35, \"line_content\": \"        try:\"}, {\"line_number\": 36, \"line_content\": \"            req = InstallRequirement.from_line(arg)\"}, {\"line_number\": 37, \"line_content\": \"        except:\"}, {\"line_number\": 38, \"line_content\": \"            continue\"}, {\"line_number\": 39, \"line_content\": \"        if implicit_pip and req.name == 'pip':\"}, {\"line_number\": 40, \"line_content\": \"            implicit_pip = False\"}, {\"line_number\": 41, \"line_content\": \"        elif implicit_setuptools and req.name == 'setuptools':\"}, {\"line_number\": 42, \"line_content\": \"            implicit_setuptools = False\"}, {\"line_number\": 43, \"line_content\": \"        elif implicit_wheel and req.name == 'wheel':\"}, {\"line_number\": 44, \"line_content\": \"            implicit_wheel = False\"}, {\"line_number\": 45, \"line_content\": \"    if implicit_pip:\"}, {\"line_number\": 46, \"line_content\": \"        args += ['pip']\"}, {\"line_number\": 47, \"line_content\": \"    if implicit_setuptools:\"}, {\"line_number\": 48, \"line_content\": \"        args += ['setuptools']\"}, {\"line_number\": 49, \"line_content\": \"    if implicit_wheel:\"}, {\"line_number\": 50, \"line_content\": \"        args += ['wheel']\"}, {\"line_number\": 51, \"line_content\": \"    args += ['pipenv']\"}, {\"line_number\": 52, \"line_content\": \"    delete_tmpdir = False\"}, {\"line_number\": 53, \"line_content\": \"    try:\"}, {\"line_number\": 54, \"line_content\": \"        if tmpdir is None:\"}, {\"line_number\": 55, \"line_content\": \"            tmpdir = tempfile.mkdtemp()\"}, {\"line_number\": 56, \"line_content\": \"            delete_tmpdir = True\"}, {\"line_number\": 57, \"line_content\": \"        cert_path = os.path.join(tmpdir, 'cacert.pem')\"}, {\"line_number\": 58, \"line_content\": \"        with open(cert_path, 'wb') as cert:\"}, {\"line_number\": 59, \"line_content\": \"            cert.write(pkgutil.get_data('pip._vendor.requests', 'cacert.pem'))\"}, {\"line_number\": 60, \"line_content\": \"        sys.exit(pip.main(['install', '--upgrade'] + args))\"}, {\"line_number\": 61, \"line_content\": \"    finally:\"}, {\"line_number\": 62, \"line_content\": \"        if delete_tmpdir and tmpdir:\"}, {\"line_number\": 63, \"line_content\": \"            shutil.rmtree(tmpdir, ignore_errors=True)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pypa/pipenv\", \"direct_link_to_file_line\": \"https://github.com/pypa/pipenv/blob/master/pipenv/get-pipenv.py#L182\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    tmpdir = None\"}, {\"line_number\": 3, \"line_content\": \"    try:\"}, {\"line_number\": 4, \"line_content\": \"        tmpdir = tempfile.mkdtemp()\"}, {\"line_number\": 5, \"line_content\": \"        pip_zip = os.path.join(tmpdir, 'pip.zip')\"}, {\"line_number\": 6, \"line_content\": \"        with open(pip_zip, 'wb') as fp:\"}, {\"line_number\": 7, \"line_content\": \"            fp.write(b85decode(DATA.replace(b'\\\\n', b'')))\"}, {\"line_number\": 8, \"line_content\": \"        sys.path.insert(0, pip_zip)\"}, {\"line_number\": 9, \"line_content\": \"        bootstrap(tmpdir=tmpdir)\"}, {\"line_number\": 10, \"line_content\": \"    finally:\"}, {\"line_number\": 11, \"line_content\": \"        if tmpdir:\"}, {\"line_number\": 12, \"line_content\": \"            shutil.rmtree(tmpdir, ignore_errors=True)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pypa/pipenv\", \"direct_link_to_file_line\": \"https://github.com/pypa/pipenv/blob/master/pipenv/get-pipenv.py#L38\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def iterbytes(buf):\"}, {\"line_number\": 2, \"line_content\": \"    return (ord(byte) for byte in buf)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pypa/pipenv\", \"direct_link_to_file_line\": \"https://github.com/pypa/pipenv/blob/master/pipenv/get-pipenv.py#L50\", \"contents\": {\"total_lines\": 28, \"lines\": [{\"line_number\": 1, \"line_content\": \"def b85decode(b):\"}, {\"line_number\": 2, \"line_content\": \"    _b85dec = [None] * 256\"}, {\"line_number\": 3, \"line_content\": \"    for i, c in enumerate(iterbytes(_b85alphabet)):\"}, {\"line_number\": 4, \"line_content\": \"        _b85dec[c] = i\"}, {\"line_number\": 5, \"line_content\": \"    padding = -len(b) % 5\"}, {\"line_number\": 6, \"line_content\": \"    b = b + b'~' * padding\"}, {\"line_number\": 7, \"line_content\": \"    out = []\"}, {\"line_number\": 8, \"line_content\": \"    packI = struct.Struct('!I').pack\"}, {\"line_number\": 9, \"line_content\": \"    for i in range(0, len(b), 5):\"}, {\"line_number\": 10, \"line_content\": \"        chunk = b[i:i + 5]\"}, {\"line_number\": 11, \"line_content\": \"        acc = 0\"}, {\"line_number\": 12, \"line_content\": \"        try:\"}, {\"line_number\": 13, \"line_content\": \"            for c in iterbytes(chunk):\"}, {\"line_number\": 14, \"line_content\": \"                acc = acc * 85 + _b85dec[c]\"}, {\"line_number\": 15, \"line_content\": \"        except TypeError:\"}, {\"line_number\": 16, \"line_content\": \"            for j, c in enumerate(iterbytes(chunk)):\"}, {\"line_number\": 17, \"line_content\": \"                if _b85dec[c] is None:\"}, {\"line_number\": 18, \"line_content\": \"                    raise ValueError('bad base85 character at position %d' %\"}, {\"line_number\": 19, \"line_content\": \"                        (i + j))\"}, {\"line_number\": 20, \"line_content\": \"            raise\"}, {\"line_number\": 21, \"line_content\": \"        try:\"}, {\"line_number\": 22, \"line_content\": \"            out.append(packI(acc))\"}, {\"line_number\": 23, \"line_content\": \"        except struct.error:\"}, {\"line_number\": 24, \"line_content\": \"            raise ValueError('base85 overflow in hunk starting at byte %d' % i)\"}, {\"line_number\": 25, \"line_content\": \"    result = b''.join(out)\"}, {\"line_number\": 26, \"line_content\": \"    if padding:\"}, {\"line_number\": 27, \"line_content\": \"        result = result[:-padding]\"}, {\"line_number\": 28, \"line_content\": \"    return result\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pypa/pipenv\", \"direct_link_to_file_line\": \"https://github.com/pypa/pipenv/blob/master/pipenv/get-pipenv.py#L96\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def parse_args(self, args):\"}, {\"line_number\": 2, \"line_content\": \"    if not self.parser.get_default_values().cert:\"}, {\"line_number\": 3, \"line_content\": \"        self.parser.defaults['cert'] = cert_path\"}, {\"line_number\": 4, \"line_content\": \"    return super(CertInstallCommand, self).parse_args(args)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/dbcli/pgcli\", \"direct_link_to_file_line\": \"https://github.com/dbcli/pgcli/blob/master/pgcli/release.py#L17\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def skip_step():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Asks for user's response whether to run a step. Default is yes.\"}, {\"line_number\": 4, \"line_content\": \"    :return: boolean\"}, {\"line_number\": 5, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    global CONFIRM_STEPS\"}, {\"line_number\": 7, \"line_content\": \"    if CONFIRM_STEPS:\"}, {\"line_number\": 8, \"line_content\": \"        return not click.confirm('--- Run this step?', default=True)\"}, {\"line_number\": 9, \"line_content\": \"    return False\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/dbcli/pgcli\", \"direct_link_to_file_line\": \"https://github.com/dbcli/pgcli/blob/master/pgcli/release.py#L29\", \"contents\": {\"total_lines\": 15, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run_step(*args):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Prints out the command and asks if it should be run.\"}, {\"line_number\": 4, \"line_content\": \"    If yes (default), runs it.\"}, {\"line_number\": 5, \"line_content\": \"    :param args: list of strings (command and args)\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    global DRY_RUN\"}, {\"line_number\": 8, \"line_content\": \"    cmd = args\"}, {\"line_number\": 9, \"line_content\": \"    print(' '.join(cmd))\"}, {\"line_number\": 10, \"line_content\": \"    if skip_step():\"}, {\"line_number\": 11, \"line_content\": \"        print('--- Skipping...')\"}, {\"line_number\": 12, \"line_content\": \"    elif DRY_RUN:\"}, {\"line_number\": 13, \"line_content\": \"        print('--- Pretending to run...')\"}, {\"line_number\": 14, \"line_content\": \"    else:\"}, {\"line_number\": 15, \"line_content\": \"        subprocess.check_output(cmd)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/dbcli/pgcli\", \"direct_link_to_file_line\": \"https://github.com/dbcli/pgcli/blob/master/pgcli/release.py#L47\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def version(version_file):\"}, {\"line_number\": 2, \"line_content\": \"    _version_re = re.compile(\"}, {\"line_number\": 3, \"line_content\": \"        '__version__\\\\\\\\s+=\\\\\\\\s+(?P<quote>[\\\\\\\\\\\\'\\\"])(?P<version>.*)(?P=quote)')\"}, {\"line_number\": 4, \"line_content\": \"    with io.open(version_file, encoding='utf-8') as f:\"}, {\"line_number\": 5, \"line_content\": \"        ver = _version_re.search(f.read()).group('version')\"}, {\"line_number\": 6, \"line_content\": \"    return ver\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/dbcli/pgcli\", \"direct_link_to_file_line\": \"https://github.com/dbcli/pgcli/blob/master/pgcli/release.py#L58\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def commit_for_release(version_file, ver):\"}, {\"line_number\": 2, \"line_content\": \"    run_step('git', 'reset')\"}, {\"line_number\": 3, \"line_content\": \"    run_step('git', 'add', version_file)\"}, {\"line_number\": 4, \"line_content\": \"    run_step('git', 'commit', '--message', 'Releasing version {}'.format(ver))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/dbcli/pgcli\", \"direct_link_to_file_line\": \"https://github.com/dbcli/pgcli/blob/master/pgcli/release.py#L64\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def create_git_tag(tag_name):\"}, {\"line_number\": 2, \"line_content\": \"    run_step('git', 'tag', tag_name)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/asciinema/asciinema\", \"direct_link_to_file_line\": \"https://github.com/asciinema/asciinema/blob/master/asciinema/asciinema/term.py#L28\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def read_blocking(fd, timeout):\"}, {\"line_number\": 2, \"line_content\": \"    if fd in select.select([fd], [], [], timeout)[0]:\"}, {\"line_number\": 3, \"line_content\": \"        return os.read(fd, 1024)\"}, {\"line_number\": 4, \"line_content\": \"    return b''\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/asciinema/asciinema\", \"direct_link_to_file_line\": \"https://github.com/asciinema/asciinema/blob/master/asciinema/asciinema/term.py#L35\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_size():\"}, {\"line_number\": 2, \"line_content\": \"    return int(subprocess.check_output(['tput', 'cols'])), int(subprocess.\"}, {\"line_number\": 3, \"line_content\": \"        check_output(['tput', 'lines']))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/asciinema/asciinema\", \"direct_link_to_file_line\": \"https://github.com/asciinema/asciinema/blob/master/asciinema/asciinema/term.py#L9\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, fd):\"}, {\"line_number\": 2, \"line_content\": \"    self.fd = fd\"}, {\"line_number\": 3, \"line_content\": \"    self.restore = False\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/asciinema/asciinema\", \"direct_link_to_file_line\": \"https://github.com/asciinema/asciinema/blob/master/asciinema/asciinema/term.py#L13\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __enter__(self):\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        self.mode = tty.tcgetattr(self.fd)\"}, {\"line_number\": 4, \"line_content\": \"        tty.setraw(self.fd)\"}, {\"line_number\": 5, \"line_content\": \"        self.restore = True\"}, {\"line_number\": 6, \"line_content\": \"    except tty.error:\"}, {\"line_number\": 7, \"line_content\": \"        pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/asciinema/asciinema\", \"direct_link_to_file_line\": \"https://github.com/asciinema/asciinema/blob/master/asciinema/asciinema/term.py#L21\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __exit__(self, type, value, traceback):\"}, {\"line_number\": 2, \"line_content\": \"    if self.restore:\"}, {\"line_number\": 3, \"line_content\": \"        time.sleep(0.01)\"}, {\"line_number\": 4, \"line_content\": \"        tty.tcsetattr(self.fd, tty.TCSAFLUSH, self.mode)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/trailofbits/algo\", \"direct_link_to_file_line\": \"https://github.com/trailofbits/algo/blob/master/algo/library/lightsail.py#L207\", \"contents\": {\"total_lines\": 81, \"lines\": [{\"line_number\": 1, \"line_content\": \"def create_instance(module, client, instance_name):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Create an instance\"}, {\"line_number\": 4, \"line_content\": \"    module: Ansible module object\"}, {\"line_number\": 5, \"line_content\": \"    client: authenticated lightsail connection object\"}, {\"line_number\": 6, \"line_content\": \"    instance_name: name of instance to delete\"}, {\"line_number\": 7, \"line_content\": \"    Returns a dictionary of instance information\"}, {\"line_number\": 8, \"line_content\": \"    about the new instance.\"}, {\"line_number\": 9, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 10, \"line_content\": \"    changed = False\"}, {\"line_number\": 11, \"line_content\": \"    inst = None\"}, {\"line_number\": 12, \"line_content\": \"    try:\"}, {\"line_number\": 13, \"line_content\": \"        inst = _find_instance_info(client, instance_name)\"}, {\"line_number\": 14, \"line_content\": \"    except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 15, \"line_content\": \"        if e.response['Error']['Code'] != 'NotFoundException':\"}, {\"line_number\": 16, \"line_content\": \"            module.fail_json(msg='Error finding instance {0}, error: {1}'.\"}, {\"line_number\": 17, \"line_content\": \"                format(instance_name, e))\"}, {\"line_number\": 18, \"line_content\": \"    zone = module.params.get('zone')\"}, {\"line_number\": 19, \"line_content\": \"    blueprint_id = module.params.get('blueprint_id')\"}, {\"line_number\": 20, \"line_content\": \"    bundle_id = module.params.get('bundle_id')\"}, {\"line_number\": 21, \"line_content\": \"    user_data = module.params.get('user_data')\"}, {\"line_number\": 22, \"line_content\": \"    user_data = '' if user_data is None else user_data\"}, {\"line_number\": 23, \"line_content\": \"    wait = module.params.get('wait')\"}, {\"line_number\": 24, \"line_content\": \"    wait_timeout = int(module.params.get('wait_timeout'))\"}, {\"line_number\": 25, \"line_content\": \"    wait_max = time.time() + wait_timeout\"}, {\"line_number\": 26, \"line_content\": \"    if module.params.get('key_pair_name'):\"}, {\"line_number\": 27, \"line_content\": \"        key_pair_name = module.params.get('key_pair_name')\"}, {\"line_number\": 28, \"line_content\": \"    else:\"}, {\"line_number\": 29, \"line_content\": \"        key_pair_name = ''\"}, {\"line_number\": 30, \"line_content\": \"    if module.params.get('open_ports'):\"}, {\"line_number\": 31, \"line_content\": \"        open_ports = module.params.get('open_ports')\"}, {\"line_number\": 32, \"line_content\": \"    else:\"}, {\"line_number\": 33, \"line_content\": \"        open_ports = '[]'\"}, {\"line_number\": 34, \"line_content\": \"    resp = None\"}, {\"line_number\": 35, \"line_content\": \"    if inst is None:\"}, {\"line_number\": 36, \"line_content\": \"        try:\"}, {\"line_number\": 37, \"line_content\": \"            resp = client.create_instances(instanceNames=[instance_name],\"}, {\"line_number\": 38, \"line_content\": \"                availabilityZone=zone, blueprintId=blueprint_id, bundleId=\"}, {\"line_number\": 39, \"line_content\": \"                bundle_id, userData=user_data, keyPairName=key_pair_name)\"}, {\"line_number\": 40, \"line_content\": \"            resp = resp['operations'][0]\"}, {\"line_number\": 41, \"line_content\": \"        except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 42, \"line_content\": \"            module.fail_json(msg=\"}, {\"line_number\": 43, \"line_content\": \"                'Unable to create instance {0}, error: {1}'.format(\"}, {\"line_number\": 44, \"line_content\": \"                instance_name, e))\"}, {\"line_number\": 45, \"line_content\": \"        inst = _find_instance_info(client, instance_name)\"}, {\"line_number\": 46, \"line_content\": \"        if wait:\"}, {\"line_number\": 47, \"line_content\": \"            while wait_max > time.time() and (inst is not None and inst[\"}, {\"line_number\": 48, \"line_content\": \"                'state']['name'] != 'running'):\"}, {\"line_number\": 49, \"line_content\": \"                try:\"}, {\"line_number\": 50, \"line_content\": \"                    time.sleep(2)\"}, {\"line_number\": 51, \"line_content\": \"                    inst = _find_instance_info(client, instance_name)\"}, {\"line_number\": 52, \"line_content\": \"                except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 53, \"line_content\": \"                    if e.response['ResponseMetadata']['HTTPStatusCode'\"}, {\"line_number\": 54, \"line_content\": \"                        ] == '403':\"}, {\"line_number\": 55, \"line_content\": \"                        module.fail_json(msg=\"}, {\"line_number\": 56, \"line_content\": \"                            'Failed to start/stop instance {0}. Check that you have permissions to perform the operation'\"}, {\"line_number\": 57, \"line_content\": \"                            .format(instance_name), exception=traceback.\"}, {\"line_number\": 58, \"line_content\": \"                            format_exc())\"}, {\"line_number\": 59, \"line_content\": \"                    elif e.response['Error']['Code'] == 'RequestExpired':\"}, {\"line_number\": 60, \"line_content\": \"                        module.fail_json(msg=\"}, {\"line_number\": 61, \"line_content\": \"                            'RequestExpired: Failed to start instance {0}.'\"}, {\"line_number\": 62, \"line_content\": \"                            .format(instance_name), exception=traceback.\"}, {\"line_number\": 63, \"line_content\": \"                            format_exc())\"}, {\"line_number\": 64, \"line_content\": \"                    time.sleep(1)\"}, {\"line_number\": 65, \"line_content\": \"        if wait and not changed and wait_max <= time.time():\"}, {\"line_number\": 66, \"line_content\": \"            module.fail_json(msg='Wait for instance start timeout at %s' %\"}, {\"line_number\": 67, \"line_content\": \"                time.asctime())\"}, {\"line_number\": 68, \"line_content\": \"        if open_ports:\"}, {\"line_number\": 69, \"line_content\": \"            if inst is not None:\"}, {\"line_number\": 70, \"line_content\": \"                try:\"}, {\"line_number\": 71, \"line_content\": \"                    for o in open_ports:\"}, {\"line_number\": 72, \"line_content\": \"                        resp = client.open_instance_public_ports(instanceName\"}, {\"line_number\": 73, \"line_content\": \"                            =instance_name, portInfo={'fromPort': o[\"}, {\"line_number\": 74, \"line_content\": \"                            'from_port'], 'toPort': o['to_port'],\"}, {\"line_number\": 75, \"line_content\": \"                            'protocol': o['protocol']})\"}, {\"line_number\": 76, \"line_content\": \"                except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 77, \"line_content\": \"                    module.fail_json(msg=\"}, {\"line_number\": 78, \"line_content\": \"                        'Error opening ports for instance {0}, error: {1}'.\"}, {\"line_number\": 79, \"line_content\": \"                        format(instance_name, e))\"}, {\"line_number\": 80, \"line_content\": \"        changed = True\"}, {\"line_number\": 81, \"line_content\": \"    return changed, inst\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/trailofbits/algo\", \"direct_link_to_file_line\": \"https://github.com/trailofbits/algo/blob/master/algo/library/lightsail.py#L308\", \"contents\": {\"total_lines\": 53, \"lines\": [{\"line_number\": 1, \"line_content\": \"def delete_instance(module, client, instance_name):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Terminates an instance\"}, {\"line_number\": 4, \"line_content\": \"    module: Ansible module object\"}, {\"line_number\": 5, \"line_content\": \"    client: authenticated lightsail connection object\"}, {\"line_number\": 6, \"line_content\": \"    instance_name: name of instance to delete\"}, {\"line_number\": 7, \"line_content\": \"    Returns a dictionary of instance information\"}, {\"line_number\": 8, \"line_content\": \"    about the instance deleted (pre-deletion).\"}, {\"line_number\": 9, \"line_content\": \"    If the instance to be deleted is running\"}, {\"line_number\": 10, \"line_content\": \"    \\\"changed\\\" will be set to False.\"}, {\"line_number\": 11, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 12, \"line_content\": \"    wait = module.params.get('wait')\"}, {\"line_number\": 13, \"line_content\": \"    wait_timeout = int(module.params.get('wait_timeout'))\"}, {\"line_number\": 14, \"line_content\": \"    wait_max = time.time() + wait_timeout\"}, {\"line_number\": 15, \"line_content\": \"    changed = False\"}, {\"line_number\": 16, \"line_content\": \"    inst = None\"}, {\"line_number\": 17, \"line_content\": \"    try:\"}, {\"line_number\": 18, \"line_content\": \"        inst = _find_instance_info(client, instance_name)\"}, {\"line_number\": 19, \"line_content\": \"    except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 20, \"line_content\": \"        if e.response['Error']['Code'] != 'NotFoundException':\"}, {\"line_number\": 21, \"line_content\": \"            module.fail_json(msg='Error finding instance {0}, error: {1}'.\"}, {\"line_number\": 22, \"line_content\": \"                format(instance_name, e))\"}, {\"line_number\": 23, \"line_content\": \"    if wait:\"}, {\"line_number\": 24, \"line_content\": \"        while wait_max > time.time() and inst is not None and inst['state'][\"}, {\"line_number\": 25, \"line_content\": \"            'name'] in ('pending', 'stopping'):\"}, {\"line_number\": 26, \"line_content\": \"            try:\"}, {\"line_number\": 27, \"line_content\": \"                time.sleep(5)\"}, {\"line_number\": 28, \"line_content\": \"                inst = _find_instance_info(client, instance_name)\"}, {\"line_number\": 29, \"line_content\": \"            except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 30, \"line_content\": \"                if e.response['ResponseMetadata']['HTTPStatusCode'] == '403':\"}, {\"line_number\": 31, \"line_content\": \"                    module.fail_json(msg=\"}, {\"line_number\": 32, \"line_content\": \"                        'Failed to delete instance {0}. Check that you have permissions to perform the operation.'\"}, {\"line_number\": 33, \"line_content\": \"                        .format(instance_name), exception=traceback.\"}, {\"line_number\": 34, \"line_content\": \"                        format_exc())\"}, {\"line_number\": 35, \"line_content\": \"                elif e.response['Error']['Code'] == 'RequestExpired':\"}, {\"line_number\": 36, \"line_content\": \"                    module.fail_json(msg=\"}, {\"line_number\": 37, \"line_content\": \"                        'RequestExpired: Failed to delete instance {0}.'.\"}, {\"line_number\": 38, \"line_content\": \"                        format(instance_name), exception=traceback.format_exc()\"}, {\"line_number\": 39, \"line_content\": \"                        )\"}, {\"line_number\": 40, \"line_content\": \"                time.sleep(10)\"}, {\"line_number\": 41, \"line_content\": \"    if inst is not None:\"}, {\"line_number\": 42, \"line_content\": \"        while not changed and (wait and wait_max > time.time() or not wait):\"}, {\"line_number\": 43, \"line_content\": \"            try:\"}, {\"line_number\": 44, \"line_content\": \"                client.delete_instance(instanceName=instance_name)\"}, {\"line_number\": 45, \"line_content\": \"                changed = True\"}, {\"line_number\": 46, \"line_content\": \"            except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 47, \"line_content\": \"                module.fail_json(msg=\"}, {\"line_number\": 48, \"line_content\": \"                    'Error deleting instance {0}, error: {1}'.format(\"}, {\"line_number\": 49, \"line_content\": \"                    instance_name, e))\"}, {\"line_number\": 50, \"line_content\": \"    if wait and not changed and wait_max <= time.time():\"}, {\"line_number\": 51, \"line_content\": \"        module.fail_json(msg='wait for instance delete timeout at %s' %\"}, {\"line_number\": 52, \"line_content\": \"            time.asctime())\"}, {\"line_number\": 53, \"line_content\": \"    return changed, inst\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/trailofbits/algo\", \"direct_link_to_file_line\": \"https://github.com/trailofbits/algo/blob/master/algo/library/lightsail.py#L369\", \"contents\": {\"total_lines\": 51, \"lines\": [{\"line_number\": 1, \"line_content\": \"def restart_instance(module, client, instance_name):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Reboot an existing instance\"}, {\"line_number\": 4, \"line_content\": \"    module: Ansible module object\"}, {\"line_number\": 5, \"line_content\": \"    client: authenticated lightsail connection object\"}, {\"line_number\": 6, \"line_content\": \"    instance_name: name of instance to reboot\"}, {\"line_number\": 7, \"line_content\": \"    Returns a dictionary of instance information\"}, {\"line_number\": 8, \"line_content\": \"    about the restarted instance\"}, {\"line_number\": 9, \"line_content\": \"    If the instance was not able to reboot,\"}, {\"line_number\": 10, \"line_content\": \"    \\\"changed\\\" will be set to False.\"}, {\"line_number\": 11, \"line_content\": \"    Wait will not apply here as this is an OS-level operation\"}, {\"line_number\": 12, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 13, \"line_content\": \"    wait = module.params.get('wait')\"}, {\"line_number\": 14, \"line_content\": \"    wait_timeout = int(module.params.get('wait_timeout'))\"}, {\"line_number\": 15, \"line_content\": \"    wait_max = time.time() + wait_timeout\"}, {\"line_number\": 16, \"line_content\": \"    changed = False\"}, {\"line_number\": 17, \"line_content\": \"    inst = None\"}, {\"line_number\": 18, \"line_content\": \"    try:\"}, {\"line_number\": 19, \"line_content\": \"        inst = _find_instance_info(client, instance_name)\"}, {\"line_number\": 20, \"line_content\": \"    except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 21, \"line_content\": \"        if e.response['Error']['Code'] != 'NotFoundException':\"}, {\"line_number\": 22, \"line_content\": \"            module.fail_json(msg='Error finding instance {0}, error: {1}'.\"}, {\"line_number\": 23, \"line_content\": \"                format(instance_name, e))\"}, {\"line_number\": 24, \"line_content\": \"    if wait:\"}, {\"line_number\": 25, \"line_content\": \"        while wait_max > time.time() and inst is not None and inst['state'][\"}, {\"line_number\": 26, \"line_content\": \"            'name'] in ('pending', 'stopping'):\"}, {\"line_number\": 27, \"line_content\": \"            try:\"}, {\"line_number\": 28, \"line_content\": \"                time.sleep(5)\"}, {\"line_number\": 29, \"line_content\": \"                inst = _find_instance_info(client, instance_name)\"}, {\"line_number\": 30, \"line_content\": \"            except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 31, \"line_content\": \"                if e.response['ResponseMetadata']['HTTPStatusCode'] == '403':\"}, {\"line_number\": 32, \"line_content\": \"                    module.fail_json(msg=\"}, {\"line_number\": 33, \"line_content\": \"                        'Failed to restart instance {0}. Check that you have permissions to perform the operation.'\"}, {\"line_number\": 34, \"line_content\": \"                        .format(instance_name), exception=traceback.\"}, {\"line_number\": 35, \"line_content\": \"                        format_exc())\"}, {\"line_number\": 36, \"line_content\": \"                elif e.response['Error']['Code'] == 'RequestExpired':\"}, {\"line_number\": 37, \"line_content\": \"                    module.fail_json(msg=\"}, {\"line_number\": 38, \"line_content\": \"                        'RequestExpired: Failed to restart instance {0}.'.\"}, {\"line_number\": 39, \"line_content\": \"                        format(instance_name), exception=traceback.format_exc()\"}, {\"line_number\": 40, \"line_content\": \"                        )\"}, {\"line_number\": 41, \"line_content\": \"                time.sleep(3)\"}, {\"line_number\": 42, \"line_content\": \"    if inst is not None:\"}, {\"line_number\": 43, \"line_content\": \"        try:\"}, {\"line_number\": 44, \"line_content\": \"            client.reboot_instance(instanceName=instance_name)\"}, {\"line_number\": 45, \"line_content\": \"        except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 46, \"line_content\": \"            if e.response['Error']['Code'] != 'NotFoundException':\"}, {\"line_number\": 47, \"line_content\": \"                module.fail_json(msg=\"}, {\"line_number\": 48, \"line_content\": \"                    'Unable to reboot instance {0}, error: {1}'.format(\"}, {\"line_number\": 49, \"line_content\": \"                    instance_name, e))\"}, {\"line_number\": 50, \"line_content\": \"        changed = True\"}, {\"line_number\": 51, \"line_content\": \"    return changed, inst\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/trailofbits/algo\", \"direct_link_to_file_line\": \"https://github.com/trailofbits/algo/blob/master/algo/library/lightsail.py#L424\", \"contents\": {\"total_lines\": 54, \"lines\": [{\"line_number\": 1, \"line_content\": \"def startstop_instance(module, client, instance_name, state):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Starts or stops an existing instance\"}, {\"line_number\": 4, \"line_content\": \"    module: Ansible module object\"}, {\"line_number\": 5, \"line_content\": \"    client: authenticated lightsail connection object\"}, {\"line_number\": 6, \"line_content\": \"    instance_name: name of instance to start/stop\"}, {\"line_number\": 7, \"line_content\": \"    state: Target state (\\\"running\\\" or \\\"stopped\\\")\"}, {\"line_number\": 8, \"line_content\": \"    Returns a dictionary of instance information\"}, {\"line_number\": 9, \"line_content\": \"    about the instance started/stopped\"}, {\"line_number\": 10, \"line_content\": \"    If the instance was not able to state change,\"}, {\"line_number\": 11, \"line_content\": \"    \\\"changed\\\" will be set to False.\"}, {\"line_number\": 12, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 13, \"line_content\": \"    wait = module.params.get('wait')\"}, {\"line_number\": 14, \"line_content\": \"    wait_timeout = int(module.params.get('wait_timeout'))\"}, {\"line_number\": 15, \"line_content\": \"    wait_max = time.time() + wait_timeout\"}, {\"line_number\": 16, \"line_content\": \"    changed = False\"}, {\"line_number\": 17, \"line_content\": \"    inst = None\"}, {\"line_number\": 18, \"line_content\": \"    try:\"}, {\"line_number\": 19, \"line_content\": \"        inst = _find_instance_info(client, instance_name)\"}, {\"line_number\": 20, \"line_content\": \"    except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 21, \"line_content\": \"        if e.response['Error']['Code'] != 'NotFoundException':\"}, {\"line_number\": 22, \"line_content\": \"            module.fail_json(msg='Error finding instance {0}, error: {1}'.\"}, {\"line_number\": 23, \"line_content\": \"                format(instance_name, e))\"}, {\"line_number\": 24, \"line_content\": \"    if wait:\"}, {\"line_number\": 25, \"line_content\": \"        while wait_max > time.time() and inst is not None and inst['state'][\"}, {\"line_number\": 26, \"line_content\": \"            'name'] in ('pending', 'stopping'):\"}, {\"line_number\": 27, \"line_content\": \"            try:\"}, {\"line_number\": 28, \"line_content\": \"                time.sleep(5)\"}, {\"line_number\": 29, \"line_content\": \"                inst = _find_instance_info(client, instance_name)\"}, {\"line_number\": 30, \"line_content\": \"            except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 31, \"line_content\": \"                if e.response['ResponseMetadata']['HTTPStatusCode'] == '403':\"}, {\"line_number\": 32, \"line_content\": \"                    module.fail_json(msg=\"}, {\"line_number\": 33, \"line_content\": \"                        'Failed to start/stop instance {0}. Check that you have permissions to perform the operation'\"}, {\"line_number\": 34, \"line_content\": \"                        .format(instance_name), exception=traceback.\"}, {\"line_number\": 35, \"line_content\": \"                        format_exc())\"}, {\"line_number\": 36, \"line_content\": \"                elif e.response['Error']['Code'] == 'RequestExpired':\"}, {\"line_number\": 37, \"line_content\": \"                    module.fail_json(msg=\"}, {\"line_number\": 38, \"line_content\": \"                        'RequestExpired: Failed to start/stop instance {0}.'\"}, {\"line_number\": 39, \"line_content\": \"                        .format(instance_name), exception=traceback.\"}, {\"line_number\": 40, \"line_content\": \"                        format_exc())\"}, {\"line_number\": 41, \"line_content\": \"                time.sleep(1)\"}, {\"line_number\": 42, \"line_content\": \"    if inst is not None and inst['state']['name'] != state:\"}, {\"line_number\": 43, \"line_content\": \"        try:\"}, {\"line_number\": 44, \"line_content\": \"            if state == 'running':\"}, {\"line_number\": 45, \"line_content\": \"                client.start_instance(instanceName=instance_name)\"}, {\"line_number\": 46, \"line_content\": \"            else:\"}, {\"line_number\": 47, \"line_content\": \"                client.stop_instance(instanceName=instance_name)\"}, {\"line_number\": 48, \"line_content\": \"        except botocore.exceptions.ClientError as e:\"}, {\"line_number\": 49, \"line_content\": \"            module.fail_json(msg=\"}, {\"line_number\": 50, \"line_content\": \"                'Unable to change state for instance {0}, error: {1}'.\"}, {\"line_number\": 51, \"line_content\": \"                format(instance_name, e))\"}, {\"line_number\": 52, \"line_content\": \"        changed = True\"}, {\"line_number\": 53, \"line_content\": \"        inst = _find_instance_info(client, instance_name)\"}, {\"line_number\": 54, \"line_content\": \"    return changed, inst\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/trailofbits/algo\", \"direct_link_to_file_line\": \"https://github.com/trailofbits/algo/blob/master/algo/library/lightsail.py#L483\", \"contents\": {\"total_lines\": 28, \"lines\": [{\"line_number\": 1, \"line_content\": \"def core(module):\"}, {\"line_number\": 2, \"line_content\": \"    region, ec2_url, aws_connect_kwargs = get_aws_connection_info(module,\"}, {\"line_number\": 3, \"line_content\": \"        boto3=True)\"}, {\"line_number\": 4, \"line_content\": \"    if not region:\"}, {\"line_number\": 5, \"line_content\": \"        module.fail_json(msg='region must be specified')\"}, {\"line_number\": 6, \"line_content\": \"    client = None\"}, {\"line_number\": 7, \"line_content\": \"    try:\"}, {\"line_number\": 8, \"line_content\": \"        client = boto3_conn(module, conn_type='client', resource=\"}, {\"line_number\": 9, \"line_content\": \"            'lightsail', region=region, endpoint=ec2_url, **aws_connect_kwargs)\"}, {\"line_number\": 10, \"line_content\": \"    except (botocore.exceptions.ClientError, botocore.exceptions.\"}, {\"line_number\": 11, \"line_content\": \"        ValidationError) as e:\"}, {\"line_number\": 12, \"line_content\": \"        module.fail_json(msg=\"}, {\"line_number\": 13, \"line_content\": \"            'Failed while connecting to the lightsail service: %s' % e,\"}, {\"line_number\": 14, \"line_content\": \"            exception=traceback.format_exc())\"}, {\"line_number\": 15, \"line_content\": \"    changed = False\"}, {\"line_number\": 16, \"line_content\": \"    state = module.params['state']\"}, {\"line_number\": 17, \"line_content\": \"    name = module.params['name']\"}, {\"line_number\": 18, \"line_content\": \"    if state == 'absent':\"}, {\"line_number\": 19, \"line_content\": \"        changed, instance_dict = delete_instance(module, client, name)\"}, {\"line_number\": 20, \"line_content\": \"    elif state in ('running', 'stopped'):\"}, {\"line_number\": 21, \"line_content\": \"        changed, instance_dict = startstop_instance(module, client, name, state\"}, {\"line_number\": 22, \"line_content\": \"            )\"}, {\"line_number\": 23, \"line_content\": \"    elif state == 'restarted':\"}, {\"line_number\": 24, \"line_content\": \"        changed, instance_dict = restart_instance(module, client, name)\"}, {\"line_number\": 25, \"line_content\": \"    elif state == 'present':\"}, {\"line_number\": 26, \"line_content\": \"        changed, instance_dict = create_instance(module, client, name)\"}, {\"line_number\": 27, \"line_content\": \"    module.exit_json(changed=changed, instance=camel_dict_to_snake_dict(\"}, {\"line_number\": 28, \"line_content\": \"        instance_dict))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/davidsandberg/facenet\", \"direct_link_to_file_line\": \"https://github.com/davidsandberg/facenet/blob/master/facenet/test/triplet_loss_test.py#L30\", \"contents\": {\"total_lines\": 22, \"lines\": [{\"line_number\": 1, \"line_content\": \"def testDemuxEmbeddings(self):\"}, {\"line_number\": 2, \"line_content\": \"    batch_size = 3 * 12\"}, {\"line_number\": 3, \"line_content\": \"    embedding_size = 16\"}, {\"line_number\": 4, \"line_content\": \"    alpha = 0.2\"}, {\"line_number\": 5, \"line_content\": \"    with tf.Graph().as_default():\"}, {\"line_number\": 6, \"line_content\": \"        embeddings = tf.placeholder(tf.float64, shape=(batch_size,\"}, {\"line_number\": 7, \"line_content\": \"            embedding_size), name='embeddings')\"}, {\"line_number\": 8, \"line_content\": \"        anchor, positive, negative = tf.unstack(tf.reshape(embeddings, [-1,\"}, {\"line_number\": 9, \"line_content\": \"            3, embedding_size]), 3, 1)\"}, {\"line_number\": 10, \"line_content\": \"        triplet_loss = facenet.triplet_loss(anchor, positive, negative, alpha)\"}, {\"line_number\": 11, \"line_content\": \"        sess = tf.Session()\"}, {\"line_number\": 12, \"line_content\": \"        with sess.as_default():\"}, {\"line_number\": 13, \"line_content\": \"            np.random.seed(seed=666)\"}, {\"line_number\": 14, \"line_content\": \"            emb = np.random.uniform(size=(batch_size, embedding_size))\"}, {\"line_number\": 15, \"line_content\": \"            tf_triplet_loss = sess.run(triplet_loss, feed_dict={embeddings:\"}, {\"line_number\": 16, \"line_content\": \"                emb})\"}, {\"line_number\": 17, \"line_content\": \"            pos_dist_sqr = np.sum(np.square(emb[0::3, :] - emb[1::3, :]), 1)\"}, {\"line_number\": 18, \"line_content\": \"            neg_dist_sqr = np.sum(np.square(emb[0::3, :] - emb[2::3, :]), 1)\"}, {\"line_number\": 19, \"line_content\": \"            np_triplet_loss = np.mean(np.maximum(0.0, pos_dist_sqr -\"}, {\"line_number\": 20, \"line_content\": \"                neg_dist_sqr + alpha))\"}, {\"line_number\": 21, \"line_content\": \"            np.testing.assert_almost_equal(tf_triplet_loss, np_triplet_loss,\"}, {\"line_number\": 22, \"line_content\": \"                decimal=5, err_msg='Triplet loss is incorrect')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/davidsandberg/facenet\", \"direct_link_to_file_line\": \"https://github.com/davidsandberg/facenet/blob/master/facenet/test/batch_norm_test.py#L32\", \"contents\": {\"total_lines\": 19, \"lines\": [{\"line_number\": 1, \"line_content\": \"@unittest.skip('Skip batch norm test case')\"}, {\"line_number\": 2, \"line_content\": \"def testBatchNorm(self):\"}, {\"line_number\": 3, \"line_content\": \"    tf.set_random_seed(123)\"}, {\"line_number\": 4, \"line_content\": \"    x = tf.placeholder(tf.float32, [None, 20, 20, 10], name='input')\"}, {\"line_number\": 5, \"line_content\": \"    phase_train = tf.placeholder(tf.bool, name='phase_train')\"}, {\"line_number\": 6, \"line_content\": \"    bn = models.network.batch_norm(x, phase_train)\"}, {\"line_number\": 7, \"line_content\": \"    init = tf.global_variables_initializer()\"}, {\"line_number\": 8, \"line_content\": \"    sess = tf.Session(config=tf.ConfigProto())\"}, {\"line_number\": 9, \"line_content\": \"    sess.run(init)\"}, {\"line_number\": 10, \"line_content\": \"    with sess.as_default():\"}, {\"line_number\": 11, \"line_content\": \"        y = np.random.normal(0, 1, size=(50, 20, 20, 10))\"}, {\"line_number\": 12, \"line_content\": \"        feed_dict = {x: y, phase_train: True}\"}, {\"line_number\": 13, \"line_content\": \"        sess.run(bn, feed_dict=feed_dict)\"}, {\"line_number\": 14, \"line_content\": \"        feed_dict = {x: y, phase_train: False}\"}, {\"line_number\": 15, \"line_content\": \"        y1 = sess.run(bn, feed_dict=feed_dict)\"}, {\"line_number\": 16, \"line_content\": \"        y2 = sess.run(bn, feed_dict=feed_dict)\"}, {\"line_number\": 17, \"line_content\": \"        testing.assert_almost_equal(y1, y2, 10,\"}, {\"line_number\": 18, \"line_content\": \"            'Output from two forward passes with phase_train==false should be equal'\"}, {\"line_number\": 19, \"line_content\": \"            )\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/davidsandberg/facenet\", \"direct_link_to_file_line\": \"https://github.com/davidsandberg/facenet/blob/master/facenet/test/restore_test.py#L172\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def create_checkpoint_file(model_dir, model_file):\"}, {\"line_number\": 2, \"line_content\": \"    checkpoint_filename = os.path.join(model_dir, 'checkpoint')\"}, {\"line_number\": 3, \"line_content\": \"    full_model_filename = os.path.join(model_dir, model_file)\"}, {\"line_number\": 4, \"line_content\": \"    with open(checkpoint_filename, 'w') as f:\"}, {\"line_number\": 5, \"line_content\": \"        f.write('model_checkpoint_path: \\\"%s\\\"\\\\n' % full_model_filename)\"}, {\"line_number\": 6, \"line_content\": \"        f.write('all_model_checkpoint_paths: \\\"%s\\\"\\\\n' % full_model_filename)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/davidsandberg/facenet\", \"direct_link_to_file_line\": \"https://github.com/davidsandberg/facenet/blob/master/facenet/test/restore_test.py#L32\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"@classmethod\"}, {\"line_number\": 2, \"line_content\": \"def setUpClass(self):\"}, {\"line_number\": 3, \"line_content\": \"    self.tmp_dir = tempfile.mkdtemp()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/davidsandberg/facenet\", \"direct_link_to_file_line\": \"https://github.com/davidsandberg/facenet/blob/master/facenet/test/restore_test.py#L32\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"@classmethod\"}, {\"line_number\": 2, \"line_content\": \"def tearDownClass(self):\"}, {\"line_number\": 3, \"line_content\": \"    shutil.rmtree(self.tmp_dir)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/testerSunshine/12306\", \"direct_link_to_file_line\": \"https://github.com/testerSunshine/12306/blob/master/12306/run.py#L6\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def parser_arguments(argv):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    \\u4e0d\\u5e94\\u8be5\\u5728\\u8fd9\\u91cc\\u5b9a\\u4e49\\uff0c\\u5148\\u653e\\u5728\\u8fd9\\u91cc\"}, {\"line_number\": 4, \"line_content\": \"    :param argv:\"}, {\"line_number\": 5, \"line_content\": \"    :return:\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    parser = argparse.ArgumentParser()\"}, {\"line_number\": 8, \"line_content\": \"    parser.add_argument('operate', type=str, help=\"}, {\"line_number\": 9, \"line_content\": \"        'r: \\u8fd0\\u884c\\u62a2\\u7968\\u7a0b\\u5e8f, c: \\u8fc7\\u6ee4cdn, t: \\u6d4b\\u8bd5\\u90ae\\u7bb1\\u548cserver\\u9171\\uff0cserver\\u9171\\u9700\\u8981\\u6253\\u5f00\\u5f00\\u5173')\"}, {\"line_number\": 10, \"line_content\": \"    return parser.parse_args(argv)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/testerSunshine/12306\", \"direct_link_to_file_line\": \"https://github.com/testerSunshine/12306/blob/master/12306/verify/pretreatment.py#L21\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def download_image():\"}, {\"line_number\": 2, \"line_content\": \"    url = (\"}, {\"line_number\": 3, \"line_content\": \"        'https://kyfw.12306.cn/otn/passcodeNew/getPassCodeNew?module=login&rand=sjrand'\"}, {\"line_number\": 4, \"line_content\": \"        )\"}, {\"line_number\": 5, \"line_content\": \"    r = requests.get(url)\"}, {\"line_number\": 6, \"line_content\": \"    fn = hashlib.md5(r.content).hexdigest()\"}, {\"line_number\": 7, \"line_content\": \"    with open(f'{PATH}/{fn}.jpg', 'wb') as fp:\"}, {\"line_number\": 8, \"line_content\": \"        fp.write(r.content)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/testerSunshine/12306\", \"direct_link_to_file_line\": \"https://github.com/testerSunshine/12306/blob/master/12306/verify/pretreatment.py#L32\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def download_images():\"}, {\"line_number\": 2, \"line_content\": \"    pathlib.Path(PATH).mkdir(exist_ok=True)\"}, {\"line_number\": 3, \"line_content\": \"    for idx in range(40000):\"}, {\"line_number\": 4, \"line_content\": \"        download_image()\"}, {\"line_number\": 5, \"line_content\": \"        print(idx)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/testerSunshine/12306\", \"direct_link_to_file_line\": \"https://github.com/testerSunshine/12306/blob/master/12306/verify/pretreatment.py#L39\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_text(img, offset=0):\"}, {\"line_number\": 2, \"line_content\": \"    return img[3:22, 120 + offset:177 + offset]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/testerSunshine/12306\", \"direct_link_to_file_line\": \"https://github.com/testerSunshine/12306/blob/master/12306/verify/pretreatment.py#L44\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def avhash(im):\"}, {\"line_number\": 2, \"line_content\": \"    im = cv2.resize(im, (8, 8), interpolation=cv2.INTER_CUBIC)\"}, {\"line_number\": 3, \"line_content\": \"    avg = im.mean()\"}, {\"line_number\": 4, \"line_content\": \"    im = im > avg\"}, {\"line_number\": 5, \"line_content\": \"    im = np.packbits(im)\"}, {\"line_number\": 6, \"line_content\": \"    return im\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/black\", \"direct_link_to_file_line\": \"https://github.com/psf/black/blob/master/black/gallery/gallery.py#L194\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"@lru_cache(8)\"}, {\"line_number\": 2, \"line_content\": \"def black_runner(version: str, black_repo: Path) ->Path:\"}, {\"line_number\": 3, \"line_content\": \"    directory = tempfile.TemporaryDirectory()\"}, {\"line_number\": 4, \"line_content\": \"    venv.create(directory.name, with_pip=True)\"}, {\"line_number\": 5, \"line_content\": \"    python = Path(directory.name) / 'bin' / 'python'\"}, {\"line_number\": 6, \"line_content\": \"    subprocess.run([python, '-m', 'pip', 'install', '-e', black_repo])\"}, {\"line_number\": 7, \"line_content\": \"    atexit.register(directory.cleanup)\"}, {\"line_number\": 8, \"line_content\": \"    return python\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/black\", \"direct_link_to_file_line\": \"https://github.com/psf/black/blob/master/black/tests/test_black.py#L80\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"@contextmanager\"}, {\"line_number\": 2, \"line_content\": \"def cache_dir(exists: bool=True) ->Iterator[Path]:\"}, {\"line_number\": 3, \"line_content\": \"    with TemporaryDirectory() as workspace:\"}, {\"line_number\": 4, \"line_content\": \"        cache_dir = Path(workspace)\"}, {\"line_number\": 5, \"line_content\": \"        if not exists:\"}, {\"line_number\": 6, \"line_content\": \"            cache_dir = cache_dir / 'new'\"}, {\"line_number\": 7, \"line_content\": \"        with patch('black.CACHE_DIR', cache_dir):\"}, {\"line_number\": 8, \"line_content\": \"            yield cache_dir\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/black\", \"direct_link_to_file_line\": \"https://github.com/psf/black/blob/master/black/tests/test_black.py#L80\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"@contextmanager\"}, {\"line_number\": 2, \"line_content\": \"def event_loop() ->Iterator[None]:\"}, {\"line_number\": 3, \"line_content\": \"    policy = asyncio.get_event_loop_policy()\"}, {\"line_number\": 4, \"line_content\": \"    loop = policy.new_event_loop()\"}, {\"line_number\": 5, \"line_content\": \"    asyncio.set_event_loop(loop)\"}, {\"line_number\": 6, \"line_content\": \"    try:\"}, {\"line_number\": 7, \"line_content\": \"        yield\"}, {\"line_number\": 8, \"line_content\": \"    finally:\"}, {\"line_number\": 9, \"line_content\": \"        loop.close()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/black\", \"direct_link_to_file_line\": \"https://github.com/psf/black/blob/master/black/tests/test_black.py#L80\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"@contextmanager\"}, {\"line_number\": 2, \"line_content\": \"def skip_if_exception(e: str) ->Iterator[None]:\"}, {\"line_number\": 3, \"line_content\": \"    try:\"}, {\"line_number\": 4, \"line_content\": \"        yield\"}, {\"line_number\": 5, \"line_content\": \"    except Exception as exc:\"}, {\"line_number\": 6, \"line_content\": \"        if exc.__class__.__name__ == e:\"}, {\"line_number\": 7, \"line_content\": \"            unittest.skip(f'Encountered expected exception {exc}, skipping')\"}, {\"line_number\": 8, \"line_content\": \"        else:\"}, {\"line_number\": 9, \"line_content\": \"            raise\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/black\", \"direct_link_to_file_line\": \"https://github.com/psf/black/blob/master/black/tests/test_black.py#L80\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"@contextmanager\"}, {\"line_number\": 2, \"line_content\": \"def isolation(self, *args: Any, **kwargs: Any) ->Generator[BinaryIO, None, None\"}, {\"line_number\": 3, \"line_content\": \"    ]:\"}, {\"line_number\": 4, \"line_content\": \"    with super().isolation(*args, **kwargs) as output:\"}, {\"line_number\": 5, \"line_content\": \"        try:\"}, {\"line_number\": 6, \"line_content\": \"            hold_stderr = sys.stderr\"}, {\"line_number\": 7, \"line_content\": \"            sys.stderr = TextIOWrapper(self.stderrbuf, encoding=self.charset)\"}, {\"line_number\": 8, \"line_content\": \"            yield output\"}, {\"line_number\": 9, \"line_content\": \"        finally:\"}, {\"line_number\": 10, \"line_content\": \"            self.stdout_bytes = sys.stdout.buffer.getvalue()\"}, {\"line_number\": 11, \"line_content\": \"            self.stderr_bytes = sys.stderr.buffer.getvalue()\"}, {\"line_number\": 12, \"line_content\": \"            sys.stderr = hold_stderr\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebook/prophet\", \"direct_link_to_file_line\": \"https://github.com/facebook/prophet/blob/master/prophet/python/setup.py#L35\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def build_models(target_dir):\"}, {\"line_number\": 2, \"line_content\": \"    from fbprophet.models import StanBackendEnum\"}, {\"line_number\": 3, \"line_content\": \"    for backend in get_backends_from_env():\"}, {\"line_number\": 4, \"line_content\": \"        StanBackendEnum.get_backend_class(backend).build_model(target_dir,\"}, {\"line_number\": 5, \"line_content\": \"            MODEL_DIR)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebook/prophet\", \"direct_link_to_file_line\": \"https://github.com/facebook/prophet/blob/master/prophet/python/setup.py#L44\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run(self):\"}, {\"line_number\": 2, \"line_content\": \"    if not self.dry_run:\"}, {\"line_number\": 3, \"line_content\": \"        target_dir = os.path.join(self.build_lib, MODEL_TARGET_DIR)\"}, {\"line_number\": 4, \"line_content\": \"        self.mkpath(target_dir)\"}, {\"line_number\": 5, \"line_content\": \"        build_models(target_dir)\"}, {\"line_number\": 6, \"line_content\": \"    build_py.run(self)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebook/prophet\", \"direct_link_to_file_line\": \"https://github.com/facebook/prophet/blob/master/prophet/python/setup.py#L44\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run(self):\"}, {\"line_number\": 2, \"line_content\": \"    if not self.dry_run:\"}, {\"line_number\": 3, \"line_content\": \"        target_dir = os.path.join(self.setup_path, MODEL_TARGET_DIR)\"}, {\"line_number\": 4, \"line_content\": \"        self.mkpath(target_dir)\"}, {\"line_number\": 5, \"line_content\": \"        build_models(target_dir)\"}, {\"line_number\": 6, \"line_content\": \"    develop.run(self)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebook/prophet\", \"direct_link_to_file_line\": \"https://github.com/facebook/prophet/blob/master/prophet/python/setup.py#L74\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def initialize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    super(TestCommand, self).initialize_options()\"}, {\"line_number\": 3, \"line_content\": \"    self.test_slow = False\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebook/prophet\", \"direct_link_to_file_line\": \"https://github.com/facebook/prophet/blob/master/prophet/python/setup.py#L78\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def finalize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    super(TestCommand, self).finalize_options()\"}, {\"line_number\": 3, \"line_content\": \"    if self.test_slow is None:\"}, {\"line_number\": 4, \"line_content\": \"        self.test_slow = getattr(self.distribution, 'test_slow', False)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apachecn/AiLearning\", \"direct_link_to_file_line\": \"https://github.com/apachecn/AiLearning/blob/master/AiLearning/tool/DecisionTree_getInfoGain.py#L7\", \"contents\": {\"total_lines\": 20, \"lines\": [{\"line_number\": 1, \"line_content\": \"def calcShannonEnt(dataSet):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"calcShannonEnt(calculate Shannon entropy \\u8ba1\\u7b97label\\u5206\\u7c7b\\u6807\\u7b7e\\u7684\\u9999\\u519c\\u71b5)\"}, {\"line_number\": 3, \"line_content\": \"    Args:\"}, {\"line_number\": 4, \"line_content\": \"        dataSet \\u6570\\u636e\\u96c6\"}, {\"line_number\": 5, \"line_content\": \"    Returns:\"}, {\"line_number\": 6, \"line_content\": \"        \\u8fd4\\u56de\\u9999\\u519c\\u71b5\\u7684\\u8ba1\\u7b97\\u503c\"}, {\"line_number\": 7, \"line_content\": \"    Raises:\"}, {\"line_number\": 8, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 9, \"line_content\": \"    numEntries = len(dataSet)\"}, {\"line_number\": 10, \"line_content\": \"    labelCounts = {}\"}, {\"line_number\": 11, \"line_content\": \"    for featVec in dataSet:\"}, {\"line_number\": 12, \"line_content\": \"        currentLabel = featVec[-1]\"}, {\"line_number\": 13, \"line_content\": \"        if currentLabel not in labelCounts.keys():\"}, {\"line_number\": 14, \"line_content\": \"            labelCounts[currentLabel] = 0\"}, {\"line_number\": 15, \"line_content\": \"        labelCounts[currentLabel] += 1\"}, {\"line_number\": 16, \"line_content\": \"    shannonEnt = 0.0\"}, {\"line_number\": 17, \"line_content\": \"    for key in labelCounts:\"}, {\"line_number\": 18, \"line_content\": \"        prob = float(labelCounts[key]) / numEntries\"}, {\"line_number\": 19, \"line_content\": \"        shannonEnt -= prob * log(prob, 2)\"}, {\"line_number\": 20, \"line_content\": \"    return shannonEnt\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apachecn/AiLearning\", \"direct_link_to_file_line\": \"https://github.com/apachecn/AiLearning/blob/master/AiLearning/tool/DecisionTree_getInfoGain.py#L41\", \"contents\": {\"total_lines\": 20, \"lines\": [{\"line_number\": 1, \"line_content\": \"def splitDataSet(dataSet, axis, value):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"splitDataSet(\\u901a\\u8fc7\\u904d\\u5386dataSet\\u6570\\u636e\\u96c6\\uff0c\\u6c42\\u51faaxis\\u5bf9\\u5e94\\u7684colnum\\u5217\\u7684\\u503c\\u4e3avalue\\u7684\\u884c)\"}, {\"line_number\": 3, \"line_content\": \"    Args:\"}, {\"line_number\": 4, \"line_content\": \"        dataSet \\u6570\\u636e\\u96c6\"}, {\"line_number\": 5, \"line_content\": \"        axis \\u8868\\u793a\\u6bcf\\u4e00\\u884c\\u7684axis\\u5217\"}, {\"line_number\": 6, \"line_content\": \"        value \\u8868\\u793aaxis\\u5217\\u5bf9\\u5e94\\u7684value\\u503c\"}, {\"line_number\": 7, \"line_content\": \"    Returns:\"}, {\"line_number\": 8, \"line_content\": \"        axis\\u5217\\u4e3avalue\\u7684\\u6570\\u636e\\u96c6\\u3010\\u8be5\\u6570\\u636e\\u96c6\\u9700\\u8981\\u6392\\u9664axis\\u5217\\u3011\"}, {\"line_number\": 9, \"line_content\": \"    Raises:\"}, {\"line_number\": 10, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 11, \"line_content\": \"    retDataSet = []\"}, {\"line_number\": 12, \"line_content\": \"    for featVec in dataSet:\"}, {\"line_number\": 13, \"line_content\": \"        if featVec[axis] == value:\"}, {\"line_number\": 14, \"line_content\": \"            reducedFeatVec = featVec[:axis]\"}, {\"line_number\": 15, \"line_content\": \"            \\\"\\\"\\\"\"}, {\"line_number\": 16, \"line_content\": \"            \\u8bf7\\u767e\\u5ea6\\u67e5\\u8be2\\u4e00\\u4e0b:  extend\\u548cappend\\u7684\\u533a\\u522b\"}, {\"line_number\": 17, \"line_content\": \"            \\\"\\\"\\\"\"}, {\"line_number\": 18, \"line_content\": \"            reducedFeatVec.extend(featVec[axis + 1:])\"}, {\"line_number\": 19, \"line_content\": \"            retDataSet.append(reducedFeatVec)\"}, {\"line_number\": 20, \"line_content\": \"    return retDataSet\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apachecn/AiLearning\", \"direct_link_to_file_line\": \"https://github.com/apachecn/AiLearning/blob/master/AiLearning/tool/DecisionTree_getInfoGain.py#L68\", \"contents\": {\"total_lines\": 28, \"lines\": [{\"line_number\": 1, \"line_content\": \"def getFeatureShannonEnt(dataSet, labels):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"chooseBestFeatureToSplit(\\u9009\\u62e9\\u6700\\u597d\\u7684\\u7279\\u5f81)\"}, {\"line_number\": 3, \"line_content\": \"    Args:\"}, {\"line_number\": 4, \"line_content\": \"        dataSet \\u6570\\u636e\\u96c6\"}, {\"line_number\": 5, \"line_content\": \"    Returns:\"}, {\"line_number\": 6, \"line_content\": \"        bestFeature \\u6700\\u4f18\\u7684\\u7279\\u5f81\\u5217\"}, {\"line_number\": 7, \"line_content\": \"    Raises:\"}, {\"line_number\": 8, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 9, \"line_content\": \"    numFeatures = len(dataSet[0]) - 1\"}, {\"line_number\": 10, \"line_content\": \"    baseEntropy = calcShannonEnt(dataSet)\"}, {\"line_number\": 11, \"line_content\": \"    bestInfoGain, bestFeature, endEntropy = 0.0, -1, 0.0\"}, {\"line_number\": 12, \"line_content\": \"    for i in range(numFeatures):\"}, {\"line_number\": 13, \"line_content\": \"        featList = [example[i] for example in dataSet]\"}, {\"line_number\": 14, \"line_content\": \"        uniqueVals = set(featList)\"}, {\"line_number\": 15, \"line_content\": \"        newEntropy = 0.0\"}, {\"line_number\": 16, \"line_content\": \"        for value in uniqueVals:\"}, {\"line_number\": 17, \"line_content\": \"            subDataSet = splitDataSet(dataSet, i, value)\"}, {\"line_number\": 18, \"line_content\": \"            prob = len(subDataSet) / float(len(dataSet))\"}, {\"line_number\": 19, \"line_content\": \"            newEntropy += prob * calcShannonEnt(subDataSet)\"}, {\"line_number\": 20, \"line_content\": \"        infoGain = baseEntropy - newEntropy\"}, {\"line_number\": 21, \"line_content\": \"        if infoGain > bestInfoGain:\"}, {\"line_number\": 22, \"line_content\": \"            endEntropy = newEntropy\"}, {\"line_number\": 23, \"line_content\": \"            bestInfoGain = infoGain\"}, {\"line_number\": 24, \"line_content\": \"            bestFeature = i\"}, {\"line_number\": 25, \"line_content\": \"    else:\"}, {\"line_number\": 26, \"line_content\": \"        if numFeatures < 0:\"}, {\"line_number\": 27, \"line_content\": \"            labels[bestFeature] = 'null'\"}, {\"line_number\": 28, \"line_content\": \"    return labels[bestFeature], baseEntropy, endEntropy, bestInfoGain\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apachecn/AiLearning\", \"direct_link_to_file_line\": \"https://github.com/apachecn/AiLearning/blob/master/AiLearning/tool/python2libsvm.py#L9\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_data(file_input, separator='\\\\t'):\"}, {\"line_number\": 2, \"line_content\": \"    if 'libsvm' not in file_input:\"}, {\"line_number\": 3, \"line_content\": \"        file_input = other2libsvm(file_input, separator)\"}, {\"line_number\": 4, \"line_content\": \"    data = datasets.load_svmlight_file(file_input)\"}, {\"line_number\": 5, \"line_content\": \"    return data[0], data[1]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apachecn/AiLearning\", \"direct_link_to_file_line\": \"https://github.com/apachecn/AiLearning/blob/master/AiLearning/tool/python2libsvm.py#L16\", \"contents\": {\"total_lines\": 15, \"lines\": [{\"line_number\": 1, \"line_content\": \"def other2libsvm(file_name, separator='\\\\t'):\"}, {\"line_number\": 2, \"line_content\": \"    libsvm_name = file_name.replace('.txt', '.libsvm_tmp')\"}, {\"line_number\": 3, \"line_content\": \"    libsvm_data = open(libsvm_name, 'w')\"}, {\"line_number\": 4, \"line_content\": \"    file_data = open(file_name, 'r')\"}, {\"line_number\": 5, \"line_content\": \"    for line in file_data.readlines():\"}, {\"line_number\": 6, \"line_content\": \"        features = line.strip().split(separator)\"}, {\"line_number\": 7, \"line_content\": \"        class_data = features[-1]\"}, {\"line_number\": 8, \"line_content\": \"        svm_format = ''\"}, {\"line_number\": 9, \"line_content\": \"        for i in range(len(features) - 1):\"}, {\"line_number\": 10, \"line_content\": \"            svm_format += ' %d:%s' % (i + 1, features[i])\"}, {\"line_number\": 11, \"line_content\": \"        svm_format = '%s%s\\\\n' % (class_data, svm_format)\"}, {\"line_number\": 12, \"line_content\": \"        libsvm_data.write(svm_format)\"}, {\"line_number\": 13, \"line_content\": \"    file_data.close()\"}, {\"line_number\": 14, \"line_content\": \"    libsvm_data.close()\"}, {\"line_number\": 15, \"line_content\": \"    return libsvm_name\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chriskiehl/Gooey\", \"direct_link_to_file_line\": \"https://github.com/chriskiehl/Gooey/blob/master/Gooey/gooey/util/functional.py#L9\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def getin(m, path, default=None):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"returns the value in a nested dict\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    keynotfound = ':com.gooey-project/not-found'\"}, {\"line_number\": 4, \"line_content\": \"    result = reduce(lambda acc, val: acc.get(val, {keynotfound: None}), path, m\"}, {\"line_number\": 5, \"line_content\": \"        )\"}, {\"line_number\": 6, \"line_content\": \"    if isinstance(result, dict) and keynotfound in result:\"}, {\"line_number\": 7, \"line_content\": \"        return default\"}, {\"line_number\": 8, \"line_content\": \"    return result\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chriskiehl/Gooey\", \"direct_link_to_file_line\": \"https://github.com/chriskiehl/Gooey/blob/master/Gooey/gooey/util/functional.py#L20\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def assoc(m, key, val):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Copy-on-write associates a value in a dict\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    cpy = deepcopy(m)\"}, {\"line_number\": 4, \"line_content\": \"    cpy[key] = val\"}, {\"line_number\": 5, \"line_content\": \"    return cpy\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chriskiehl/Gooey\", \"direct_link_to_file_line\": \"https://github.com/chriskiehl/Gooey/blob/master/Gooey/gooey/util/functional.py#L27\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def associn(m, path, value):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Copy-on-write associates a value in a nested dict \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    def assoc_recursively(m, path, value):\"}, {\"line_number\": 4, \"line_content\": \"        if not path:\"}, {\"line_number\": 5, \"line_content\": \"            return value\"}, {\"line_number\": 6, \"line_content\": \"        p = path[0]\"}, {\"line_number\": 7, \"line_content\": \"        return assoc(m, p, assoc_recursively(m.get(p, {}), path[1:], value))\"}, {\"line_number\": 8, \"line_content\": \"    return assoc_recursively(m, path, value)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chriskiehl/Gooey\", \"direct_link_to_file_line\": \"https://github.com/chriskiehl/Gooey/blob/master/Gooey/gooey/util/functional.py#L37\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def merge(*maps):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Merge all maps left to right\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    copies = map(deepcopy, maps)\"}, {\"line_number\": 4, \"line_content\": \"    return reduce(lambda acc, val: acc.update(val) or acc, copies)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chriskiehl/Gooey\", \"direct_link_to_file_line\": \"https://github.com/chriskiehl/Gooey/blob/master/Gooey/gooey/util/functional.py#L43\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def flatmap(f, coll):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Applies concat to the result of applying f to colls\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    return list(chain(*map(f, coll)))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/521xueweihan/HelloGitHub\", \"direct_link_to_file_line\": \"https://github.com/521xueweihan/HelloGitHub/blob/master/HelloGitHub/script/make_content/make_content.py#L33\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def check_path(path):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    \\u68c0\\u67e5\\u8def\\u5f84\\u662f\\u5426\\u5b58\\u5728\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    if not os.path.exists(path):\"}, {\"line_number\": 6, \"line_content\": \"        print('not exist: {path}'.format(path=path))\"}, {\"line_number\": 7, \"line_content\": \"        return False\"}, {\"line_number\": 8, \"line_content\": \"    else:\"}, {\"line_number\": 9, \"line_content\": \"        return True\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/521xueweihan/HelloGitHub\", \"direct_link_to_file_line\": \"https://github.com/521xueweihan/HelloGitHub/blob/master/HelloGitHub/script/make_content/make_content.py#L44\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def read_file(input_path):\"}, {\"line_number\": 2, \"line_content\": \"    with open(input_path, 'r') as fb:\"}, {\"line_number\": 3, \"line_content\": \"        return fb.read()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/521xueweihan/HelloGitHub\", \"direct_link_to_file_line\": \"https://github.com/521xueweihan/HelloGitHub/blob/master/HelloGitHub/script/make_content/make_content.py#L49\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def write_file(output_path, output_data):\"}, {\"line_number\": 2, \"line_content\": \"    with open(output_path, 'w') as fb:\"}, {\"line_number\": 3, \"line_content\": \"        fb.write(output_data)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/521xueweihan/HelloGitHub\", \"direct_link_to_file_line\": \"https://github.com/521xueweihan/HelloGitHub/blob/master/HelloGitHub/script/make_content/make_content.py#L54\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def make_content(num):\"}, {\"line_number\": 2, \"line_content\": \"    template_path = os.path.join(os.path.abspath(os.curdir), 'template.md')\"}, {\"line_number\": 3, \"line_content\": \"    output_path = os.path.join(os.path.abspath(os.curdir), num)\"}, {\"line_number\": 4, \"line_content\": \"    content_path = os.path.join(output_path, 'content' + num + '.md')\"}, {\"line_number\": 5, \"line_content\": \"    if not (check_path(content_path) and check_path(template_path)):\"}, {\"line_number\": 6, \"line_content\": \"        return None\"}, {\"line_number\": 7, \"line_content\": \"    temple_data = read_file(template_path).replace(NUM_FLAG, num)\"}, {\"line_number\": 8, \"line_content\": \"    content_data = read_file(content_path)\"}, {\"line_number\": 9, \"line_content\": \"    output_data = temple_data.replace(CONTENT_FLAG, content_data)\"}, {\"line_number\": 10, \"line_content\": \"    write_file(os.path.join(output_path, 'HelloGitHub{num}.md'.format(num=\"}, {\"line_number\": 11, \"line_content\": \"        num)), output_data)\"}, {\"line_number\": 12, \"line_content\": \"    print('Make \\u300aGitHub\\u6708\\u520a{num}\\u300b successful\\uff01'.format(num=num))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/521xueweihan/HelloGitHub\", \"direct_link_to_file_line\": \"https://github.com/521xueweihan/HelloGitHub/blob/master/HelloGitHub/script/make_content/make_content.py#L71\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def make_all_content():\"}, {\"line_number\": 2, \"line_content\": \"    dir_list = os.listdir(os.path.abspath(os.curdir))\"}, {\"line_number\": 3, \"line_content\": \"    for fi_dir in dir_list:\"}, {\"line_number\": 4, \"line_content\": \"        if os.path.isdir(fi_dir) and 'script' not in fi_dir:\"}, {\"line_number\": 5, \"line_content\": \"            make_content(fi_dir)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/django/django\", \"direct_link_to_file_line\": \"https://github.com/django/django/blob/master/django/scripts/manage_translations.py#L32\", \"contents\": {\"total_lines\": 26, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _get_locale_dirs(resources, include_core=True):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Return a tuple (contrib name, absolute path) for all locale directories,\"}, {\"line_number\": 4, \"line_content\": \"    optionally including the django core catalog.\"}, {\"line_number\": 5, \"line_content\": \"    If resources list is not None, filter directories matching resources content.\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    contrib_dir = os.path.join(os.getcwd(), 'django', 'contrib')\"}, {\"line_number\": 8, \"line_content\": \"    dirs = []\"}, {\"line_number\": 9, \"line_content\": \"    for contrib_name in os.listdir(contrib_dir):\"}, {\"line_number\": 10, \"line_content\": \"        path = os.path.join(contrib_dir, contrib_name, 'locale')\"}, {\"line_number\": 11, \"line_content\": \"        if os.path.isdir(path):\"}, {\"line_number\": 12, \"line_content\": \"            dirs.append((contrib_name, path))\"}, {\"line_number\": 13, \"line_content\": \"            if contrib_name in HAVE_JS:\"}, {\"line_number\": 14, \"line_content\": \"                dirs.append(('%s-js' % contrib_name, path))\"}, {\"line_number\": 15, \"line_content\": \"    if include_core:\"}, {\"line_number\": 16, \"line_content\": \"        dirs.insert(0, ('core', os.path.join(os.getcwd(), 'django', 'conf',\"}, {\"line_number\": 17, \"line_content\": \"            'locale')))\"}, {\"line_number\": 18, \"line_content\": \"    if resources is not None:\"}, {\"line_number\": 19, \"line_content\": \"        res_names = [d[0] for d in dirs]\"}, {\"line_number\": 20, \"line_content\": \"        dirs = [ld for ld in dirs if ld[0] in resources]\"}, {\"line_number\": 21, \"line_content\": \"        if len(resources) > len(dirs):\"}, {\"line_number\": 22, \"line_content\": \"            print(\"}, {\"line_number\": 23, \"line_content\": \"                'You have specified some unknown resources. Available resource names are: %s'\"}, {\"line_number\": 24, \"line_content\": \"                 % (', '.join(res_names),))\"}, {\"line_number\": 25, \"line_content\": \"            exit(1)\"}, {\"line_number\": 26, \"line_content\": \"    return dirs\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/django/django\", \"direct_link_to_file_line\": \"https://github.com/django/django/blob/master/django/scripts/manage_translations.py#L62\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _tx_resource_for_name(name):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Return the Transifex resource name \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    if name == 'core':\"}, {\"line_number\": 4, \"line_content\": \"        return 'django.core'\"}, {\"line_number\": 5, \"line_content\": \"    else:\"}, {\"line_number\": 6, \"line_content\": \"        return 'django.contrib-%s' % name\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/django/django\", \"direct_link_to_file_line\": \"https://github.com/django/django/blob/master/django/scripts/manage_translations.py#L70\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _check_diff(cat_name, base_path):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Output the approximate number of changed/added strings in the en catalog.\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    po_path = '%(path)s/en/LC_MESSAGES/django%(ext)s.po' % {'path':\"}, {\"line_number\": 6, \"line_content\": \"        base_path, 'ext': 'js' if cat_name.endswith('-js') else ''}\"}, {\"line_number\": 7, \"line_content\": \"    p = run(\\\"git diff -U0 %s | egrep '^[-+]msgid' | wc -l\\\" % po_path,\"}, {\"line_number\": 8, \"line_content\": \"        stdout=PIPE, stderr=PIPE, shell=True)\"}, {\"line_number\": 9, \"line_content\": \"    num_changes = int(p.stdout.strip())\"}, {\"line_number\": 10, \"line_content\": \"    print(\\\"%d changed/added messages in '%s' catalog.\\\" % (num_changes,\"}, {\"line_number\": 11, \"line_content\": \"        cat_name))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/django/django\", \"direct_link_to_file_line\": \"https://github.com/django/django/blob/master/django/scripts/manage_translations.py#L82\", \"contents\": {\"total_lines\": 18, \"lines\": [{\"line_number\": 1, \"line_content\": \"def update_catalogs(resources=None, languages=None):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Update the en/LC_MESSAGES/django.po (main and contrib) files with\"}, {\"line_number\": 4, \"line_content\": \"    new/updated translatable strings.\"}, {\"line_number\": 5, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    settings.configure()\"}, {\"line_number\": 7, \"line_content\": \"    django.setup()\"}, {\"line_number\": 8, \"line_content\": \"    if resources is not None:\"}, {\"line_number\": 9, \"line_content\": \"        print('`update_catalogs` will always process all resources.')\"}, {\"line_number\": 10, \"line_content\": \"    contrib_dirs = _get_locale_dirs(None, include_core=False)\"}, {\"line_number\": 11, \"line_content\": \"    os.chdir(os.path.join(os.getcwd(), 'django'))\"}, {\"line_number\": 12, \"line_content\": \"    print('Updating en catalogs for Django and contrib apps...')\"}, {\"line_number\": 13, \"line_content\": \"    call_command('makemessages', locale=['en'])\"}, {\"line_number\": 14, \"line_content\": \"    print('Updating en JS catalogs for Django and contrib apps...')\"}, {\"line_number\": 15, \"line_content\": \"    call_command('makemessages', locale=['en'], domain='djangojs')\"}, {\"line_number\": 16, \"line_content\": \"    _check_diff('core', os.path.join(os.getcwd(), 'conf', 'locale'))\"}, {\"line_number\": 17, \"line_content\": \"    for name, dir_ in contrib_dirs:\"}, {\"line_number\": 18, \"line_content\": \"        _check_diff(name, dir_)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/django/django\", \"direct_link_to_file_line\": \"https://github.com/django/django/blob/master/django/scripts/manage_translations.py#L105\", \"contents\": {\"total_lines\": 24, \"lines\": [{\"line_number\": 1, \"line_content\": \"def lang_stats(resources=None, languages=None):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Output language statistics of committed translation files for each\"}, {\"line_number\": 4, \"line_content\": \"    Django catalog.\"}, {\"line_number\": 5, \"line_content\": \"    If resources is provided, it should be a list of translation resource to\"}, {\"line_number\": 6, \"line_content\": \"    limit the output (e.g. ['core', 'gis']).\"}, {\"line_number\": 7, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 8, \"line_content\": \"    locale_dirs = _get_locale_dirs(resources)\"}, {\"line_number\": 9, \"line_content\": \"    for name, dir_ in locale_dirs:\"}, {\"line_number\": 10, \"line_content\": \"        print(\\\"\\\\nShowing translations stats for '%s':\\\" % name)\"}, {\"line_number\": 11, \"line_content\": \"        langs = sorted(d for d in os.listdir(dir_) if not d.startswith('_'))\"}, {\"line_number\": 12, \"line_content\": \"        for lang in langs:\"}, {\"line_number\": 13, \"line_content\": \"            if languages and lang not in languages:\"}, {\"line_number\": 14, \"line_content\": \"                continue\"}, {\"line_number\": 15, \"line_content\": \"            po_path = '{path}/{lang}/LC_MESSAGES/django{ext}.po'.format(path\"}, {\"line_number\": 16, \"line_content\": \"                =dir_, lang=lang, ext='js' if name.endswith('-js') else '')\"}, {\"line_number\": 17, \"line_content\": \"            p = run(['msgfmt', '-vc', '-o', '/dev/null', po_path], stdout=\"}, {\"line_number\": 18, \"line_content\": \"                PIPE, stderr=PIPE, env={'LANG': 'C'}, encoding='utf-8')\"}, {\"line_number\": 19, \"line_content\": \"            if p.returncode == 0:\"}, {\"line_number\": 20, \"line_content\": \"                print('%s: %s' % (lang, p.stderr.strip()))\"}, {\"line_number\": 21, \"line_content\": \"            else:\"}, {\"line_number\": 22, \"line_content\": \"                print(\"}, {\"line_number\": 23, \"line_content\": \"                    'Errors happened when checking %s translation for %s:\\\\n%s'\"}, {\"line_number\": 24, \"line_content\": \"                     % (lang, name, p.stderr))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/google/jax\", \"direct_link_to_file_line\": \"https://github.com/google/jax/blob/master/jax/jaxlib/cuda_prng.py#L34\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _unpack_builder(c):\"}, {\"line_number\": 2, \"line_content\": \"    return getattr(c, '_builder', c)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/google/jax\", \"direct_link_to_file_line\": \"https://github.com/google/jax/blob/master/jax/jaxlib/cuda_prng.py#L38\", \"contents\": {\"total_lines\": 19, \"lines\": [{\"line_number\": 1, \"line_content\": \"def threefry2x32(c, keys, data):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"ThreeFry2x32 kernel for GPU.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    c = _unpack_builder(c)\"}, {\"line_number\": 4, \"line_content\": \"    assert len(keys) == 2, keys\"}, {\"line_number\": 5, \"line_content\": \"    assert len(data) == 2, data\"}, {\"line_number\": 6, \"line_content\": \"    dims = c.get_shape(keys[0]).dimensions()\"}, {\"line_number\": 7, \"line_content\": \"    dtype = np.dtype(np.uint32)\"}, {\"line_number\": 8, \"line_content\": \"    for x in itertools.chain(keys, data):\"}, {\"line_number\": 9, \"line_content\": \"        x_shape = c.get_shape(x)\"}, {\"line_number\": 10, \"line_content\": \"        assert x_shape.element_type() == dtype\"}, {\"line_number\": 11, \"line_content\": \"        assert dims == x_shape.dimensions(), (dims, x_shape)\"}, {\"line_number\": 12, \"line_content\": \"    ndims = len(dims)\"}, {\"line_number\": 13, \"line_content\": \"    opaque = cuda_prng_kernels.cuda_threefry2x32_descriptor(_prod(dims))\"}, {\"line_number\": 14, \"line_content\": \"    layout = tuple(range(ndims - 1, -1, -1))\"}, {\"line_number\": 15, \"line_content\": \"    shape = xla_client.Shape.array_shape(dtype, dims, layout)\"}, {\"line_number\": 16, \"line_content\": \"    return xla_client.ops.CustomCallWithLayout(c, b'cuda_threefry2x32',\"}, {\"line_number\": 17, \"line_content\": \"        operands=(keys[0], keys[1], data[0], data[1]), shape_with_layout=\"}, {\"line_number\": 18, \"line_content\": \"        xla_client.Shape.tuple_shape([shape, shape]),\"}, {\"line_number\": 19, \"line_content\": \"        operand_shapes_with_layout=(shape,) * 4, opaque=opaque)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/google/jax\", \"direct_link_to_file_line\": \"https://github.com/google/jax/blob/master/jax/jaxlib/cusolver.py#L41\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _unpack_builder(c):\"}, {\"line_number\": 2, \"line_content\": \"    return getattr(c, '_builder', c)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/google/jax\", \"direct_link_to_file_line\": \"https://github.com/google/jax/blob/master/jax/jaxlib/cusolver.py#L45\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _real_type(dtype):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Returns the real equivalent of 'dtype'.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    if dtype == np.float32:\"}, {\"line_number\": 4, \"line_content\": \"        return np.float32\"}, {\"line_number\": 5, \"line_content\": \"    elif dtype == np.float64:\"}, {\"line_number\": 6, \"line_content\": \"        return np.float64\"}, {\"line_number\": 7, \"line_content\": \"    elif dtype == np.complex64:\"}, {\"line_number\": 8, \"line_content\": \"        return np.float32\"}, {\"line_number\": 9, \"line_content\": \"    elif dtype == np.complex128:\"}, {\"line_number\": 10, \"line_content\": \"        return np.float64\"}, {\"line_number\": 11, \"line_content\": \"    else:\"}, {\"line_number\": 12, \"line_content\": \"        raise NotImplementedError('Unsupported dtype {}'.format(dtype))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/google/jax\", \"direct_link_to_file_line\": \"https://github.com/google/jax/blob/master/jax/jaxlib/cusolver.py#L60\", \"contents\": {\"total_lines\": 34, \"lines\": [{\"line_number\": 1, \"line_content\": \"def trsm(c, a, b, left_side=False, lower=False, trans_a=False, conj_a=False,\"}, {\"line_number\": 2, \"line_content\": \"    diag=False):\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Batched triangular solve.\"}, {\"line_number\": 4, \"line_content\": \"  XLA implements unbatched triangular solve directly, so we need only implement\"}, {\"line_number\": 5, \"line_content\": \"  the batched case.\\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    c = _unpack_builder(c)\"}, {\"line_number\": 7, \"line_content\": \"    b_shape = c.get_shape(b)\"}, {\"line_number\": 8, \"line_content\": \"    dtype = b_shape.element_type()\"}, {\"line_number\": 9, \"line_content\": \"    dims = b_shape.dimensions()\"}, {\"line_number\": 10, \"line_content\": \"    assert len(dims) >= 2\"}, {\"line_number\": 11, \"line_content\": \"    m, n = dims[-2:]\"}, {\"line_number\": 12, \"line_content\": \"    batch_dims = tuple(dims[:-2])\"}, {\"line_number\": 13, \"line_content\": \"    num_bd = len(batch_dims)\"}, {\"line_number\": 14, \"line_content\": \"    batch = _prod(batch_dims)\"}, {\"line_number\": 15, \"line_content\": \"    k = m if left_side else n\"}, {\"line_number\": 16, \"line_content\": \"    a_shape = c.get_shape(a)\"}, {\"line_number\": 17, \"line_content\": \"    if batch_dims + (k, k) != a_shape.dimensions() or a_shape.element_type(\"}, {\"line_number\": 18, \"line_content\": \"        ) != dtype:\"}, {\"line_number\": 19, \"line_content\": \"        raise ValueError('Argument mismatch for trsm, got {} and {}'.format\"}, {\"line_number\": 20, \"line_content\": \"            (a_shape, b_shape))\"}, {\"line_number\": 21, \"line_content\": \"    if conj_a and not trans_a:\"}, {\"line_number\": 22, \"line_content\": \"        raise NotImplementedError(\"}, {\"line_number\": 23, \"line_content\": \"            'Conjugation without transposition not supported')\"}, {\"line_number\": 24, \"line_content\": \"    lwork, opaque = cublas_kernels.build_trsm_batched_descriptor(np.dtype(\"}, {\"line_number\": 25, \"line_content\": \"        dtype), batch, m, n, left_side, lower, trans_a, conj_a, diag)\"}, {\"line_number\": 26, \"line_content\": \"    layout = (num_bd, num_bd + 1) + tuple(range(num_bd - 1, -1, -1))\"}, {\"line_number\": 27, \"line_content\": \"    out = _ops.CustomCallWithLayout(c, b'cublas_trsm_batched', operands=(a,\"}, {\"line_number\": 28, \"line_content\": \"        b), shape_with_layout=_Shape.tuple_shape((_Shape.array_shape(dtype,\"}, {\"line_number\": 29, \"line_content\": \"        b_shape.dimensions(), layout), _Shape.array_shape(np.dtype(np.int8),\"}, {\"line_number\": 30, \"line_content\": \"        (lwork,), (0,)), _Shape.array_shape(np.dtype(np.int8), (lwork,), (0\"}, {\"line_number\": 31, \"line_content\": \"        ,)))), operand_shapes_with_layout=(_Shape.array_shape(dtype,\"}, {\"line_number\": 32, \"line_content\": \"        a_shape.dimensions(), layout), _Shape.array_shape(dtype, b_shape.\"}, {\"line_number\": 33, \"line_content\": \"        dimensions(), layout)), opaque=opaque)\"}, {\"line_number\": 34, \"line_content\": \"    return _ops.GetTupleElement(out, 0)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/requests-html\", \"direct_link_to_file_line\": \"https://github.com/psf/requests-html/blob/master/requests-html/requests_html.py#L744\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _get_first_or_list(l, first=False):\"}, {\"line_number\": 2, \"line_content\": \"    if first:\"}, {\"line_number\": 3, \"line_content\": \"        try:\"}, {\"line_number\": 4, \"line_content\": \"            return l[0]\"}, {\"line_number\": 5, \"line_content\": \"        except IndexError:\"}, {\"line_number\": 6, \"line_content\": \"            return None\"}, {\"line_number\": 7, \"line_content\": \"    else:\"}, {\"line_number\": 8, \"line_content\": \"        return l\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/requests-html\", \"direct_link_to_file_line\": \"https://github.com/psf/requests-html/blob/master/requests-html/requests_html.py#L66\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, message):\"}, {\"line_number\": 2, \"line_content\": \"    self.message = message\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/requests-html\", \"direct_link_to_file_line\": \"https://github.com/psf/requests-html/blob/master/requests-html/requests_html.py#L90\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"@property\"}, {\"line_number\": 2, \"line_content\": \"def raw_html(self) ->_RawHTML:\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Bytes representation of the HTML content.\"}, {\"line_number\": 4, \"line_content\": \"        (`learn more <http://www.diveintopython3.net/strings.html>`_).\"}, {\"line_number\": 5, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    if self._html:\"}, {\"line_number\": 7, \"line_content\": \"        return self._html\"}, {\"line_number\": 8, \"line_content\": \"    else:\"}, {\"line_number\": 9, \"line_content\": \"        return etree.tostring(self.element, encoding='unicode').strip().encode(\"}, {\"line_number\": 10, \"line_content\": \"            self.encoding)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/requests-html\", \"direct_link_to_file_line\": \"https://github.com/psf/requests-html/blob/master/requests-html/requests_html.py#L90\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"@property\"}, {\"line_number\": 2, \"line_content\": \"def html(self) ->_BaseHTML:\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Unicode representation of the HTML content\"}, {\"line_number\": 4, \"line_content\": \"        (`learn more <http://www.diveintopython3.net/strings.html>`_).\"}, {\"line_number\": 5, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    if self._html:\"}, {\"line_number\": 7, \"line_content\": \"        return self.raw_html.decode(self.encoding, errors='replace')\"}, {\"line_number\": 8, \"line_content\": \"    else:\"}, {\"line_number\": 9, \"line_content\": \"        return etree.tostring(self.element, encoding='unicode').strip()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/requests-html\", \"direct_link_to_file_line\": \"https://github.com/psf/requests-html/blob/master/requests-html/requests_html.py#L110\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"@html.setter\"}, {\"line_number\": 2, \"line_content\": \"def html(self, html: str) ->None:\"}, {\"line_number\": 3, \"line_content\": \"    self._html = html.encode(self.encoding)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/warner/magic-wormhole\", \"direct_link_to_file_line\": \"https://github.com/warner/magic-wormhole/blob/master/magic-wormhole/versioneer.py#L296\", \"contents\": {\"total_lines\": 27, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_root():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Get the project root directory.\"}, {\"line_number\": 3, \"line_content\": \"    We require that all commands are run from the project root, i.e. the\"}, {\"line_number\": 4, \"line_content\": \"    directory that contains setup.py, setup.cfg, and versioneer.py .\"}, {\"line_number\": 5, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    root = os.path.realpath(os.path.abspath(os.getcwd()))\"}, {\"line_number\": 7, \"line_content\": \"    setup_py = os.path.join(root, 'setup.py')\"}, {\"line_number\": 8, \"line_content\": \"    versioneer_py = os.path.join(root, 'versioneer.py')\"}, {\"line_number\": 9, \"line_content\": \"    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\"}, {\"line_number\": 10, \"line_content\": \"        root = os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))\"}, {\"line_number\": 11, \"line_content\": \"        setup_py = os.path.join(root, 'setup.py')\"}, {\"line_number\": 12, \"line_content\": \"        versioneer_py = os.path.join(root, 'versioneer.py')\"}, {\"line_number\": 13, \"line_content\": \"    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\"}, {\"line_number\": 14, \"line_content\": \"        err = (\"}, {\"line_number\": 15, \"line_content\": \"            \\\"Versioneer was unable to run the project root directory. Versioneer requires setup.py to be executed from its immediate directory (like 'python setup.py COMMAND'), or in a way that lets it use sys.argv[0] to find the root (like 'python path/to/setup.py COMMAND').\\\"\"}, {\"line_number\": 16, \"line_content\": \"            )\"}, {\"line_number\": 17, \"line_content\": \"        raise VersioneerBadRootError(err)\"}, {\"line_number\": 18, \"line_content\": \"    try:\"}, {\"line_number\": 19, \"line_content\": \"        me = os.path.realpath(os.path.abspath(__file__))\"}, {\"line_number\": 20, \"line_content\": \"        me_dir = os.path.normcase(os.path.splitext(me)[0])\"}, {\"line_number\": 21, \"line_content\": \"        vsr_dir = os.path.normcase(os.path.splitext(versioneer_py)[0])\"}, {\"line_number\": 22, \"line_content\": \"        if me_dir != vsr_dir:\"}, {\"line_number\": 23, \"line_content\": \"            print('Warning: build in %s is using versioneer.py from %s' % (\"}, {\"line_number\": 24, \"line_content\": \"                os.path.dirname(me), versioneer_py))\"}, {\"line_number\": 25, \"line_content\": \"    except NameError:\"}, {\"line_number\": 26, \"line_content\": \"        pass\"}, {\"line_number\": 27, \"line_content\": \"    return root\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/warner/magic-wormhole\", \"direct_link_to_file_line\": \"https://github.com/warner/magic-wormhole/blob/master/magic-wormhole/versioneer.py#L335\", \"contents\": {\"total_lines\": 22, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_config_from_root(root):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Read the project setup.cfg file to determine Versioneer config.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    setup_cfg = os.path.join(root, 'setup.cfg')\"}, {\"line_number\": 4, \"line_content\": \"    parser = configparser.SafeConfigParser()\"}, {\"line_number\": 5, \"line_content\": \"    with open(setup_cfg, 'r') as f:\"}, {\"line_number\": 6, \"line_content\": \"        parser.readfp(f)\"}, {\"line_number\": 7, \"line_content\": \"    VCS = parser.get('versioneer', 'VCS')\"}, {\"line_number\": 8, \"line_content\": \"    def get(parser, name):\"}, {\"line_number\": 9, \"line_content\": \"        if parser.has_option('versioneer', name):\"}, {\"line_number\": 10, \"line_content\": \"            return parser.get('versioneer', name)\"}, {\"line_number\": 11, \"line_content\": \"        return None\"}, {\"line_number\": 12, \"line_content\": \"    cfg = VersioneerConfig()\"}, {\"line_number\": 13, \"line_content\": \"    cfg.VCS = VCS\"}, {\"line_number\": 14, \"line_content\": \"    cfg.style = get(parser, 'style') or ''\"}, {\"line_number\": 15, \"line_content\": \"    cfg.versionfile_source = get(parser, 'versionfile_source')\"}, {\"line_number\": 16, \"line_content\": \"    cfg.versionfile_build = get(parser, 'versionfile_build')\"}, {\"line_number\": 17, \"line_content\": \"    cfg.tag_prefix = get(parser, 'tag_prefix')\"}, {\"line_number\": 18, \"line_content\": \"    if cfg.tag_prefix in (\\\"''\\\", '\\\"\\\"'):\"}, {\"line_number\": 19, \"line_content\": \"        cfg.tag_prefix = ''\"}, {\"line_number\": 20, \"line_content\": \"    cfg.parentdir_prefix = get(parser, 'parentdir_prefix')\"}, {\"line_number\": 21, \"line_content\": \"    cfg.verbose = get(parser, 'verbose')\"}, {\"line_number\": 22, \"line_content\": \"    return cfg\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/warner/magic-wormhole\", \"direct_link_to_file_line\": \"https://github.com/warner/magic-wormhole/blob/master/magic-wormhole/versioneer.py#L384\", \"contents\": {\"total_lines\": 33, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\"}, {\"line_number\": 2, \"line_content\": \"    env=None):\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Call the given command(s).\\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    assert isinstance(commands, list)\"}, {\"line_number\": 5, \"line_content\": \"    p = None\"}, {\"line_number\": 6, \"line_content\": \"    for c in commands:\"}, {\"line_number\": 7, \"line_content\": \"        try:\"}, {\"line_number\": 8, \"line_content\": \"            dispcmd = str([c] + args)\"}, {\"line_number\": 9, \"line_content\": \"            p = subprocess.Popen([c] + args, cwd=cwd, env=env, stdout=\"}, {\"line_number\": 10, \"line_content\": \"                subprocess.PIPE, stderr=subprocess.PIPE if hide_stderr else\"}, {\"line_number\": 11, \"line_content\": \"                None)\"}, {\"line_number\": 12, \"line_content\": \"            break\"}, {\"line_number\": 13, \"line_content\": \"        except EnvironmentError:\"}, {\"line_number\": 14, \"line_content\": \"            e = sys.exc_info()[1]\"}, {\"line_number\": 15, \"line_content\": \"            if e.errno == errno.ENOENT:\"}, {\"line_number\": 16, \"line_content\": \"                continue\"}, {\"line_number\": 17, \"line_content\": \"            if verbose:\"}, {\"line_number\": 18, \"line_content\": \"                print('unable to run %s' % dispcmd)\"}, {\"line_number\": 19, \"line_content\": \"                print(e)\"}, {\"line_number\": 20, \"line_content\": \"            return None, None\"}, {\"line_number\": 21, \"line_content\": \"    else:\"}, {\"line_number\": 22, \"line_content\": \"        if verbose:\"}, {\"line_number\": 23, \"line_content\": \"            print('unable to find command, tried %s' % (commands,))\"}, {\"line_number\": 24, \"line_content\": \"        return None, None\"}, {\"line_number\": 25, \"line_content\": \"    stdout = p.communicate()[0].strip()\"}, {\"line_number\": 26, \"line_content\": \"    if sys.version_info[0] >= 3:\"}, {\"line_number\": 27, \"line_content\": \"        stdout = stdout.decode()\"}, {\"line_number\": 28, \"line_content\": \"    if p.returncode != 0:\"}, {\"line_number\": 29, \"line_content\": \"        if verbose:\"}, {\"line_number\": 30, \"line_content\": \"            print('unable to run %s (error)' % dispcmd)\"}, {\"line_number\": 31, \"line_content\": \"            print('stdout was %s' % stdout)\"}, {\"line_number\": 32, \"line_content\": \"        return None, p.returncode\"}, {\"line_number\": 33, \"line_content\": \"    return stdout, p.returncode\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/warner/magic-wormhole\", \"direct_link_to_file_line\": \"https://github.com/warner/magic-wormhole/blob/master/magic-wormhole/versioneer.py#L552\", \"contents\": {\"total_lines\": 23, \"lines\": [{\"line_number\": 1, \"line_content\": \"@register_vcs_handler('git', 'get_keywords')\"}, {\"line_number\": 2, \"line_content\": \"def git_get_keywords(versionfile_abs):\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Extract version information from the given file.\\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    keywords = {}\"}, {\"line_number\": 5, \"line_content\": \"    try:\"}, {\"line_number\": 6, \"line_content\": \"        f = open(versionfile_abs, 'r')\"}, {\"line_number\": 7, \"line_content\": \"        for line in f.readlines():\"}, {\"line_number\": 8, \"line_content\": \"            if line.strip().startswith('git_refnames ='):\"}, {\"line_number\": 9, \"line_content\": \"                mo = re.search('=\\\\\\\\s*\\\"(.*)\\\"', line)\"}, {\"line_number\": 10, \"line_content\": \"                if mo:\"}, {\"line_number\": 11, \"line_content\": \"                    keywords['refnames'] = mo.group(1)\"}, {\"line_number\": 12, \"line_content\": \"            if line.strip().startswith('git_full ='):\"}, {\"line_number\": 13, \"line_content\": \"                mo = re.search('=\\\\\\\\s*\\\"(.*)\\\"', line)\"}, {\"line_number\": 14, \"line_content\": \"                if mo:\"}, {\"line_number\": 15, \"line_content\": \"                    keywords['full'] = mo.group(1)\"}, {\"line_number\": 16, \"line_content\": \"            if line.strip().startswith('git_date ='):\"}, {\"line_number\": 17, \"line_content\": \"                mo = re.search('=\\\\\\\\s*\\\"(.*)\\\"', line)\"}, {\"line_number\": 18, \"line_content\": \"                if mo:\"}, {\"line_number\": 19, \"line_content\": \"                    keywords['date'] = mo.group(1)\"}, {\"line_number\": 20, \"line_content\": \"        f.close()\"}, {\"line_number\": 21, \"line_content\": \"    except EnvironmentError:\"}, {\"line_number\": 22, \"line_content\": \"        pass\"}, {\"line_number\": 23, \"line_content\": \"    return keywords\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/warner/magic-wormhole\", \"direct_link_to_file_line\": \"https://github.com/warner/magic-wormhole/blob/master/magic-wormhole/versioneer.py#L581\", \"contents\": {\"total_lines\": 33, \"lines\": [{\"line_number\": 1, \"line_content\": \"@register_vcs_handler('git', 'keywords')\"}, {\"line_number\": 2, \"line_content\": \"def git_versions_from_keywords(keywords, tag_prefix, verbose):\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Get version information from git keywords.\\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    if not keywords:\"}, {\"line_number\": 5, \"line_content\": \"        raise NotThisMethod('no keywords at all, weird')\"}, {\"line_number\": 6, \"line_content\": \"    date = keywords.get('date')\"}, {\"line_number\": 7, \"line_content\": \"    if date is not None:\"}, {\"line_number\": 8, \"line_content\": \"        date = date.strip().replace(' ', 'T', 1).replace(' ', '', 1)\"}, {\"line_number\": 9, \"line_content\": \"    refnames = keywords['refnames'].strip()\"}, {\"line_number\": 10, \"line_content\": \"    if refnames.startswith('$Format'):\"}, {\"line_number\": 11, \"line_content\": \"        if verbose:\"}, {\"line_number\": 12, \"line_content\": \"            print('keywords are unexpanded, not using')\"}, {\"line_number\": 13, \"line_content\": \"        raise NotThisMethod('unexpanded keywords, not a git-archive tarball')\"}, {\"line_number\": 14, \"line_content\": \"    refs = set([r.strip() for r in refnames.strip('()').split(',')])\"}, {\"line_number\": 15, \"line_content\": \"    TAG = 'tag: '\"}, {\"line_number\": 16, \"line_content\": \"    tags = set([r[len(TAG):] for r in refs if r.startswith(TAG)])\"}, {\"line_number\": 17, \"line_content\": \"    if not tags:\"}, {\"line_number\": 18, \"line_content\": \"        tags = set([r for r in refs if re.search('\\\\\\\\d', r)])\"}, {\"line_number\": 19, \"line_content\": \"        if verbose:\"}, {\"line_number\": 20, \"line_content\": \"            print(\\\"discarding '%s', no digits\\\" % ','.join(refs - tags))\"}, {\"line_number\": 21, \"line_content\": \"    if verbose:\"}, {\"line_number\": 22, \"line_content\": \"        print('likely tags: %s' % ','.join(sorted(tags)))\"}, {\"line_number\": 23, \"line_content\": \"    for ref in sorted(tags):\"}, {\"line_number\": 24, \"line_content\": \"        if ref.startswith(tag_prefix):\"}, {\"line_number\": 25, \"line_content\": \"            r = ref[len(tag_prefix):]\"}, {\"line_number\": 26, \"line_content\": \"            if verbose:\"}, {\"line_number\": 27, \"line_content\": \"                print('picking %s' % r)\"}, {\"line_number\": 28, \"line_content\": \"            return {'version': r, 'full-revisionid': keywords['full'].strip\"}, {\"line_number\": 29, \"line_content\": \"                (), 'dirty': False, 'error': None, 'date': date}\"}, {\"line_number\": 30, \"line_content\": \"    if verbose:\"}, {\"line_number\": 31, \"line_content\": \"        print('no suitable tags, using unknown + full revision id')\"}, {\"line_number\": 32, \"line_content\": \"    return {'version': '0+unknown', 'full-revisionid': keywords['full'].\"}, {\"line_number\": 33, \"line_content\": \"        strip(), 'dirty': False, 'error': 'no suitable tags', 'date': None}\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apenwarr/sshuttle\", \"direct_link_to_file_line\": \"https://github.com/apenwarr/sshuttle/blob/master/sshuttle/setup.py#L23\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def version_scheme(version):\"}, {\"line_number\": 2, \"line_content\": \"    from setuptools_scm.version import guess_next_dev_version\"}, {\"line_number\": 3, \"line_content\": \"    version = guess_next_dev_version(version)\"}, {\"line_number\": 4, \"line_content\": \"    return version.lstrip('v')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apenwarr/sshuttle\", \"direct_link_to_file_line\": \"https://github.com/apenwarr/sshuttle/blob/master/sshuttle/sshuttle/helpers.py#L9\", \"contents\": {\"total_lines\": 15, \"lines\": [{\"line_number\": 1, \"line_content\": \"def log(s):\"}, {\"line_number\": 2, \"line_content\": \"    global logprefix\"}, {\"line_number\": 3, \"line_content\": \"    try:\"}, {\"line_number\": 4, \"line_content\": \"        sys.stdout.flush()\"}, {\"line_number\": 5, \"line_content\": \"        if s.find('\\\\n') != -1:\"}, {\"line_number\": 6, \"line_content\": \"            prefix = logprefix\"}, {\"line_number\": 7, \"line_content\": \"            s = s.rstrip('\\\\n')\"}, {\"line_number\": 8, \"line_content\": \"            for line in s.split('\\\\n'):\"}, {\"line_number\": 9, \"line_content\": \"                sys.stderr.write(prefix + line + '\\\\n')\"}, {\"line_number\": 10, \"line_content\": \"                prefix = '---> '\"}, {\"line_number\": 11, \"line_content\": \"        else:\"}, {\"line_number\": 12, \"line_content\": \"            sys.stderr.write(logprefix + s)\"}, {\"line_number\": 13, \"line_content\": \"        sys.stderr.flush()\"}, {\"line_number\": 14, \"line_content\": \"    except IOError:\"}, {\"line_number\": 15, \"line_content\": \"        pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apenwarr/sshuttle\", \"direct_link_to_file_line\": \"https://github.com/apenwarr/sshuttle/blob/master/sshuttle/sshuttle/helpers.py#L28\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def debug1(s):\"}, {\"line_number\": 2, \"line_content\": \"    if verbose >= 1:\"}, {\"line_number\": 3, \"line_content\": \"        log(s)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apenwarr/sshuttle\", \"direct_link_to_file_line\": \"https://github.com/apenwarr/sshuttle/blob/master/sshuttle/sshuttle/helpers.py#L33\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def debug2(s):\"}, {\"line_number\": 2, \"line_content\": \"    if verbose >= 2:\"}, {\"line_number\": 3, \"line_content\": \"        log(s)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apenwarr/sshuttle\", \"direct_link_to_file_line\": \"https://github.com/apenwarr/sshuttle/blob/master/sshuttle/sshuttle/helpers.py#L38\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def debug3(s):\"}, {\"line_number\": 2, \"line_content\": \"    if verbose >= 3:\"}, {\"line_number\": 3, \"line_content\": \"        log(s)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebookresearch/Detectron\", \"direct_link_to_file_line\": \"https://github.com/facebookresearch/Detectron/blob/master/Detectron/detectron/core/rpn_generator.py#L208\", \"contents\": {\"total_lines\": 28, \"lines\": [{\"line_number\": 1, \"line_content\": \"def im_proposals(model, im):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Generate RPN proposals on a single image.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    inputs = {}\"}, {\"line_number\": 4, \"line_content\": \"    inputs['data'], im_scale, inputs['im_info'] = blob_utils.get_image_blob(im,\"}, {\"line_number\": 5, \"line_content\": \"        cfg.TEST.SCALE, cfg.TEST.MAX_SIZE)\"}, {\"line_number\": 6, \"line_content\": \"    for k, v in inputs.items():\"}, {\"line_number\": 7, \"line_content\": \"        workspace.FeedBlob(core.ScopedName(k), v.astype(np.float32, copy=False)\"}, {\"line_number\": 8, \"line_content\": \"            )\"}, {\"line_number\": 9, \"line_content\": \"    workspace.RunNet(model.net.Proto().name)\"}, {\"line_number\": 10, \"line_content\": \"    if cfg.FPN.FPN_ON and cfg.FPN.MULTILEVEL_RPN:\"}, {\"line_number\": 11, \"line_content\": \"        k_max = cfg.FPN.RPN_MAX_LEVEL\"}, {\"line_number\": 12, \"line_content\": \"        k_min = cfg.FPN.RPN_MIN_LEVEL\"}, {\"line_number\": 13, \"line_content\": \"        rois_names = [core.ScopedName('rpn_rois_fpn' + str(l)) for l in\"}, {\"line_number\": 14, \"line_content\": \"            range(k_min, k_max + 1)]\"}, {\"line_number\": 15, \"line_content\": \"        score_names = [core.ScopedName('rpn_roi_probs_fpn' + str(l)) for l in\"}, {\"line_number\": 16, \"line_content\": \"            range(k_min, k_max + 1)]\"}, {\"line_number\": 17, \"line_content\": \"        blobs = workspace.FetchBlobs(rois_names + score_names)\"}, {\"line_number\": 18, \"line_content\": \"        boxes = np.concatenate(blobs[:len(rois_names)])\"}, {\"line_number\": 19, \"line_content\": \"        scores = np.concatenate(blobs[len(rois_names):]).squeeze()\"}, {\"line_number\": 20, \"line_content\": \"        inds = np.argsort(-scores)[:cfg.TEST.RPN_POST_NMS_TOP_N]\"}, {\"line_number\": 21, \"line_content\": \"        scores = scores[inds]\"}, {\"line_number\": 22, \"line_content\": \"        boxes = boxes[(inds), :]\"}, {\"line_number\": 23, \"line_content\": \"    else:\"}, {\"line_number\": 24, \"line_content\": \"        boxes, scores = workspace.FetchBlobs([core.ScopedName('rpn_rois'),\"}, {\"line_number\": 25, \"line_content\": \"            core.ScopedName('rpn_roi_probs')])\"}, {\"line_number\": 26, \"line_content\": \"        scores = scores.squeeze()\"}, {\"line_number\": 27, \"line_content\": \"    boxes = boxes[:, 1:] / im_scale\"}, {\"line_number\": 28, \"line_content\": \"    return boxes, scores\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebookresearch/Detectron\", \"direct_link_to_file_line\": \"https://github.com/facebookresearch/Detectron/blob/master/Detectron/detectron/core/rpn_generator.py#L253\", \"contents\": {\"total_lines\": 15, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_roidb(dataset_name, ind_range):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Get the roidb for the dataset specified in the global cfg. Optionally\"}, {\"line_number\": 3, \"line_content\": \"    restrict it to a range of indices if ind_range is a pair of integers.\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    dataset = JsonDataset(dataset_name)\"}, {\"line_number\": 6, \"line_content\": \"    roidb = dataset.get_roidb()\"}, {\"line_number\": 7, \"line_content\": \"    if ind_range is not None:\"}, {\"line_number\": 8, \"line_content\": \"        total_num_images = len(roidb)\"}, {\"line_number\": 9, \"line_content\": \"        start, end = ind_range\"}, {\"line_number\": 10, \"line_content\": \"        roidb = roidb[start:end]\"}, {\"line_number\": 11, \"line_content\": \"    else:\"}, {\"line_number\": 12, \"line_content\": \"        start = 0\"}, {\"line_number\": 13, \"line_content\": \"        end = len(roidb)\"}, {\"line_number\": 14, \"line_content\": \"        total_num_images = end\"}, {\"line_number\": 15, \"line_content\": \"    return roidb, start, end, total_num_images\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebookresearch/Detectron\", \"direct_link_to_file_line\": \"https://github.com/facebookresearch/Detectron/blob/master/Detectron/detectron/core/rpn_generator.py#L272\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def evaluate_proposal_file(dataset, proposal_file, output_dir):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Evaluate box proposal average recall.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    roidb = dataset.get_roidb(gt=True, proposal_file=proposal_file)\"}, {\"line_number\": 4, \"line_content\": \"    results = task_evaluation.evaluate_box_proposals(dataset, roidb)\"}, {\"line_number\": 5, \"line_content\": \"    task_evaluation.log_box_proposal_results(results)\"}, {\"line_number\": 6, \"line_content\": \"    recall_file = os.path.join(output_dir, 'rpn_proposal_recall.pkl')\"}, {\"line_number\": 7, \"line_content\": \"    save_object(results, recall_file)\"}, {\"line_number\": 8, \"line_content\": \"    return results\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebookresearch/Detectron\", \"direct_link_to_file_line\": \"https://github.com/facebookresearch/Detectron/blob/master/Detectron/detectron/core/test_engine.py#L51\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_eval_functions():\"}, {\"line_number\": 2, \"line_content\": \"    if cfg.MODEL.RPN_ONLY:\"}, {\"line_number\": 3, \"line_content\": \"        child_func = generate_rpn_on_range\"}, {\"line_number\": 4, \"line_content\": \"        parent_func = generate_rpn_on_dataset\"}, {\"line_number\": 5, \"line_content\": \"    else:\"}, {\"line_number\": 6, \"line_content\": \"        child_func = test_net\"}, {\"line_number\": 7, \"line_content\": \"        parent_func = test_net_on_dataset\"}, {\"line_number\": 8, \"line_content\": \"    return parent_func, child_func\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/facebookresearch/Detectron\", \"direct_link_to_file_line\": \"https://github.com/facebookresearch/Detectron/blob/master/Detectron/detectron/core/test_engine.py#L65\", \"contents\": {\"total_lines\": 13, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_inference_dataset(index, is_parent=True):\"}, {\"line_number\": 2, \"line_content\": \"    assert is_parent or len(cfg.TEST.DATASETS\"}, {\"line_number\": 3, \"line_content\": \"        ) == 1, 'The child inference process can only work on a single dataset'\"}, {\"line_number\": 4, \"line_content\": \"    dataset_name = cfg.TEST.DATASETS[index]\"}, {\"line_number\": 5, \"line_content\": \"    if cfg.TEST.PRECOMPUTED_PROPOSALS:\"}, {\"line_number\": 6, \"line_content\": \"        assert is_parent or len(cfg.TEST.PROPOSAL_FILES\"}, {\"line_number\": 7, \"line_content\": \"            ) == 1, 'The child inference process can only work on a single proposal file'\"}, {\"line_number\": 8, \"line_content\": \"        assert len(cfg.TEST.PROPOSAL_FILES) == len(cfg.TEST.DATASETS\"}, {\"line_number\": 9, \"line_content\": \"            ), 'If proposals are used, one proposal file must be specified for each dataset'\"}, {\"line_number\": 10, \"line_content\": \"        proposal_file = cfg.TEST.PROPOSAL_FILES[index]\"}, {\"line_number\": 11, \"line_content\": \"    else:\"}, {\"line_number\": 12, \"line_content\": \"        proposal_file = None\"}, {\"line_number\": 13, \"line_content\": \"    return dataset_name, proposal_file\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/getsentry/sentry\", \"direct_link_to_file_line\": \"https://github.com/getsentry/sentry/blob/master/sentry/setup.py#L32\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_requirements(env):\"}, {\"line_number\": 2, \"line_content\": \"    with open('requirements-{}.txt'.format(env)) as fp:\"}, {\"line_number\": 3, \"line_content\": \"        return [x.strip() for x in fp.read().split('\\\\n') if not x.\"}, {\"line_number\": 4, \"line_content\": \"            startswith('#')]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/getsentry/sentry\", \"direct_link_to_file_line\": \"https://github.com/getsentry/sentry/blob/master/sentry/setup.py#L61\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run(self):\"}, {\"line_number\": 2, \"line_content\": \"    from distutils import log as distutils_log\"}, {\"line_number\": 3, \"line_content\": \"    distutils_log.set_threshold(distutils_log.WARN)\"}, {\"line_number\": 4, \"line_content\": \"    if not IS_LIGHT_BUILD:\"}, {\"line_number\": 5, \"line_content\": \"        self.run_command('build_integration_docs')\"}, {\"line_number\": 6, \"line_content\": \"        self.run_command('build_assets')\"}, {\"line_number\": 7, \"line_content\": \"        self.run_command('build_js_sdk_registry')\"}, {\"line_number\": 8, \"line_content\": \"    BuildCommand.run(self)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/getsentry/sentry\", \"direct_link_to_file_line\": \"https://github.com/getsentry/sentry/blob/master/sentry/setup.py#L61\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run(self):\"}, {\"line_number\": 2, \"line_content\": \"    DevelopCommand.run(self)\"}, {\"line_number\": 3, \"line_content\": \"    if not IS_LIGHT_BUILD:\"}, {\"line_number\": 4, \"line_content\": \"        self.run_command('build_integration_docs')\"}, {\"line_number\": 5, \"line_content\": \"        self.run_command('build_assets')\"}, {\"line_number\": 6, \"line_content\": \"        self.run_command('build_js_sdk_registry')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/getsentry/sentry\", \"direct_link_to_file_line\": \"https://github.com/getsentry/sentry/blob/master/sentry/conftest.py#L15\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def pytest_configure(config):\"}, {\"line_number\": 2, \"line_content\": \"    import warnings\"}, {\"line_number\": 3, \"line_content\": \"    warnings.filterwarnings('error', '', Warning, '^(?!(|kombu|raven|sentry))')\"}, {\"line_number\": 4, \"line_content\": \"    install_sentry_plugins()\"}, {\"line_number\": 5, \"line_content\": \"    config.addinivalue_line('markers',\"}, {\"line_number\": 6, \"line_content\": \"        'obsolete: mark test as obsolete and soon to be removed')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/getsentry/sentry\", \"direct_link_to_file_line\": \"https://github.com/getsentry/sentry/blob/master/sentry/conftest.py#L28\", \"contents\": {\"total_lines\": 14, \"lines\": [{\"line_number\": 1, \"line_content\": \"def install_sentry_plugins():\"}, {\"line_number\": 2, \"line_content\": \"    from sentry.runner.importer import install_plugin_apps\"}, {\"line_number\": 3, \"line_content\": \"    from django.conf import settings\"}, {\"line_number\": 4, \"line_content\": \"    install_plugin_apps('sentry.apps', settings)\"}, {\"line_number\": 5, \"line_content\": \"    from sentry.runner.initializer import register_plugins\"}, {\"line_number\": 6, \"line_content\": \"    register_plugins(settings, raise_on_plugin_load_failure=True)\"}, {\"line_number\": 7, \"line_content\": \"    settings.ASANA_CLIENT_ID = 'abc'\"}, {\"line_number\": 8, \"line_content\": \"    settings.ASANA_CLIENT_SECRET = '123'\"}, {\"line_number\": 9, \"line_content\": \"    settings.BITBUCKET_CONSUMER_KEY = 'abc'\"}, {\"line_number\": 10, \"line_content\": \"    settings.BITBUCKET_CONSUMER_SECRET = '123'\"}, {\"line_number\": 11, \"line_content\": \"    settings.GITHUB_APP_ID = 'abc'\"}, {\"line_number\": 12, \"line_content\": \"    settings.GITHUB_API_SECRET = '123'\"}, {\"line_number\": 13, \"line_content\": \"    settings.SENTRY_OPTIONS['github.integration-hook-secret'\"}, {\"line_number\": 14, \"line_content\": \"        ] = 'b3002c3e321d4b7880360d397db2ccfd'\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/powerline/powerline\", \"direct_link_to_file_line\": \"https://github.com/powerline/powerline/blob/master/powerline/setup.py#L24\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def compile_client():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Compile the C powerline-client script.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    if hasattr(sys, 'getwindowsversion'):\"}, {\"line_number\": 4, \"line_content\": \"        raise NotImplementedError()\"}, {\"line_number\": 5, \"line_content\": \"    else:\"}, {\"line_number\": 6, \"line_content\": \"        from distutils.ccompiler import new_compiler\"}, {\"line_number\": 7, \"line_content\": \"        compiler = new_compiler().compiler\"}, {\"line_number\": 8, \"line_content\": \"        cflags = os.environ.get('CFLAGS', str('-O3'))\"}, {\"line_number\": 9, \"line_content\": \"        subprocess.check_call(compiler + shlex.split(cflags) + [\"}, {\"line_number\": 10, \"line_content\": \"            'client/powerline.c', '-o', 'scripts/powerline'])\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/powerline/powerline\", \"direct_link_to_file_line\": \"https://github.com/powerline/powerline/blob/master/powerline/scripts/powerline-release.py#L21\", \"contents\": {\"total_lines\": 23, \"lines\": [{\"line_number\": 1, \"line_content\": \"def parse_version(s):\"}, {\"line_number\": 2, \"line_content\": \"    if s == '+' * len(s):\"}, {\"line_number\": 3, \"line_content\": \"        try:\"}, {\"line_number\": 4, \"line_content\": \"            last_version = next(iter(sorted([tuple(map(int, tag.split('.'))\"}, {\"line_number\": 5, \"line_content\": \"                ) for tag in check_output(['git', 'tag', '-l', '[0-9]*.*'])\"}, {\"line_number\": 6, \"line_content\": \"                .split('\\\\n')[:-1]], reverse=True)))\"}, {\"line_number\": 7, \"line_content\": \"        except StopIteration:\"}, {\"line_number\": 8, \"line_content\": \"            raise ValueError('No existing versions found')\"}, {\"line_number\": 9, \"line_content\": \"        version = []\"}, {\"line_number\": 10, \"line_content\": \"        for i in range(len(s) - 1):\"}, {\"line_number\": 11, \"line_content\": \"            try:\"}, {\"line_number\": 12, \"line_content\": \"                version.append(last_version[i])\"}, {\"line_number\": 13, \"line_content\": \"            except IndexError:\"}, {\"line_number\": 14, \"line_content\": \"                version.append(0)\"}, {\"line_number\": 15, \"line_content\": \"        try:\"}, {\"line_number\": 16, \"line_content\": \"            version.append(last_version[len(s) - 1] + 1)\"}, {\"line_number\": 17, \"line_content\": \"        except IndexError:\"}, {\"line_number\": 18, \"line_content\": \"            version.append(1)\"}, {\"line_number\": 19, \"line_content\": \"        if len(version) == 1:\"}, {\"line_number\": 20, \"line_content\": \"            version.append(0)\"}, {\"line_number\": 21, \"line_content\": \"        return tuple(version)\"}, {\"line_number\": 22, \"line_content\": \"    else:\"}, {\"line_number\": 23, \"line_content\": \"        return tuple(map(int, s.split('.')))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/powerline/powerline\", \"direct_link_to_file_line\": \"https://github.com/powerline/powerline/blob/master/powerline/scripts/powerline-release.py#L51\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def setup_py_filter(filter_func):\"}, {\"line_number\": 2, \"line_content\": \"    with codecs.open('.setup.py.new', 'w', encoding='utf-8') as NS:\"}, {\"line_number\": 3, \"line_content\": \"        with codecs.open('setup.py', 'r', encoding='utf-8') as OS:\"}, {\"line_number\": 4, \"line_content\": \"            for line in OS:\"}, {\"line_number\": 5, \"line_content\": \"                line = filter_func(line)\"}, {\"line_number\": 6, \"line_content\": \"                NS.write(line)\"}, {\"line_number\": 7, \"line_content\": \"    os.unlink('setup.py')\"}, {\"line_number\": 8, \"line_content\": \"    os.rename('.setup.py.new', 'setup.py')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/powerline/powerline\", \"direct_link_to_file_line\": \"https://github.com/powerline/powerline/blob/master/powerline/scripts/powerline-release.py#L62\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def setup_py_develop_filter(line, version_string):\"}, {\"line_number\": 2, \"line_content\": \"    if line.startswith('\\\\tbase_version = '):\"}, {\"line_number\": 3, \"line_content\": \"        line = \\\"\\\\tbase_version = '\\\" + version_string + \\\"'\\\\n\\\"\"}, {\"line_number\": 4, \"line_content\": \"    return line\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/powerline/powerline\", \"direct_link_to_file_line\": \"https://github.com/powerline/powerline/blob/master/powerline/scripts/powerline-release.py#L68\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def setup_py_master_filter(line, version_string):\"}, {\"line_number\": 2, \"line_content\": \"    if line.startswith('\\\\tversion='):\"}, {\"line_number\": 3, \"line_content\": \"        line = \\\"\\\\tversion='\\\" + version_string + \\\"',\\\\n\\\"\"}, {\"line_number\": 4, \"line_content\": \"    elif 'Development Status' in line:\"}, {\"line_number\": 5, \"line_content\": \"        line = \\\"\\\\t\\\\t'Development Status :: 5 - Production/Stable',\\\\n\\\"\"}, {\"line_number\": 6, \"line_content\": \"    return line\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mkdocs/mkdocs\", \"direct_link_to_file_line\": \"https://github.com/mkdocs/mkdocs/blob/master/mkdocs/setup.py#L17\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_version(package):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Return package version as listed in `__version__` in `init.py`.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    init_py = open(os.path.join(package, '__init__.py')).read()\"}, {\"line_number\": 4, \"line_content\": \"    return re.search('__version__ = [\\\\'\\\"]([^\\\\'\\\"]+)[\\\\'\\\"]', init_py).group(1)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mkdocs/mkdocs\", \"direct_link_to_file_line\": \"https://github.com/mkdocs/mkdocs/blob/master/mkdocs/setup.py#L23\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_packages(package):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Return root package and all sub-packages.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    return [dirpath for dirpath, dirnames, filenames in os.walk(package) if\"}, {\"line_number\": 4, \"line_content\": \"        os.path.exists(os.path.join(dirpath, '__init__.py'))]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mkdocs/mkdocs\", \"direct_link_to_file_line\": \"https://github.com/mkdocs/mkdocs/blob/master/mkdocs/mkdocs/theme.py#L29\", \"contents\": {\"total_lines\": 14, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, name=None, **user_config):\"}, {\"line_number\": 2, \"line_content\": \"    self.name = name\"}, {\"line_number\": 3, \"line_content\": \"    self._vars = {}\"}, {\"line_number\": 4, \"line_content\": \"    package_dir = os.path.abspath(os.path.dirname(__file__))\"}, {\"line_number\": 5, \"line_content\": \"    mkdocs_templates = os.path.join(package_dir, 'templates')\"}, {\"line_number\": 6, \"line_content\": \"    self.static_templates = set(os.listdir(mkdocs_templates))\"}, {\"line_number\": 7, \"line_content\": \"    self.dirs = []\"}, {\"line_number\": 8, \"line_content\": \"    if 'custom_dir' in user_config:\"}, {\"line_number\": 9, \"line_content\": \"        self.dirs.append(user_config.pop('custom_dir'))\"}, {\"line_number\": 10, \"line_content\": \"    if self.name:\"}, {\"line_number\": 11, \"line_content\": \"        self._load_theme_config(name)\"}, {\"line_number\": 12, \"line_content\": \"    self.dirs.append(mkdocs_templates)\"}, {\"line_number\": 13, \"line_content\": \"    self.static_templates.update(user_config.pop('static_templates', []))\"}, {\"line_number\": 14, \"line_content\": \"    self._vars.update(user_config)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mkdocs/mkdocs\", \"direct_link_to_file_line\": \"https://github.com/mkdocs/mkdocs/blob/master/mkdocs/mkdocs/theme.py#L54\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __repr__(self):\"}, {\"line_number\": 2, \"line_content\": \"    return \\\"{}(name='{}', dirs={}, static_templates={}, {})\\\".format(self.\"}, {\"line_number\": 3, \"line_content\": \"        __class__.__name__, self.name, self.dirs, list(self.\"}, {\"line_number\": 4, \"line_content\": \"        static_templates), ', '.join('{}={}'.format(k, repr(v)) for k, v in\"}, {\"line_number\": 5, \"line_content\": \"        self._vars.items()))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mkdocs/mkdocs\", \"direct_link_to_file_line\": \"https://github.com/mkdocs/mkdocs/blob/master/mkdocs/mkdocs/theme.py#L60\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __getitem__(self, key):\"}, {\"line_number\": 2, \"line_content\": \"    return self._vars[key]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/donnemartin/interactive-coding-challenges\", \"direct_link_to_file_line\": \"https://github.com/donnemartin/interactive-coding-challenges/blob/master/interactive-coding-challenges/math_probability/sub_two/test_sub_two.py#L16\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    test = TestSubTwo()\"}, {\"line_number\": 3, \"line_content\": \"    test.test_sub_two()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/donnemartin/interactive-coding-challenges\", \"direct_link_to_file_line\": \"https://github.com/donnemartin/interactive-coding-challenges/blob/master/interactive-coding-challenges/math_probability/sub_two/test_sub_two.py#L6\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_sub_two(self):\"}, {\"line_number\": 2, \"line_content\": \"    solution = Solution()\"}, {\"line_number\": 3, \"line_content\": \"    self.assertRaises(TypeError, solution.sub_two, None)\"}, {\"line_number\": 4, \"line_content\": \"    self.assertEqual(solution.sub_two(7, 5), 2)\"}, {\"line_number\": 5, \"line_content\": \"    self.assertEqual(solution.sub_two(-5, -7), 2)\"}, {\"line_number\": 6, \"line_content\": \"    self.assertEqual(solution.sub_two(-5, 7), -12)\"}, {\"line_number\": 7, \"line_content\": \"    self.assertEqual(solution.sub_two(5, -7), 12)\"}, {\"line_number\": 8, \"line_content\": \"    print('Success: test_sub_two')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/donnemartin/interactive-coding-challenges\", \"direct_link_to_file_line\": \"https://github.com/donnemartin/interactive-coding-challenges/blob/master/interactive-coding-challenges/math_probability/sum_two/test_sum_two.py#L15\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    test = TestSumTwo()\"}, {\"line_number\": 3, \"line_content\": \"    test.test_sum_two()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/donnemartin/interactive-coding-challenges\", \"direct_link_to_file_line\": \"https://github.com/donnemartin/interactive-coding-challenges/blob/master/interactive-coding-challenges/math_probability/sum_two/test_sum_two.py#L6\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_sum_two(self):\"}, {\"line_number\": 2, \"line_content\": \"    solution = Solution()\"}, {\"line_number\": 3, \"line_content\": \"    self.assertRaises(TypeError, solution.sum_two, None)\"}, {\"line_number\": 4, \"line_content\": \"    self.assertEqual(solution.sum_two(5, 7), 12)\"}, {\"line_number\": 5, \"line_content\": \"    self.assertEqual(solution.sum_two(-5, -7), -12)\"}, {\"line_number\": 6, \"line_content\": \"    self.assertEqual(solution.sum_two(5, -7), -2)\"}, {\"line_number\": 7, \"line_content\": \"    print('Success: test_sum_two')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/donnemartin/interactive-coding-challenges\", \"direct_link_to_file_line\": \"https://github.com/donnemartin/interactive-coding-challenges/blob/master/interactive-coding-challenges/math_probability/generate_primes/test_generate_primes.py#L20\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    test = TestMath()\"}, {\"line_number\": 3, \"line_content\": \"    test.test_generate_primes()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Kr1s77/awesome-python-login-model\", \"direct_link_to_file_line\": \"https://github.com/Kr1s77/awesome-python-login-model/blob/master/awesome-python-login-model/csdn/selenium_csdn.py#L4\", \"contents\": {\"total_lines\": 16, \"lines\": [{\"line_number\": 1, \"line_content\": \"def login(email, password):\"}, {\"line_number\": 2, \"line_content\": \"    browser = webdriver.Chrome()\"}, {\"line_number\": 3, \"line_content\": \"    browser.get('https://passport.csdn.net/login')\"}, {\"line_number\": 4, \"line_content\": \"    input_button = browser.find_element_by_xpath(\"}, {\"line_number\": 5, \"line_content\": \"        '//div[@class=\\\"main-select\\\"]/ul/li[2]/a')\"}, {\"line_number\": 6, \"line_content\": \"    input_button.click()\"}, {\"line_number\": 7, \"line_content\": \"    input_element = browser.find_element_by_xpath(\"}, {\"line_number\": 8, \"line_content\": \"        '//div[@class=\\\"col-xs-12 col-sm-12 control-col-pos col-pr-no col-pl-no\\\"]/input'\"}, {\"line_number\": 9, \"line_content\": \"        )\"}, {\"line_number\": 10, \"line_content\": \"    input_element.send_keys(email)\"}, {\"line_number\": 11, \"line_content\": \"    input_password = browser.find_element_by_xpath(\"}, {\"line_number\": 12, \"line_content\": \"        '//div[@class=\\\"col-xs-12 col-sm-12 control-col-pos col-pr-no col-pl-no\\\"]/input[@id=\\\"password-number\\\"]'\"}, {\"line_number\": 13, \"line_content\": \"        )\"}, {\"line_number\": 14, \"line_content\": \"    input_password.send_keys(password)\"}, {\"line_number\": 15, \"line_content\": \"    touch_button = browser.find_element_by_xpath('//button')\"}, {\"line_number\": 16, \"line_content\": \"    touch_button.click()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Kr1s77/awesome-python-login-model\", \"direct_link_to_file_line\": \"https://github.com/Kr1s77/awesome-python-login-model/blob/master/awesome-python-login-model/baidu/baidu.py#L17\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.headers = {'User-Agent':\"}, {\"line_number\": 3, \"line_content\": \"        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/601.2.7 (KHTML, like Gecko) Version/9.0.1 Safari/601.2.7'\"}, {\"line_number\": 4, \"line_content\": \"        , 'referer': 'https://pan.baidu.com/'}\"}, {\"line_number\": 5, \"line_content\": \"    self.sess = requests.session()\"}, {\"line_number\": 6, \"line_content\": \"    self.gid = str(uuid4()).upper()\"}, {\"line_number\": 7, \"line_content\": \"    self.token = None\"}, {\"line_number\": 8, \"line_content\": \"    self.key = None\"}, {\"line_number\": 9, \"line_content\": \"    self.public_key = None\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Kr1s77/awesome-python-login-model\", \"direct_link_to_file_line\": \"https://github.com/Kr1s77/awesome-python-login-model/blob/master/awesome-python-login-model/baidu/baidu.py#L28\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _init_cookies(self):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\\u521d\\u59cb\\u5316cookies\"}, {\"line_number\": 3, \"line_content\": \"        :return:\"}, {\"line_number\": 4, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    self.sess.get(url='https://pan.baidu.com/', headers=self.headers)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Kr1s77/awesome-python-login-model\", \"direct_link_to_file_line\": \"https://github.com/Kr1s77/awesome-python-login-model/blob/master/awesome-python-login-model/baidu/baidu.py#L34\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _get_token(self):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\\u83b7\\u53d6\\u767b\\u9646token\"}, {\"line_number\": 3, \"line_content\": \"        :return:\"}, {\"line_number\": 4, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    url = 'https://passport.baidu.com/v2/api/?getapi'\"}, {\"line_number\": 6, \"line_content\": \"    payload = {'getapi': '', 'tpl': 'mn', 'apiver': 'v3', 'tt': str(int(\"}, {\"line_number\": 7, \"line_content\": \"        time.time() * 1000)), 'class': 'login', 'gid': self.gid,\"}, {\"line_number\": 8, \"line_content\": \"        'loginversion': 'v4', 'logintype': 'dialogLogin', 'traceid': '',\"}, {\"line_number\": 9, \"line_content\": \"        'callback': 'bd__cbs__pivyke'}\"}, {\"line_number\": 10, \"line_content\": \"    resp = self.sess.get(url=url, params=payload, headers=self.headers)\"}, {\"line_number\": 11, \"line_content\": \"    js = parse_json(resp.text.replace(\\\"'\\\", '\\\"'))\"}, {\"line_number\": 12, \"line_content\": \"    self.token = js['data']['token']\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Kr1s77/awesome-python-login-model\", \"direct_link_to_file_line\": \"https://github.com/Kr1s77/awesome-python-login-model/blob/master/awesome-python-login-model/baidu/baidu.py#L55\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _get_public_key(self):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\\u83b7\\u53d6RSA\\u516c\\u94a5\"}, {\"line_number\": 3, \"line_content\": \"        :return: RSA\\u516c\\u94a5\"}, {\"line_number\": 4, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    url = 'https://passport.baidu.com/v2/getpublickey'\"}, {\"line_number\": 6, \"line_content\": \"    payload = {'token': self.token, 'tpl': 'mn', 'apiver': 'v3', 'tt': str(\"}, {\"line_number\": 7, \"line_content\": \"        int(time.time() * 1000)), 'gid': self.gid, 'loginversion': 'v4',\"}, {\"line_number\": 8, \"line_content\": \"        'traceid': '', 'callback': 'bd__cbs__h02h0j'}\"}, {\"line_number\": 9, \"line_content\": \"    resp = self.sess.get(url=url, params=payload, headers=self.headers)\"}, {\"line_number\": 10, \"line_content\": \"    js = parse_json(resp.text.replace(\\\"'\\\", '\\\"'))\"}, {\"line_number\": 11, \"line_content\": \"    self.key, self.public_key = js.get('key'), js.get('pubkey')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pallets/flask\", \"direct_link_to_file_line\": \"https://github.com/pallets/flask/blob/master/flask/docs/conf.py#L93\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def setup(app):\"}, {\"line_number\": 2, \"line_content\": \"    app.add_role('gh', github_link)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pallets/flask\", \"direct_link_to_file_line\": \"https://github.com/pallets/flask/blob/master/flask/tests/test_json_tag.py#L31\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_duplicate_tag():\"}, {\"line_number\": 2, \"line_content\": \"    class TagDict(JSONTag):\"}, {\"line_number\": 3, \"line_content\": \"        key = ' d'\"}, {\"line_number\": 4, \"line_content\": \"    s = TaggedJSONSerializer()\"}, {\"line_number\": 5, \"line_content\": \"    pytest.raises(KeyError, s.register, TagDict)\"}, {\"line_number\": 6, \"line_content\": \"    s.register(TagDict, force=True, index=0)\"}, {\"line_number\": 7, \"line_content\": \"    assert isinstance(s.tags[' d'], TagDict)\"}, {\"line_number\": 8, \"line_content\": \"    assert isinstance(s.order[0], TagDict)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pallets/flask\", \"direct_link_to_file_line\": \"https://github.com/pallets/flask/blob/master/flask/tests/test_json_tag.py#L42\", \"contents\": {\"total_lines\": 16, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_custom_tag():\"}, {\"line_number\": 2, \"line_content\": \"    class Foo:\"}, {\"line_number\": 3, \"line_content\": \"        def __init__(self, data):\"}, {\"line_number\": 4, \"line_content\": \"            self.data = data\"}, {\"line_number\": 5, \"line_content\": \"    class TagFoo(JSONTag):\"}, {\"line_number\": 6, \"line_content\": \"        __slots__ = ()\"}, {\"line_number\": 7, \"line_content\": \"        key = ' f'\"}, {\"line_number\": 8, \"line_content\": \"        def check(self, value):\"}, {\"line_number\": 9, \"line_content\": \"            return isinstance(value, Foo)\"}, {\"line_number\": 10, \"line_content\": \"        def to_json(self, value):\"}, {\"line_number\": 11, \"line_content\": \"            return self.serializer.tag(value.data)\"}, {\"line_number\": 12, \"line_content\": \"        def to_python(self, value):\"}, {\"line_number\": 13, \"line_content\": \"            return Foo(value)\"}, {\"line_number\": 14, \"line_content\": \"    s = TaggedJSONSerializer()\"}, {\"line_number\": 15, \"line_content\": \"    s.register(TagFoo)\"}, {\"line_number\": 16, \"line_content\": \"    assert s.loads(s.dumps(Foo('bar'))).data == 'bar'\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pallets/flask\", \"direct_link_to_file_line\": \"https://github.com/pallets/flask/blob/master/flask/tests/test_json_tag.py#L65\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_tag_interface():\"}, {\"line_number\": 2, \"line_content\": \"    t = JSONTag(None)\"}, {\"line_number\": 3, \"line_content\": \"    pytest.raises(NotImplementedError, t.check, None)\"}, {\"line_number\": 4, \"line_content\": \"    pytest.raises(NotImplementedError, t.to_json, None)\"}, {\"line_number\": 5, \"line_content\": \"    pytest.raises(NotImplementedError, t.to_python, None)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pallets/flask\", \"direct_link_to_file_line\": \"https://github.com/pallets/flask/blob/master/flask/tests/test_json_tag.py#L72\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_tag_order():\"}, {\"line_number\": 2, \"line_content\": \"    class Tag1(JSONTag):\"}, {\"line_number\": 3, \"line_content\": \"        key = ' 1'\"}, {\"line_number\": 4, \"line_content\": \"    class Tag2(JSONTag):\"}, {\"line_number\": 5, \"line_content\": \"        key = ' 2'\"}, {\"line_number\": 6, \"line_content\": \"    s = TaggedJSONSerializer()\"}, {\"line_number\": 7, \"line_content\": \"    s.register(Tag1, index=-1)\"}, {\"line_number\": 8, \"line_content\": \"    assert isinstance(s.order[-2], Tag1)\"}, {\"line_number\": 9, \"line_content\": \"    s.register(Tag2, index=None)\"}, {\"line_number\": 10, \"line_content\": \"    assert isinstance(s.order[-1], Tag2)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pytorch/fairseq\", \"direct_link_to_file_line\": \"https://github.com/pytorch/fairseq/blob/master/fairseq/setup.py#L29\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, *args, **kwargs):\"}, {\"line_number\": 2, \"line_content\": \"    self.__include_dirs = []\"}, {\"line_number\": 3, \"line_content\": \"    super().__init__(*args, **kwargs)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pytorch/fairseq\", \"direct_link_to_file_line\": \"https://github.com/pytorch/fairseq/blob/master/fairseq/setup.py#L33\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"@property\"}, {\"line_number\": 2, \"line_content\": \"def include_dirs(self):\"}, {\"line_number\": 3, \"line_content\": \"    import numpy\"}, {\"line_number\": 4, \"line_content\": \"    return self.__include_dirs + [numpy.get_include()]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pytorch/fairseq\", \"direct_link_to_file_line\": \"https://github.com/pytorch/fairseq/blob/master/fairseq/setup.py#L38\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"@include_dirs.setter\"}, {\"line_number\": 2, \"line_content\": \"def include_dirs(self, dirs):\"}, {\"line_number\": 3, \"line_content\": \"    self.__include_dirs = dirs\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pytorch/fairseq\", \"direct_link_to_file_line\": \"https://github.com/pytorch/fairseq/blob/master/fairseq/scripts/compare_namespaces.py#L7\", \"contents\": {\"total_lines\": 29, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    ns1 = eval(input('Namespace 1: '))\"}, {\"line_number\": 3, \"line_content\": \"    ns2 = eval(input('Namespace 2: '))\"}, {\"line_number\": 4, \"line_content\": \"    def keys(ns):\"}, {\"line_number\": 5, \"line_content\": \"        ks = set()\"}, {\"line_number\": 6, \"line_content\": \"        for k in dir(ns):\"}, {\"line_number\": 7, \"line_content\": \"            if not k.startswith('_'):\"}, {\"line_number\": 8, \"line_content\": \"                ks.add(k)\"}, {\"line_number\": 9, \"line_content\": \"        return ks\"}, {\"line_number\": 10, \"line_content\": \"    k1 = keys(ns1)\"}, {\"line_number\": 11, \"line_content\": \"    k2 = keys(ns2)\"}, {\"line_number\": 12, \"line_content\": \"    def print_keys(ks, ns1, ns2=None):\"}, {\"line_number\": 13, \"line_content\": \"        for k in ks:\"}, {\"line_number\": 14, \"line_content\": \"            if ns2 is None:\"}, {\"line_number\": 15, \"line_content\": \"                print('{}\\\\t{}'.format(k, getattr(ns1, k, None)))\"}, {\"line_number\": 16, \"line_content\": \"            else:\"}, {\"line_number\": 17, \"line_content\": \"                print('{}\\\\t{}\\\\t{}'.format(k, getattr(ns1, k, None), getattr\"}, {\"line_number\": 18, \"line_content\": \"                    (ns2, k, None)))\"}, {\"line_number\": 19, \"line_content\": \"    print('Keys unique to namespace 1:')\"}, {\"line_number\": 20, \"line_content\": \"    print_keys(k1 - k2, ns1)\"}, {\"line_number\": 21, \"line_content\": \"    print()\"}, {\"line_number\": 22, \"line_content\": \"    print('Keys unique to namespace 2:')\"}, {\"line_number\": 23, \"line_content\": \"    print_keys(k2 - k1, ns2)\"}, {\"line_number\": 24, \"line_content\": \"    print()\"}, {\"line_number\": 25, \"line_content\": \"    print('Overlapping keys with different values:')\"}, {\"line_number\": 26, \"line_content\": \"    ks = [k for k in k1 & k2 if getattr(ns1, k, 'None') != getattr(ns2, k,\"}, {\"line_number\": 27, \"line_content\": \"        'None')]\"}, {\"line_number\": 28, \"line_content\": \"    print_keys(ks, ns1, ns2)\"}, {\"line_number\": 29, \"line_content\": \"    print()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pytorch/fairseq\", \"direct_link_to_file_line\": \"https://github.com/pytorch/fairseq/blob/master/fairseq/scripts/compare_namespaces.py#L12\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def keys(ns):\"}, {\"line_number\": 2, \"line_content\": \"    ks = set()\"}, {\"line_number\": 3, \"line_content\": \"    for k in dir(ns):\"}, {\"line_number\": 4, \"line_content\": \"        if not k.startswith('_'):\"}, {\"line_number\": 5, \"line_content\": \"            ks.add(k)\"}, {\"line_number\": 6, \"line_content\": \"    return ks\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/swisskyrepo/PayloadsAllTheThings\", \"direct_link_to_file_line\": \"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/PayloadsAllTheThings/Server Side Request Forgery/Files/ip.py#L50\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def RANDOM_TEXT_SPEC():\"}, {\"line_number\": 2, \"line_content\": \"    min_char = 12\"}, {\"line_number\": 3, \"line_content\": \"    max_char = 16\"}, {\"line_number\": 4, \"line_content\": \"    chars = string.ascii_letters + string.digits + '!$%^&*()<>;:,.|\\\\\\\\~`'\"}, {\"line_number\": 5, \"line_content\": \"    return ''.join(choice(chars) for x in range(randint(min_char, max_char)))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/swisskyrepo/PayloadsAllTheThings\", \"direct_link_to_file_line\": \"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/PayloadsAllTheThings/Server Side Request Forgery/Files/ip.py#L56\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def RANDOM_TEXT():\"}, {\"line_number\": 2, \"line_content\": \"    min_char = 12\"}, {\"line_number\": 3, \"line_content\": \"    max_char = 16\"}, {\"line_number\": 4, \"line_content\": \"    chars = string.ascii_letters + string.digits\"}, {\"line_number\": 5, \"line_content\": \"    return ''.join(choice(chars) for x in range(randint(min_char, max_char)))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/swisskyrepo/PayloadsAllTheThings\", \"direct_link_to_file_line\": \"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/PayloadsAllTheThings/Server Side Request Forgery/Files/ip.py#L71\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def OCT_SINGLE(NUMBER):\"}, {\"line_number\": 2, \"line_content\": \"    return str(oct(int(NUMBER))).replace('o', '')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/swisskyrepo/PayloadsAllTheThings\", \"direct_link_to_file_line\": \"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/PayloadsAllTheThings/Server Side Request Forgery/Files/ip.py#L74\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def DEC_OVERFLOW_SINGLE(NUMBER):\"}, {\"line_number\": 2, \"line_content\": \"    return str(int(NUMBER) + 256)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/swisskyrepo/PayloadsAllTheThings\", \"direct_link_to_file_line\": \"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/PayloadsAllTheThings/Server Side Request Forgery/Files/ip.py#L77\", \"contents\": {\"total_lines\": 16, \"lines\": [{\"line_number\": 1, \"line_content\": \"def validIP(address):\"}, {\"line_number\": 2, \"line_content\": \"    parts = address.split('.')\"}, {\"line_number\": 3, \"line_content\": \"    if len(parts) != 4:\"}, {\"line_number\": 4, \"line_content\": \"        return False\"}, {\"line_number\": 5, \"line_content\": \"    try:\"}, {\"line_number\": 6, \"line_content\": \"        for item in parts:\"}, {\"line_number\": 7, \"line_content\": \"            if not 0 <= int(item) <= 255:\"}, {\"line_number\": 8, \"line_content\": \"                return False\"}, {\"line_number\": 9, \"line_content\": \"    except ValueError:\"}, {\"line_number\": 10, \"line_content\": \"        print('\\\\nUsage: python ' + sys.argv[0] +\"}, {\"line_number\": 11, \"line_content\": \"            ' IP EXPORT(optional)\\\\nUsage: python ' + sys.argv[0] +\"}, {\"line_number\": 12, \"line_content\": \"            \\\"\\\"\\\" 169.254.169.254\"}, {\"line_number\": 13, \"line_content\": \"Usage: python \\\"\\\"\\\" + sys.argv[0] +\"}, {\"line_number\": 14, \"line_content\": \"            ' 169.254.169.254 export')\"}, {\"line_number\": 15, \"line_content\": \"        exit(1)\"}, {\"line_number\": 16, \"line_content\": \"    return True\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mail-in-a-box/mailinabox\", \"direct_link_to_file_line\": \"https://github.com/mail-in-a-box/mailinabox/blob/master/mailinabox/setup/migrate.py#L13\", \"contents\": {\"total_lines\": 21, \"lines\": [{\"line_number\": 1, \"line_content\": \"def migration_1(env):\"}, {\"line_number\": 2, \"line_content\": \"    def move_file(fn, domain_name_escaped, filename):\"}, {\"line_number\": 3, \"line_content\": \"        fn1 = os.path.join(env['STORAGE_ROOT'], 'ssl', domain_name_escaped,\"}, {\"line_number\": 4, \"line_content\": \"            file_type)\"}, {\"line_number\": 5, \"line_content\": \"        os.makedirs(os.path.dirname(fn1), exist_ok=True)\"}, {\"line_number\": 6, \"line_content\": \"        shutil.move(fn, fn1)\"}, {\"line_number\": 7, \"line_content\": \"    for sslfn in glob.glob(os.path.join(env['STORAGE_ROOT'], 'ssl/domains/*')):\"}, {\"line_number\": 8, \"line_content\": \"        fn = os.path.basename(sslfn)\"}, {\"line_number\": 9, \"line_content\": \"        m = re.match('(.*)_(certifiate.pem|cert_sign_req.csr|private_key.pem)$'\"}, {\"line_number\": 10, \"line_content\": \"            , fn)\"}, {\"line_number\": 11, \"line_content\": \"        if m:\"}, {\"line_number\": 12, \"line_content\": \"            domain_name, file_type = m.groups()\"}, {\"line_number\": 13, \"line_content\": \"            if file_type == 'certifiate.pem':\"}, {\"line_number\": 14, \"line_content\": \"                file_type = 'ssl_certificate.pem'\"}, {\"line_number\": 15, \"line_content\": \"            if file_type == 'cert_sign_req.csr':\"}, {\"line_number\": 16, \"line_content\": \"                file_type = 'certificate_signing_request.csr'\"}, {\"line_number\": 17, \"line_content\": \"            move_file(sslfn, domain_name, file_type)\"}, {\"line_number\": 18, \"line_content\": \"    try:\"}, {\"line_number\": 19, \"line_content\": \"        os.rmdir(os.path.join(env['STORAGE_ROOT'], 'ssl/domains'))\"}, {\"line_number\": 20, \"line_content\": \"    except:\"}, {\"line_number\": 21, \"line_content\": \"        pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mail-in-a-box/mailinabox\", \"direct_link_to_file_line\": \"https://github.com/mail-in-a-box/mailinabox/blob/master/mailinabox/setup/migrate.py#L39\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def migration_2(env):\"}, {\"line_number\": 2, \"line_content\": \"    for fn in glob.glob(os.path.join(env['STORAGE_ROOT'],\"}, {\"line_number\": 3, \"line_content\": \"        'mail/mailboxes/*/*/.dovecot.sieve')):\"}, {\"line_number\": 4, \"line_content\": \"        os.unlink(fn)\"}, {\"line_number\": 5, \"line_content\": \"    for fn in glob.glob(os.path.join(env['STORAGE_ROOT'],\"}, {\"line_number\": 6, \"line_content\": \"        'mail/mailboxes/*/*/.dovecot.svbin')):\"}, {\"line_number\": 7, \"line_content\": \"        os.unlink(fn)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mail-in-a-box/mailinabox\", \"direct_link_to_file_line\": \"https://github.com/mail-in-a-box/mailinabox/blob/master/mailinabox/setup/migrate.py#L48\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def migration_3(env):\"}, {\"line_number\": 2, \"line_content\": \"    pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mail-in-a-box/mailinabox\", \"direct_link_to_file_line\": \"https://github.com/mail-in-a-box/mailinabox/blob/master/mailinabox/setup/migrate.py#L54\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def migration_4(env):\"}, {\"line_number\": 2, \"line_content\": \"    db = os.path.join(env['STORAGE_ROOT'], 'mail/users.sqlite')\"}, {\"line_number\": 3, \"line_content\": \"    shell('check_call', ['sqlite3', db,\"}, {\"line_number\": 4, \"line_content\": \"        \\\"ALTER TABLE users ADD privileges TEXT NOT NULL DEFAULT ''\\\"])\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/mail-in-a-box/mailinabox\", \"direct_link_to_file_line\": \"https://github.com/mail-in-a-box/mailinabox/blob/master/mailinabox/setup/migrate.py#L59\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def migration_5(env):\"}, {\"line_number\": 2, \"line_content\": \"    os.chmod(os.path.join(env['STORAGE_ROOT'], 'backup/secret_key.txt'), 384)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ranger/ranger\", \"direct_link_to_file_line\": \"https://github.com/ranger/ranger/blob/master/ranger/setup.py#L21\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def findall(directory):\"}, {\"line_number\": 2, \"line_content\": \"    return [os.path.join(directory, f) for f in os.listdir(directory) if os\"}, {\"line_number\": 3, \"line_content\": \"        .path.isfile(os.path.join(directory, f))]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ranger/ranger\", \"direct_link_to_file_line\": \"https://github.com/ranger/ranger/blob/master/ranger/setup.py#L26\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def hash_file(path):\"}, {\"line_number\": 2, \"line_content\": \"    with open(path, 'rb') as fobj:\"}, {\"line_number\": 3, \"line_content\": \"        return sha512(fobj.read()).digest()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ranger/ranger\", \"direct_link_to_file_line\": \"https://github.com/ranger/ranger/blob/master/ranger/setup.py#L31\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def scripts_hack(*scripts):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Hack around `pip install` temporary directories \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    if not os.path.exists(SCRIPTS_PATH):\"}, {\"line_number\": 4, \"line_content\": \"        os.makedirs(SCRIPTS_PATH)\"}, {\"line_number\": 5, \"line_content\": \"    scripts_path = []\"}, {\"line_number\": 6, \"line_content\": \"    for src_path, basename in scripts:\"}, {\"line_number\": 7, \"line_content\": \"        dest_path = os.path.join(SCRIPTS_PATH, basename)\"}, {\"line_number\": 8, \"line_content\": \"        if not os.path.exists(dest_path) or os.path.exists(src_path\"}, {\"line_number\": 9, \"line_content\": \"            ) and hash_file(src_path) != hash_file(dest_path):\"}, {\"line_number\": 10, \"line_content\": \"            shutil.copy(src_path, dest_path)\"}, {\"line_number\": 11, \"line_content\": \"        scripts_path += [dest_path]\"}, {\"line_number\": 12, \"line_content\": \"    return scripts_path\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ranger/ranger\", \"direct_link_to_file_line\": \"https://github.com/ranger/ranger/blob/master/ranger/setup.py#L58\", \"contents\": {\"total_lines\": 36, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    setup(name='ranger-fm', description='Vim-like file manager',\"}, {\"line_number\": 3, \"line_content\": \"        long_description=ranger.__doc__, version=ranger.__version__, author\"}, {\"line_number\": 4, \"line_content\": \"        =ranger.__author__, author_email=ranger.__email__, license=ranger.\"}, {\"line_number\": 5, \"line_content\": \"        __license__, url='https://ranger.github.io', keywords=\"}, {\"line_number\": 6, \"line_content\": \"        'file-manager vim console file-launcher file-preview', classifiers=\"}, {\"line_number\": 7, \"line_content\": \"        ['Environment :: Console', 'Environment :: Console :: Curses',\"}, {\"line_number\": 8, \"line_content\": \"        'Intended Audience :: Developers',\"}, {\"line_number\": 9, \"line_content\": \"        'Intended Audience :: End Users/Desktop',\"}, {\"line_number\": 10, \"line_content\": \"        'Intended Audience :: System Administrators',\"}, {\"line_number\": 11, \"line_content\": \"        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\"}, {\"line_number\": 12, \"line_content\": \"        'Operating System :: MacOS', 'Operating System :: POSIX',\"}, {\"line_number\": 13, \"line_content\": \"        'Operating System :: Unix', 'Programming Language :: Python :: 2.6',\"}, {\"line_number\": 14, \"line_content\": \"        'Programming Language :: Python :: 2.7',\"}, {\"line_number\": 15, \"line_content\": \"        'Programming Language :: Python :: 3.1',\"}, {\"line_number\": 16, \"line_content\": \"        'Programming Language :: Python :: 3.2',\"}, {\"line_number\": 17, \"line_content\": \"        'Programming Language :: Python :: 3.3',\"}, {\"line_number\": 18, \"line_content\": \"        'Programming Language :: Python :: 3.4',\"}, {\"line_number\": 19, \"line_content\": \"        'Programming Language :: Python :: 3.5',\"}, {\"line_number\": 20, \"line_content\": \"        'Programming Language :: Python :: 3.6',\"}, {\"line_number\": 21, \"line_content\": \"        'Topic :: Desktop Environment :: File Managers',\"}, {\"line_number\": 22, \"line_content\": \"        'Topic :: Utilities'], cmdclass={'install_lib': InstallLib},\"}, {\"line_number\": 23, \"line_content\": \"        scripts=scripts_hack(('ranger.py', 'ranger'), (\"}, {\"line_number\": 24, \"line_content\": \"        'ranger/ext/rifle.py', 'rifle')), data_files=[('share/applications',\"}, {\"line_number\": 25, \"line_content\": \"        ['doc/ranger.desktop']), ('share/man/man1', ['doc/ranger.1',\"}, {\"line_number\": 26, \"line_content\": \"        'doc/rifle.1']), ('share/doc/ranger', ['doc/colorschemes.md',\"}, {\"line_number\": 27, \"line_content\": \"        'CHANGELOG.md', 'HACKING.md', 'README.md']), (\"}, {\"line_number\": 28, \"line_content\": \"        'share/doc/ranger/config', findall('doc/config')), (\"}, {\"line_number\": 29, \"line_content\": \"        'share/doc/ranger/config/colorschemes', findall(\"}, {\"line_number\": 30, \"line_content\": \"        'doc/config/colorschemes')), ('share/doc/ranger/examples', findall(\"}, {\"line_number\": 31, \"line_content\": \"        'examples')), ('share/doc/ranger/tools', findall('doc/tools'))],\"}, {\"line_number\": 32, \"line_content\": \"        package_data={'ranger': ['data/*', 'config/rc.conf',\"}, {\"line_number\": 33, \"line_content\": \"        'config/rifle.conf']}, packages=('ranger', 'ranger.api',\"}, {\"line_number\": 34, \"line_content\": \"        'ranger.colorschemes', 'ranger.config', 'ranger.container',\"}, {\"line_number\": 35, \"line_content\": \"        'ranger.core', 'ranger.ext', 'ranger.ext.vcs', 'ranger.gui',\"}, {\"line_number\": 36, \"line_content\": \"        'ranger.gui.widgets'))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ranger/ranger\", \"direct_link_to_file_line\": \"https://github.com/ranger/ranger/blob/master/ranger/setup.py#L46\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run(self):\"}, {\"line_number\": 2, \"line_content\": \"    install_lib.run(self)\"}, {\"line_number\": 3, \"line_content\": \"    for path in self.get_outputs():\"}, {\"line_number\": 4, \"line_content\": \"        for exe_path in EXECUTABLES_PATHS:\"}, {\"line_number\": 5, \"line_content\": \"            if path.endswith(exe_path):\"}, {\"line_number\": 6, \"line_content\": \"                mode = (os.stat(path).st_mode | 365) & 4095\"}, {\"line_number\": 7, \"line_content\": \"                print('changing mode of %s to %o' % (path, mode))\"}, {\"line_number\": 8, \"line_content\": \"                os.chmod(path, mode)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tonybeltramelli/pix2code\", \"direct_link_to_file_line\": \"https://github.com/tonybeltramelli/pix2code/blob/master/pix2code/model/classes/Vocabulary.py#L13\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.binary_vocabulary = {}\"}, {\"line_number\": 3, \"line_content\": \"    self.vocabulary = {}\"}, {\"line_number\": 4, \"line_content\": \"    self.token_lookup = {}\"}, {\"line_number\": 5, \"line_content\": \"    self.size = 0\"}, {\"line_number\": 6, \"line_content\": \"    self.append(START_TOKEN)\"}, {\"line_number\": 7, \"line_content\": \"    self.append(END_TOKEN)\"}, {\"line_number\": 8, \"line_content\": \"    self.append(PLACEHOLDER)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tonybeltramelli/pix2code\", \"direct_link_to_file_line\": \"https://github.com/tonybeltramelli/pix2code/blob/master/pix2code/model/classes/Vocabulary.py#L23\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def append(self, token):\"}, {\"line_number\": 2, \"line_content\": \"    if token not in self.vocabulary:\"}, {\"line_number\": 3, \"line_content\": \"        self.vocabulary[token] = self.size\"}, {\"line_number\": 4, \"line_content\": \"        self.token_lookup[self.size] = token\"}, {\"line_number\": 5, \"line_content\": \"        self.size += 1\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tonybeltramelli/pix2code\", \"direct_link_to_file_line\": \"https://github.com/tonybeltramelli/pix2code/blob/master/pix2code/model/classes/Vocabulary.py#L29\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def create_binary_representation(self):\"}, {\"line_number\": 2, \"line_content\": \"    if sys.version_info >= (3,):\"}, {\"line_number\": 3, \"line_content\": \"        items = self.vocabulary.items()\"}, {\"line_number\": 4, \"line_content\": \"    else:\"}, {\"line_number\": 5, \"line_content\": \"        items = self.vocabulary.iteritems()\"}, {\"line_number\": 6, \"line_content\": \"    for key, value in items:\"}, {\"line_number\": 7, \"line_content\": \"        binary = np.zeros(self.size)\"}, {\"line_number\": 8, \"line_content\": \"        binary[value] = 1\"}, {\"line_number\": 9, \"line_content\": \"        self.binary_vocabulary[key] = binary\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tonybeltramelli/pix2code\", \"direct_link_to_file_line\": \"https://github.com/tonybeltramelli/pix2code/blob/master/pix2code/model/classes/Vocabulary.py#L39\", \"contents\": {\"total_lines\": 14, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_serialized_binary_representation(self):\"}, {\"line_number\": 2, \"line_content\": \"    if len(self.binary_vocabulary) == 0:\"}, {\"line_number\": 3, \"line_content\": \"        self.create_binary_representation()\"}, {\"line_number\": 4, \"line_content\": \"    string = ''\"}, {\"line_number\": 5, \"line_content\": \"    if sys.version_info >= (3,):\"}, {\"line_number\": 6, \"line_content\": \"        items = self.binary_vocabulary.items()\"}, {\"line_number\": 7, \"line_content\": \"    else:\"}, {\"line_number\": 8, \"line_content\": \"        items = self.binary_vocabulary.iteritems()\"}, {\"line_number\": 9, \"line_content\": \"    for key, value in items:\"}, {\"line_number\": 10, \"line_content\": \"        array_as_string = np.array2string(value, separator=',',\"}, {\"line_number\": 11, \"line_content\": \"            max_line_width=self.size * self.size)\"}, {\"line_number\": 12, \"line_content\": \"        string += '{}{}{}\\\\n'.format(key, SEPARATOR, array_as_string[1:len(\"}, {\"line_number\": 13, \"line_content\": \"            array_as_string) - 1])\"}, {\"line_number\": 14, \"line_content\": \"    return string\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tonybeltramelli/pix2code\", \"direct_link_to_file_line\": \"https://github.com/tonybeltramelli/pix2code/blob/master/pix2code/model/classes/Vocabulary.py#L53\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def save(self, path):\"}, {\"line_number\": 2, \"line_content\": \"    output_file_name = '{}/words.vocab'.format(path)\"}, {\"line_number\": 3, \"line_content\": \"    output_file = open(output_file_name, 'w')\"}, {\"line_number\": 4, \"line_content\": \"    output_file.write(self.get_serialized_binary_representation())\"}, {\"line_number\": 5, \"line_content\": \"    output_file.close()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/alexjc/neural-doodle\", \"direct_link_to_file_line\": \"https://github.com/alexjc/neural-doodle/blob/master/neural-doodle/doodle.py#L67\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def error(message, *lines):\"}, {\"line_number\": 2, \"line_content\": \"    string = '\\\\n{}ERROR: ' + message + '{}\\\\n' + '\\\\n'.join(lines) + '{}\\\\n'\"}, {\"line_number\": 3, \"line_content\": \"    print(string.format(ansi.RED_B, ansi.RED, ansi.ENDC))\"}, {\"line_number\": 4, \"line_content\": \"    sys.exit(-1)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/alexjc/neural-doodle\", \"direct_link_to_file_line\": \"https://github.com/alexjc/neural-doodle/blob/master/neural-doodle/doodle.py#L108\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.pixel_mean = np.array([103.939, 116.779, 123.68], dtype=np.float32\"}, {\"line_number\": 3, \"line_content\": \"        ).reshape((3, 1, 1))\"}, {\"line_number\": 4, \"line_content\": \"    self.setup_model()\"}, {\"line_number\": 5, \"line_content\": \"    self.load_data()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/alexjc/neural-doodle\", \"direct_link_to_file_line\": \"https://github.com/alexjc/neural-doodle/blob/master/neural-doodle/doodle.py#L114\", \"contents\": {\"total_lines\": 45, \"lines\": [{\"line_number\": 1, \"line_content\": \"def setup_model(self, input=None):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Use lasagne to create a network of convolution layers, first using VGG19 as the framework\"}, {\"line_number\": 3, \"line_content\": \"        and then adding augmentations for Semantic Style Transfer.\"}, {\"line_number\": 4, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    net, self.channels = {}, {}\"}, {\"line_number\": 6, \"line_content\": \"    net['img'] = input or InputLayer((None, 3, None, None))\"}, {\"line_number\": 7, \"line_content\": \"    net['conv1_1'] = ConvLayer(net['img'], 64, 3, pad=1)\"}, {\"line_number\": 8, \"line_content\": \"    net['conv1_2'] = ConvLayer(net['conv1_1'], 64, 3, pad=1)\"}, {\"line_number\": 9, \"line_content\": \"    net['pool1'] = PoolLayer(net['conv1_2'], 2, mode='average_exc_pad')\"}, {\"line_number\": 10, \"line_content\": \"    net['conv2_1'] = ConvLayer(net['pool1'], 128, 3, pad=1)\"}, {\"line_number\": 11, \"line_content\": \"    net['conv2_2'] = ConvLayer(net['conv2_1'], 128, 3, pad=1)\"}, {\"line_number\": 12, \"line_content\": \"    net['pool2'] = PoolLayer(net['conv2_2'], 2, mode='average_exc_pad')\"}, {\"line_number\": 13, \"line_content\": \"    net['conv3_1'] = ConvLayer(net['pool2'], 256, 3, pad=1)\"}, {\"line_number\": 14, \"line_content\": \"    net['conv3_2'] = ConvLayer(net['conv3_1'], 256, 3, pad=1)\"}, {\"line_number\": 15, \"line_content\": \"    net['conv3_3'] = ConvLayer(net['conv3_2'], 256, 3, pad=1)\"}, {\"line_number\": 16, \"line_content\": \"    net['conv3_4'] = ConvLayer(net['conv3_3'], 256, 3, pad=1)\"}, {\"line_number\": 17, \"line_content\": \"    net['pool3'] = PoolLayer(net['conv3_4'], 2, mode='average_exc_pad')\"}, {\"line_number\": 18, \"line_content\": \"    net['conv4_1'] = ConvLayer(net['pool3'], 512, 3, pad=1)\"}, {\"line_number\": 19, \"line_content\": \"    net['conv4_2'] = ConvLayer(net['conv4_1'], 512, 3, pad=1)\"}, {\"line_number\": 20, \"line_content\": \"    net['conv4_3'] = ConvLayer(net['conv4_2'], 512, 3, pad=1)\"}, {\"line_number\": 21, \"line_content\": \"    net['conv4_4'] = ConvLayer(net['conv4_3'], 512, 3, pad=1)\"}, {\"line_number\": 22, \"line_content\": \"    net['pool4'] = PoolLayer(net['conv4_4'], 2, mode='average_exc_pad')\"}, {\"line_number\": 23, \"line_content\": \"    net['conv5_1'] = ConvLayer(net['pool4'], 512, 3, pad=1)\"}, {\"line_number\": 24, \"line_content\": \"    net['conv5_2'] = ConvLayer(net['conv5_1'], 512, 3, pad=1)\"}, {\"line_number\": 25, \"line_content\": \"    net['conv5_3'] = ConvLayer(net['conv5_2'], 512, 3, pad=1)\"}, {\"line_number\": 26, \"line_content\": \"    net['conv5_4'] = ConvLayer(net['conv5_3'], 512, 3, pad=1)\"}, {\"line_number\": 27, \"line_content\": \"    net['main'] = net['conv5_4']\"}, {\"line_number\": 28, \"line_content\": \"    net['map'] = InputLayer((1, 1, None, None))\"}, {\"line_number\": 29, \"line_content\": \"    for j, i in itertools.product(range(5), range(4)):\"}, {\"line_number\": 30, \"line_content\": \"        if j < 2 and i > 1:\"}, {\"line_number\": 31, \"line_content\": \"            continue\"}, {\"line_number\": 32, \"line_content\": \"        suffix = '%i_%i' % (j + 1, i + 1)\"}, {\"line_number\": 33, \"line_content\": \"        if i == 0:\"}, {\"line_number\": 34, \"line_content\": \"            net['map%i' % (j + 1)] = PoolLayer(net['map'], 2 ** j, mode=\"}, {\"line_number\": 35, \"line_content\": \"                'average_exc_pad')\"}, {\"line_number\": 36, \"line_content\": \"        self.channels[suffix] = net['conv' + suffix].num_filters\"}, {\"line_number\": 37, \"line_content\": \"        if args.semantic_weight > 0.0:\"}, {\"line_number\": 38, \"line_content\": \"            net['sem' + suffix] = ConcatLayer([net['conv' + suffix], net[\"}, {\"line_number\": 39, \"line_content\": \"                'map%i' % (j + 1)]])\"}, {\"line_number\": 40, \"line_content\": \"        else:\"}, {\"line_number\": 41, \"line_content\": \"            net['sem' + suffix] = net['conv' + suffix]\"}, {\"line_number\": 42, \"line_content\": \"        net['dup' + suffix] = InputLayer(net['sem' + suffix].output_shape)\"}, {\"line_number\": 43, \"line_content\": \"        net['nn' + suffix] = ConvLayer(net['dup' + suffix], 1, 3, b=None,\"}, {\"line_number\": 44, \"line_content\": \"            pad=0, flip_filters=False)\"}, {\"line_number\": 45, \"line_content\": \"    self.network = net\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/alexjc/neural-doodle\", \"direct_link_to_file_line\": \"https://github.com/alexjc/neural-doodle/blob/master/neural-doodle/doodle.py#L164\", \"contents\": {\"total_lines\": 14, \"lines\": [{\"line_number\": 1, \"line_content\": \"def load_data(self):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Open the serialized parameters from a pre-trained network, and load them into the model created.\"}, {\"line_number\": 3, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    vgg19_file = os.path.join(os.path.dirname(__file__), 'vgg19_conv.pkl.bz2')\"}, {\"line_number\": 5, \"line_content\": \"    if not os.path.exists(vgg19_file):\"}, {\"line_number\": 6, \"line_content\": \"        error(\"}, {\"line_number\": 7, \"line_content\": \"            'Model file with pre-trained convolution layers not found. Download here...'\"}, {\"line_number\": 8, \"line_content\": \"            ,\"}, {\"line_number\": 9, \"line_content\": \"            'https://github.com/alexjc/neural-doodle/releases/download/v0.0/vgg19_conv.pkl.bz2'\"}, {\"line_number\": 10, \"line_content\": \"            )\"}, {\"line_number\": 11, \"line_content\": \"    data = pickle.load(bz2.open(vgg19_file, 'rb'))\"}, {\"line_number\": 12, \"line_content\": \"    params = lasagne.layers.get_all_param_values(self.network['main'])\"}, {\"line_number\": 13, \"line_content\": \"    lasagne.layers.set_all_param_values(self.network['main'], data[:len(\"}, {\"line_number\": 14, \"line_content\": \"        params)])\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/alexjc/neural-doodle\", \"direct_link_to_file_line\": \"https://github.com/alexjc/neural-doodle/blob/master/neural-doodle/doodle.py#L176\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def setup(self, layers):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Setup the inputs and outputs, knowing the layers that are required by the optimization algorithm.\"}, {\"line_number\": 3, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    self.tensor_img = T.tensor4()\"}, {\"line_number\": 5, \"line_content\": \"    self.tensor_map = T.tensor4()\"}, {\"line_number\": 6, \"line_content\": \"    tensor_inputs = {self.network['img']: self.tensor_img, self.network[\"}, {\"line_number\": 7, \"line_content\": \"        'map']: self.tensor_map}\"}, {\"line_number\": 8, \"line_content\": \"    outputs = lasagne.layers.get_output([self.network[l] for l in layers],\"}, {\"line_number\": 9, \"line_content\": \"        tensor_inputs)\"}, {\"line_number\": 10, \"line_content\": \"    self.tensor_outputs = {k: v for k, v in zip(layers, outputs)}\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/keras-team/autokeras\", \"direct_link_to_file_line\": \"https://github.com/keras-team/autokeras/blob/master/autokeras/autokeras/nodes.py#L8\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def serialize(obj):\"}, {\"line_number\": 2, \"line_content\": \"    return tf.keras.utils.serialize_keras_object(obj)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/keras-team/autokeras\", \"direct_link_to_file_line\": \"https://github.com/keras-team/autokeras/blob/master/autokeras/autokeras/nodes.py#L12\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def deserialize(config, custom_objects=None):\"}, {\"line_number\": 2, \"line_content\": \"    return tf.keras.utils.deserialize_keras_object(config, module_objects=\"}, {\"line_number\": 3, \"line_content\": \"        globals(), custom_objects=custom_objects, printable_module_name='nodes'\"}, {\"line_number\": 4, \"line_content\": \"        )\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/keras-team/autokeras\", \"direct_link_to_file_line\": \"https://github.com/keras-team/autokeras/blob/master/autokeras/autokeras/nodes.py#L26\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def build(self):\"}, {\"line_number\": 2, \"line_content\": \"    return tf.keras.Input(shape=self.shape, dtype=tf.float32)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/keras-team/autokeras\", \"direct_link_to_file_line\": \"https://github.com/keras-team/autokeras/blob/master/autokeras/autokeras/nodes.py#L29\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_adapter(self):\"}, {\"line_number\": 2, \"line_content\": \"    return adapters.InputAdapter()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/keras-team/autokeras\", \"direct_link_to_file_line\": \"https://github.com/keras-team/autokeras/blob/master/autokeras/autokeras/nodes.py#L32\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def config_from_adapter(self, adapter):\"}, {\"line_number\": 2, \"line_content\": \"    self.shape = adapter.shape\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/quantopian/zipline\", \"direct_link_to_file_line\": \"https://github.com/quantopian/zipline/blob/master/zipline/setup.py#L81\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def window_specialization(typename):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Make an extension for an AdjustedArrayWindow specialization.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    return Extension('zipline.lib._{name}window'.format(name=typename), [\"}, {\"line_number\": 4, \"line_content\": \"        'zipline/lib/_{name}window.pyx'.format(name=typename)], depends=[\"}, {\"line_number\": 5, \"line_content\": \"        'zipline/lib/_windowtemplate.pxi'])\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/quantopian/zipline\", \"direct_link_to_file_line\": \"https://github.com/quantopian/zipline/blob/master/zipline/setup.py#L174\", \"contents\": {\"total_lines\": 19, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _conda_format(req):\"}, {\"line_number\": 2, \"line_content\": \"    def _sub(m):\"}, {\"line_number\": 3, \"line_content\": \"        name = m.group('name').lower()\"}, {\"line_number\": 4, \"line_content\": \"        if name == 'numpy':\"}, {\"line_number\": 5, \"line_content\": \"            return 'numpy x.x'\"}, {\"line_number\": 6, \"line_content\": \"        if name == 'tables':\"}, {\"line_number\": 7, \"line_content\": \"            name = 'pytables'\"}, {\"line_number\": 8, \"line_content\": \"        comp, spec = m.group('comp', 'spec')\"}, {\"line_number\": 9, \"line_content\": \"        if comp and spec:\"}, {\"line_number\": 10, \"line_content\": \"            formatted = '%s %s%s' % (name, comp, spec)\"}, {\"line_number\": 11, \"line_content\": \"        else:\"}, {\"line_number\": 12, \"line_content\": \"            formatted = name\"}, {\"line_number\": 13, \"line_content\": \"        pycomp, pyspec = m.group('pycomp', 'pyspec')\"}, {\"line_number\": 14, \"line_content\": \"        if pyspec:\"}, {\"line_number\": 15, \"line_content\": \"            selector = ' # [int(py) %s int(%s)]' % (pycomp, ''.join(pyspec.\"}, {\"line_number\": 16, \"line_content\": \"                split('.')[:2]).ljust(2, '0'))\"}, {\"line_number\": 17, \"line_content\": \"            return formatted + selector\"}, {\"line_number\": 18, \"line_content\": \"        return formatted\"}, {\"line_number\": 19, \"line_content\": \"    return REQ_PATTERN.sub(_sub, req, 1)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/quantopian/zipline\", \"direct_link_to_file_line\": \"https://github.com/quantopian/zipline/blob/master/zipline/setup.py#L217\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def install_requires(conda_format=False):\"}, {\"line_number\": 2, \"line_content\": \"    return read_requirements('etc/requirements.in', conda_format=conda_format)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/quantopian/zipline\", \"direct_link_to_file_line\": \"https://github.com/quantopian/zipline/blob/master/zipline/setup.py#L221\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def extras_requires(conda_format=False):\"}, {\"line_number\": 2, \"line_content\": \"    extras = {extra: read_requirements('etc/requirements_{0}.in'.format(\"}, {\"line_number\": 3, \"line_content\": \"        extra), conda_format=conda_format) for extra in ('dev', 'talib')}\"}, {\"line_number\": 4, \"line_content\": \"    extras['all'] = [req for reqs in extras.values() for req in reqs]\"}, {\"line_number\": 5, \"line_content\": \"    return extras\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/quantopian/zipline\", \"direct_link_to_file_line\": \"https://github.com/quantopian/zipline/blob/master/zipline/setup.py#L41\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __contains__(self, key):\"}, {\"line_number\": 2, \"line_content\": \"    return key == 'build_ext' or super(LazyBuildExtCommandClass, self\"}, {\"line_number\": 3, \"line_content\": \"        ).__contains__(key)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/python/mypy\", \"direct_link_to_file_line\": \"https://github.com/python/mypy/blob/master/mypy/setup.py#L39\", \"contents\": {\"total_lines\": 16, \"lines\": [{\"line_number\": 1, \"line_content\": \"def find_package_data(base, globs, root='mypy'):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Find all interesting data files, for setup(package_data=)\"}, {\"line_number\": 3, \"line_content\": \"    Arguments:\"}, {\"line_number\": 4, \"line_content\": \"      root:  The directory to search in.\"}, {\"line_number\": 5, \"line_content\": \"      globs: A list of glob patterns to accept files.\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    rv_dirs = [root for root, dirs, files in os.walk(base)]\"}, {\"line_number\": 8, \"line_content\": \"    rv = []\"}, {\"line_number\": 9, \"line_content\": \"    for rv_dir in rv_dirs:\"}, {\"line_number\": 10, \"line_content\": \"        files = []\"}, {\"line_number\": 11, \"line_content\": \"        for pat in globs:\"}, {\"line_number\": 12, \"line_content\": \"            files += glob.glob(os.path.join(rv_dir, pat))\"}, {\"line_number\": 13, \"line_content\": \"        if not files:\"}, {\"line_number\": 14, \"line_content\": \"            continue\"}, {\"line_number\": 15, \"line_content\": \"        rv.extend([os.path.relpath(f, root) for f in files])\"}, {\"line_number\": 16, \"line_content\": \"    return rv\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/python/mypy\", \"direct_link_to_file_line\": \"https://github.com/python/mypy/blob/master/mypy/setup.py#L60\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def pin_version(self):\"}, {\"line_number\": 2, \"line_content\": \"    path = os.path.join(self.build_lib, 'mypy')\"}, {\"line_number\": 3, \"line_content\": \"    self.mkpath(path)\"}, {\"line_number\": 4, \"line_content\": \"    with open(os.path.join(path, 'version.py'), 'w') as stream:\"}, {\"line_number\": 5, \"line_content\": \"        stream.write('__version__ = \\\"{}\\\"\\\\n'.format(version))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/python/mypy\", \"direct_link_to_file_line\": \"https://github.com/python/mypy/blob/master/mypy/setup.py#L66\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.execute(self.pin_version, ())\"}, {\"line_number\": 3, \"line_content\": \"    build_py.run(self)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/python/mypy\", \"direct_link_to_file_line\": \"https://github.com/python/mypy/blob/master/mypy/conftest.py#L8\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def pytest_configure(config):\"}, {\"line_number\": 2, \"line_content\": \"    mypy_source_root = os.path.dirname(os.path.abspath(__file__))\"}, {\"line_number\": 3, \"line_content\": \"    if os.getcwd() != mypy_source_root:\"}, {\"line_number\": 4, \"line_content\": \"        os.chdir(mypy_source_root)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/python/mypy\", \"direct_link_to_file_line\": \"https://github.com/python/mypy/blob/master/mypy/scripts/find_type.py#L63\", \"contents\": {\"total_lines\": 23, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    (filename, start_line_str, start_col_str, end_line_str, end_col_str, *\"}, {\"line_number\": 3, \"line_content\": \"        mypy_and_args) = sys.argv[1:]\"}, {\"line_number\": 4, \"line_content\": \"    start_line = int(start_line_str)\"}, {\"line_number\": 5, \"line_content\": \"    start_col = int(start_col_str)\"}, {\"line_number\": 6, \"line_content\": \"    end_line = int(end_line_str)\"}, {\"line_number\": 7, \"line_content\": \"    end_col = int(end_col_str)\"}, {\"line_number\": 8, \"line_content\": \"    with open(filename, 'r') as f:\"}, {\"line_number\": 9, \"line_content\": \"        lines = f.readlines()\"}, {\"line_number\": 10, \"line_content\": \"        lines[end_line - 1] = update_line(lines[end_line - 1],\"}, {\"line_number\": 11, \"line_content\": \"            REVEAL_TYPE_END, end_col)\"}, {\"line_number\": 12, \"line_content\": \"        lines[start_line - 1] = update_line(lines[start_line - 1],\"}, {\"line_number\": 13, \"line_content\": \"            REVEAL_TYPE_START, start_col)\"}, {\"line_number\": 14, \"line_content\": \"        with tempfile.NamedTemporaryFile(mode='w', prefix='mypy') as tmp_f:\"}, {\"line_number\": 15, \"line_content\": \"            tmp_f.writelines(lines)\"}, {\"line_number\": 16, \"line_content\": \"            tmp_f.flush()\"}, {\"line_number\": 17, \"line_content\": \"            output = run_mypy(mypy_and_args, filename, tmp_f.name)\"}, {\"line_number\": 18, \"line_content\": \"            revealed_type, error = process_output(output, filename, start_line)\"}, {\"line_number\": 19, \"line_content\": \"            if revealed_type:\"}, {\"line_number\": 20, \"line_content\": \"                print(revealed_type)\"}, {\"line_number\": 21, \"line_content\": \"            if error:\"}, {\"line_number\": 22, \"line_content\": \"                print(output)\"}, {\"line_number\": 23, \"line_content\": \"            exit(int(error))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/harelba/q\", \"direct_link_to_file_line\": \"https://github.com/harelba/q/blob/master/q/bin/q.py#L63\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_stdout_encoding(encoding_override=None):\"}, {\"line_number\": 2, \"line_content\": \"    if encoding_override is not None and encoding_override != 'none':\"}, {\"line_number\": 3, \"line_content\": \"        return encoding_override\"}, {\"line_number\": 4, \"line_content\": \"    if sys.stdout.isatty():\"}, {\"line_number\": 5, \"line_content\": \"        return sys.stdout.encoding\"}, {\"line_number\": 6, \"line_content\": \"    else:\"}, {\"line_number\": 7, \"line_content\": \"        return locale.getpreferredencoding()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/harelba/q\", \"direct_link_to_file_line\": \"https://github.com/harelba/q/blob/master/q/bin/q.py#L74\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def sha1(data):\"}, {\"line_number\": 2, \"line_content\": \"    if not isinstance(data, str) and not isinstance(data, unicode):\"}, {\"line_number\": 3, \"line_content\": \"        return hashlib.sha1(str(data)).hexdigest()\"}, {\"line_number\": 4, \"line_content\": \"    return hashlib.sha1(data).hexdigest()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/harelba/q\", \"direct_link_to_file_line\": \"https://github.com/harelba/q/blob/master/q/bin/q.py#L79\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def regexp(regular_expression, data):\"}, {\"line_number\": 2, \"line_content\": \"    if data is not None:\"}, {\"line_number\": 3, \"line_content\": \"        if not isinstance(data, str) and not isinstance(data, unicode):\"}, {\"line_number\": 4, \"line_content\": \"            data = str(data)\"}, {\"line_number\": 5, \"line_content\": \"        return re.search(regular_expression, data) is not None\"}, {\"line_number\": 6, \"line_content\": \"    else:\"}, {\"line_number\": 7, \"line_content\": \"        return False\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/harelba/q\", \"direct_link_to_file_line\": \"https://github.com/harelba/q/blob/master/q/bin/q.py#L92\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def percentile(l, p):\"}, {\"line_number\": 2, \"line_content\": \"    if not l:\"}, {\"line_number\": 3, \"line_content\": \"        return None\"}, {\"line_number\": 4, \"line_content\": \"    k = p * (len(l) - 1)\"}, {\"line_number\": 5, \"line_content\": \"    f = math.floor(k)\"}, {\"line_number\": 6, \"line_content\": \"    c = math.ceil(k)\"}, {\"line_number\": 7, \"line_content\": \"    if c == f:\"}, {\"line_number\": 8, \"line_content\": \"        return l[int(k)]\"}, {\"line_number\": 9, \"line_content\": \"    return (c - k) * l[int(f)] + (k - f) * l[int(c)]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/harelba/q\", \"direct_link_to_file_line\": \"https://github.com/harelba/q/blob/master/q/bin/q.py#L727\", \"contents\": {\"total_lines\": 22, \"lines\": [{\"line_number\": 1, \"line_content\": \"def py2_encoded_csv_reader(encoding, f, dialect, is_stdin, **kwargs):\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        csv_reader = csv.reader(f, dialect, **kwargs)\"}, {\"line_number\": 4, \"line_content\": \"        if encoding is not None and encoding != 'none':\"}, {\"line_number\": 5, \"line_content\": \"            for row in csv_reader:\"}, {\"line_number\": 6, \"line_content\": \"                yield [unicode(x, encoding) for x in row]\"}, {\"line_number\": 7, \"line_content\": \"        else:\"}, {\"line_number\": 8, \"line_content\": \"            for row in csv_reader:\"}, {\"line_number\": 9, \"line_content\": \"                yield row\"}, {\"line_number\": 10, \"line_content\": \"    except ValueError as e:\"}, {\"line_number\": 11, \"line_content\": \"        if e.message is not None and e.message.startswith(\"}, {\"line_number\": 12, \"line_content\": \"            'could not convert string to'):\"}, {\"line_number\": 13, \"line_content\": \"            raise CouldNotConvertStringToNumericValueException(e.message)\"}, {\"line_number\": 14, \"line_content\": \"        else:\"}, {\"line_number\": 15, \"line_content\": \"            raise CouldNotParseInputException(str(e))\"}, {\"line_number\": 16, \"line_content\": \"    except Exception as e:\"}, {\"line_number\": 17, \"line_content\": \"        if str(e).startswith('field larger than field limit'):\"}, {\"line_number\": 18, \"line_content\": \"            raise ColumnMaxLengthLimitExceededException(str(e))\"}, {\"line_number\": 19, \"line_content\": \"        elif 'universal-newline' in str(e):\"}, {\"line_number\": 20, \"line_content\": \"            raise UniversalNewlinesExistException()\"}, {\"line_number\": 21, \"line_content\": \"        else:\"}, {\"line_number\": 22, \"line_content\": \"            raise\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ageitgey/face_recognition\", \"direct_link_to_file_line\": \"https://github.com/ageitgey/face_recognition/blob/master/face_recognition/face_recognition/api.py#L32\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _rect_to_css(rect):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Convert a dlib 'rect' object to a plain tuple in (top, right, bottom, left) order\"}, {\"line_number\": 4, \"line_content\": \"    :param rect: a dlib 'rect' object\"}, {\"line_number\": 5, \"line_content\": \"    :return: a plain tuple representation of the rect in (top, right, bottom, left) order\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    return rect.top(), rect.right(), rect.bottom(), rect.left()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ageitgey/face_recognition\", \"direct_link_to_file_line\": \"https://github.com/ageitgey/face_recognition/blob/master/face_recognition/face_recognition/api.py#L42\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _css_to_rect(css):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Convert a tuple in (top, right, bottom, left) order to a dlib `rect` object\"}, {\"line_number\": 4, \"line_content\": \"    :param css:  plain tuple representation of the rect in (top, right, bottom, left) order\"}, {\"line_number\": 5, \"line_content\": \"    :return: a dlib `rect` object\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    return dlib.rectangle(css[3], css[0], css[1], css[2])\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ageitgey/face_recognition\", \"direct_link_to_file_line\": \"https://github.com/ageitgey/face_recognition/blob/master/face_recognition/face_recognition/api.py#L52\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _trim_css_to_bounds(css, image_shape):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Make sure a tuple in (top, right, bottom, left) order is within the bounds of the image.\"}, {\"line_number\": 4, \"line_content\": \"    :param css:  plain tuple representation of the rect in (top, right, bottom, left) order\"}, {\"line_number\": 5, \"line_content\": \"    :param image_shape: numpy shape of the image array\"}, {\"line_number\": 6, \"line_content\": \"    :return: a trimmed plain tuple representation of the rect in (top, right, bottom, left) order\"}, {\"line_number\": 7, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 8, \"line_content\": \"    return max(css[0], 0), min(css[1], image_shape[1]), min(css[2],\"}, {\"line_number\": 9, \"line_content\": \"        image_shape[0]), max(css[3], 0)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ageitgey/face_recognition\", \"direct_link_to_file_line\": \"https://github.com/ageitgey/face_recognition/blob/master/face_recognition/face_recognition/api.py#L63\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def face_distance(face_encodings, face_to_compare):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Given a list of face encodings, compare them to a known face encoding and get a euclidean distance\"}, {\"line_number\": 4, \"line_content\": \"    for each comparison face. The distance tells you how similar the faces are.\"}, {\"line_number\": 5, \"line_content\": \"    :param faces: List of face encodings to compare\"}, {\"line_number\": 6, \"line_content\": \"    :param face_to_compare: A face encoding to compare against\"}, {\"line_number\": 7, \"line_content\": \"    :return: A numpy ndarray with the distance for each face in the same order as the 'faces' array\"}, {\"line_number\": 8, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 9, \"line_content\": \"    if len(face_encodings) == 0:\"}, {\"line_number\": 10, \"line_content\": \"        return np.empty(0)\"}, {\"line_number\": 11, \"line_content\": \"    return np.linalg.norm(face_encodings - face_to_compare, axis=1)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ageitgey/face_recognition\", \"direct_link_to_file_line\": \"https://github.com/ageitgey/face_recognition/blob/master/face_recognition/face_recognition/api.py#L78\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def load_image_file(file, mode='RGB'):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Loads an image file (.jpg, .png, etc) into a numpy array\"}, {\"line_number\": 4, \"line_content\": \"    :param file: image file name or file object to load\"}, {\"line_number\": 5, \"line_content\": \"    :param mode: format to convert the image to. Only 'RGB' (8-bit RGB, 3 channels) and 'L' (black and white) are supported.\"}, {\"line_number\": 6, \"line_content\": \"    :return: image contents as numpy array\"}, {\"line_number\": 7, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 8, \"line_content\": \"    im = PIL.Image.open(file)\"}, {\"line_number\": 9, \"line_content\": \"    if mode:\"}, {\"line_number\": 10, \"line_content\": \"        im = im.convert(mode)\"}, {\"line_number\": 11, \"line_content\": \"    return np.array(im)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kovidgoyal/kitty\", \"direct_link_to_file_line\": \"https://github.com/kovidgoyal/kitty/blob/master/kitty/gen-wcwidth.py#L231\", \"contents\": {\"total_lines\": 17, \"lines\": [{\"line_number\": 1, \"line_content\": \"@contextmanager\"}, {\"line_number\": 2, \"line_content\": \"def create_header(path: str, include_data_types: bool=True) ->Generator[\"}, {\"line_number\": 3, \"line_content\": \"    Callable, None, None]:\"}, {\"line_number\": 4, \"line_content\": \"    with open(path, 'w') as f:\"}, {\"line_number\": 5, \"line_content\": \"        p = partial(print, file=f)\"}, {\"line_number\": 6, \"line_content\": \"        p('// unicode data, built from the unicode standard on:', date.today())\"}, {\"line_number\": 7, \"line_content\": \"        p('// see gen-wcwidth.py')\"}, {\"line_number\": 8, \"line_content\": \"        if path.endswith('.h'):\"}, {\"line_number\": 9, \"line_content\": \"            p('#pragma once')\"}, {\"line_number\": 10, \"line_content\": \"        if include_data_types:\"}, {\"line_number\": 11, \"line_content\": \"            p('#include \\\"data-types.h\\\"\\\\n')\"}, {\"line_number\": 12, \"line_content\": \"            p('START_ALLOW_CASE_RANGE')\"}, {\"line_number\": 13, \"line_content\": \"        p()\"}, {\"line_number\": 14, \"line_content\": \"        yield p\"}, {\"line_number\": 15, \"line_content\": \"        p()\"}, {\"line_number\": 16, \"line_content\": \"        if include_data_types:\"}, {\"line_number\": 17, \"line_content\": \"            p('END_ALLOW_CASE_RANGE')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kovidgoyal/kitty\", \"direct_link_to_file_line\": \"https://github.com/kovidgoyal/kitty/blob/master/kitty/publish.py#L125\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, path: str):\"}, {\"line_number\": 2, \"line_content\": \"    io.FileIO.__init__(self, path, 'rb')\"}, {\"line_number\": 3, \"line_content\": \"    self.seek(0, os.SEEK_END)\"}, {\"line_number\": 4, \"line_content\": \"    self._total = self.tell()\"}, {\"line_number\": 5, \"line_content\": \"    self.seek(0)\"}, {\"line_number\": 6, \"line_content\": \"    self.start_time = time.monotonic()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kovidgoyal/kitty\", \"direct_link_to_file_line\": \"https://github.com/kovidgoyal/kitty/blob/master/kitty/setup.py#L497\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, incremental: bool):\"}, {\"line_number\": 2, \"line_content\": \"    self.incremental = incremental\"}, {\"line_number\": 3, \"line_content\": \"    self.compile_commands: List[Command] = []\"}, {\"line_number\": 4, \"line_content\": \"    self.link_commands: List[Command] = []\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kovidgoyal/kitty\", \"direct_link_to_file_line\": \"https://github.com/kovidgoyal/kitty/blob/master/kitty/bypy/init_env.py#L17\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def read_src_file(name):\"}, {\"line_number\": 2, \"line_content\": \"    with open(os.path.join(KITTY_DIR, 'kitty', name), 'rb') as f:\"}, {\"line_number\": 3, \"line_content\": \"        return f.read().decode('utf-8')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/kovidgoyal/kitty\", \"direct_link_to_file_line\": \"https://github.com/kovidgoyal/kitty/blob/master/kitty/bypy/init_env.py#L22\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def initialize_constants():\"}, {\"line_number\": 2, \"line_content\": \"    kitty_constants = {}\"}, {\"line_number\": 3, \"line_content\": \"    src = read_src_file('constants.py')\"}, {\"line_number\": 4, \"line_content\": \"    nv = re.search('Version\\\\\\\\((\\\\\\\\d+), (\\\\\\\\d+), (\\\\\\\\d+)\\\\\\\\)', src)\"}, {\"line_number\": 5, \"line_content\": \"    kitty_constants['version'] = '%s.%s.%s' % (nv.group(1), nv.group(2), nv\"}, {\"line_number\": 6, \"line_content\": \"        .group(3))\"}, {\"line_number\": 7, \"line_content\": \"    kitty_constants['appname'] = re.search(\"}, {\"line_number\": 8, \"line_content\": \"        'appname: str\\\\\\\\s+=\\\\\\\\s+(u{0,1})[\\\\\\\\\\\\'\\\"]([^\\\\\\\\\\\\'\\\"]+)[\\\\\\\\\\\\'\\\"]', src).group(2)\"}, {\"line_number\": 9, \"line_content\": \"    return kitty_constants\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/deezer/spleeter\", \"direct_link_to_file_line\": \"https://github.com/deezer/spleeter/blob/master/spleeter/spleeter/dataset.py#L57\", \"contents\": {\"total_lines\": 15, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_training_dataset(audio_params, audio_adapter, audio_path):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Builds training dataset.\"}, {\"line_number\": 3, \"line_content\": \"    :param audio_params: Audio parameters.\"}, {\"line_number\": 4, \"line_content\": \"    :param audio_adapter: Adapter to load audio from.\"}, {\"line_number\": 5, \"line_content\": \"    :param audio_path: Path of directory containing audio.\"}, {\"line_number\": 6, \"line_content\": \"    :returns: Built dataset.\"}, {\"line_number\": 7, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 8, \"line_content\": \"    builder = DatasetBuilder(audio_params, audio_adapter, audio_path,\"}, {\"line_number\": 9, \"line_content\": \"        chunk_duration=audio_params.get('chunk_duration', 20.0),\"}, {\"line_number\": 10, \"line_content\": \"        random_seed=audio_params.get('random_seed', 0))\"}, {\"line_number\": 11, \"line_content\": \"    return builder.build(audio_params.get('train_csv'), cache_directory=\"}, {\"line_number\": 12, \"line_content\": \"        audio_params.get('training_cache'), batch_size=audio_params.get(\"}, {\"line_number\": 13, \"line_content\": \"        'batch_size'), n_chunks_per_song=audio_params.get(\"}, {\"line_number\": 14, \"line_content\": \"        'n_chunks_per_song', 2), random_data_augmentation=False,\"}, {\"line_number\": 15, \"line_content\": \"        convert_to_uint=True, wait_for_cache=False)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/deezer/spleeter\", \"direct_link_to_file_line\": \"https://github.com/deezer/spleeter/blob/master/spleeter/spleeter/dataset.py#L81\", \"contents\": {\"total_lines\": 14, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_validation_dataset(audio_params, audio_adapter, audio_path):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Builds validation dataset.\"}, {\"line_number\": 3, \"line_content\": \"    :param audio_params: Audio parameters.\"}, {\"line_number\": 4, \"line_content\": \"    :param audio_adapter: Adapter to load audio from.\"}, {\"line_number\": 5, \"line_content\": \"    :param audio_path: Path of directory containing audio.\"}, {\"line_number\": 6, \"line_content\": \"    :returns: Built dataset.\"}, {\"line_number\": 7, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 8, \"line_content\": \"    builder = DatasetBuilder(audio_params, audio_adapter, audio_path,\"}, {\"line_number\": 9, \"line_content\": \"        chunk_duration=12.0)\"}, {\"line_number\": 10, \"line_content\": \"    return builder.build(audio_params.get('validation_csv'), batch_size=\"}, {\"line_number\": 11, \"line_content\": \"        audio_params.get('batch_size'), cache_directory=audio_params.get(\"}, {\"line_number\": 12, \"line_content\": \"        'validation_cache'), convert_to_uint=True, infinite_generator=False,\"}, {\"line_number\": 13, \"line_content\": \"        n_chunks_per_song=1, random_data_augmentation=False,\"}, {\"line_number\": 14, \"line_content\": \"        random_time_crop=False, shuffle=False)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/deezer/spleeter\", \"direct_link_to_file_line\": \"https://github.com/deezer/spleeter/blob/master/spleeter/spleeter/dataset.py#L111\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, parent, instrument):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Default constructor.\"}, {\"line_number\": 3, \"line_content\": \"        :param parent: Parent dataset builder.\"}, {\"line_number\": 4, \"line_content\": \"        :param instrument: Target instrument.\"}, {\"line_number\": 5, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    self._parent = parent\"}, {\"line_number\": 7, \"line_content\": \"    self._instrument = instrument\"}, {\"line_number\": 8, \"line_content\": \"    self._spectrogram_key = f'{instrument}_spectrogram'\"}, {\"line_number\": 9, \"line_content\": \"    self._min_spectrogram_key = f'min_{instrument}_spectrogram'\"}, {\"line_number\": 10, \"line_content\": \"    self._max_spectrogram_key = f'max_{instrument}_spectrogram'\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/deezer/spleeter\", \"direct_link_to_file_line\": \"https://github.com/deezer/spleeter/blob/master/spleeter/spleeter/dataset.py#L123\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def load_waveform(self, sample):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Load waveform for given sample. \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    return dict(sample, **self._parent._audio_adapter.load_tf_waveform(\"}, {\"line_number\": 4, \"line_content\": \"        sample[f'{self._instrument}_path'], offset=sample['start'],\"}, {\"line_number\": 5, \"line_content\": \"        duration=self._parent._chunk_duration, sample_rate=self._parent.\"}, {\"line_number\": 6, \"line_content\": \"        _sample_rate, waveform_name='waveform'))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/deezer/spleeter\", \"direct_link_to_file_line\": \"https://github.com/deezer/spleeter/blob/master/spleeter/spleeter/dataset.py#L132\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def compute_spectrogram(self, sample):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Compute spectrogram of the given sample. \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    return dict(sample, **{self._spectrogram_key: compute_spectrogram_tf(\"}, {\"line_number\": 4, \"line_content\": \"        sample['waveform'], frame_length=self._parent._frame_length,\"}, {\"line_number\": 5, \"line_content\": \"        frame_step=self._parent._frame_step, spec_exponent=1.0,\"}, {\"line_number\": 6, \"line_content\": \"        window_exponent=1.0)})\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/open-mmlab/mmdetection\", \"direct_link_to_file_line\": \"https://github.com/open-mmlab/mmdetection/blob/master/mmdetection/setup.py#L12\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def readme():\"}, {\"line_number\": 2, \"line_content\": \"    with open('README.md', encoding='utf-8') as f:\"}, {\"line_number\": 3, \"line_content\": \"        content = f.read()\"}, {\"line_number\": 4, \"line_content\": \"    return content\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/open-mmlab/mmdetection\", \"direct_link_to_file_line\": \"https://github.com/open-mmlab/mmdetection/blob/master/mmdetection/setup.py#L21\", \"contents\": {\"total_lines\": 19, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_git_hash():\"}, {\"line_number\": 2, \"line_content\": \"    def _minimal_ext_cmd(cmd):\"}, {\"line_number\": 3, \"line_content\": \"        env = {}\"}, {\"line_number\": 4, \"line_content\": \"        for k in ['SYSTEMROOT', 'PATH', 'HOME']:\"}, {\"line_number\": 5, \"line_content\": \"            v = os.environ.get(k)\"}, {\"line_number\": 6, \"line_content\": \"            if v is not None:\"}, {\"line_number\": 7, \"line_content\": \"                env[k] = v\"}, {\"line_number\": 8, \"line_content\": \"        env['LANGUAGE'] = 'C'\"}, {\"line_number\": 9, \"line_content\": \"        env['LANG'] = 'C'\"}, {\"line_number\": 10, \"line_content\": \"        env['LC_ALL'] = 'C'\"}, {\"line_number\": 11, \"line_content\": \"        out = subprocess.Popen(cmd, stdout=subprocess.PIPE, env=env\"}, {\"line_number\": 12, \"line_content\": \"            ).communicate()[0]\"}, {\"line_number\": 13, \"line_content\": \"        return out\"}, {\"line_number\": 14, \"line_content\": \"    try:\"}, {\"line_number\": 15, \"line_content\": \"        out = _minimal_ext_cmd(['git', 'rev-parse', 'HEAD'])\"}, {\"line_number\": 16, \"line_content\": \"        sha = out.strip().decode('ascii')\"}, {\"line_number\": 17, \"line_content\": \"    except OSError:\"}, {\"line_number\": 18, \"line_content\": \"        sha = 'unknown'\"}, {\"line_number\": 19, \"line_content\": \"    return sha\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/open-mmlab/mmdetection\", \"direct_link_to_file_line\": \"https://github.com/open-mmlab/mmdetection/blob/master/mmdetection/setup.py#L47\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_hash():\"}, {\"line_number\": 2, \"line_content\": \"    if os.path.exists('.git'):\"}, {\"line_number\": 3, \"line_content\": \"        sha = get_git_hash()[:7]\"}, {\"line_number\": 4, \"line_content\": \"    elif os.path.exists(version_file):\"}, {\"line_number\": 5, \"line_content\": \"        try:\"}, {\"line_number\": 6, \"line_content\": \"            from mmdet.version import __version__\"}, {\"line_number\": 7, \"line_content\": \"            sha = __version__.split('+')[-1]\"}, {\"line_number\": 8, \"line_content\": \"        except ImportError:\"}, {\"line_number\": 9, \"line_content\": \"            raise ImportError('Unable to get git version')\"}, {\"line_number\": 10, \"line_content\": \"    else:\"}, {\"line_number\": 11, \"line_content\": \"        sha = 'unknown'\"}, {\"line_number\": 12, \"line_content\": \"    return sha\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/open-mmlab/mmdetection\", \"direct_link_to_file_line\": \"https://github.com/open-mmlab/mmdetection/blob/master/mmdetection/setup.py#L62\", \"contents\": {\"total_lines\": 17, \"lines\": [{\"line_number\": 1, \"line_content\": \"def write_version_py():\"}, {\"line_number\": 2, \"line_content\": \"    content = \\\"\\\"\\\"# GENERATED VERSION FILE\"}, {\"line_number\": 3, \"line_content\": \"# TIME: {}\"}, {\"line_number\": 4, \"line_content\": \"__version__ = '{}'\"}, {\"line_number\": 5, \"line_content\": \"short_version = '{}'\"}, {\"line_number\": 6, \"line_content\": \"version_info = ({})\"}, {\"line_number\": 7, \"line_content\": \"\\\"\\\"\\\"\"}, {\"line_number\": 8, \"line_content\": \"    sha = get_hash()\"}, {\"line_number\": 9, \"line_content\": \"    with open('mmdet/VERSION', 'r') as f:\"}, {\"line_number\": 10, \"line_content\": \"        SHORT_VERSION = f.read().strip()\"}, {\"line_number\": 11, \"line_content\": \"    VERSION_INFO = ', '.join([(x if x.isdigit() else f'\\\"{x}\\\"') for x in\"}, {\"line_number\": 12, \"line_content\": \"        SHORT_VERSION.split('.')])\"}, {\"line_number\": 13, \"line_content\": \"    VERSION = SHORT_VERSION + '+' + sha\"}, {\"line_number\": 14, \"line_content\": \"    version_file_str = content.format(time.asctime(), VERSION,\"}, {\"line_number\": 15, \"line_content\": \"        SHORT_VERSION, VERSION_INFO)\"}, {\"line_number\": 16, \"line_content\": \"    with open(version_file, 'w') as f:\"}, {\"line_number\": 17, \"line_content\": \"        f.write(version_file_str)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/open-mmlab/mmdetection\", \"direct_link_to_file_line\": \"https://github.com/open-mmlab/mmdetection/blob/master/mmdetection/setup.py#L83\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_version():\"}, {\"line_number\": 2, \"line_content\": \"    with open(version_file, 'r') as f:\"}, {\"line_number\": 3, \"line_content\": \"        exec(compile(f.read(), version_file, 'exec'))\"}, {\"line_number\": 4, \"line_content\": \"    return locals()['__version__']\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/timgrossmann/InstaPy\", \"direct_link_to_file_line\": \"https://github.com/timgrossmann/InstaPy/blob/master/InstaPy/proxy_extension.py#L5\", \"contents\": {\"total_lines\": 64, \"lines\": [{\"line_number\": 1, \"line_content\": \"def create_proxy_extension(proxy):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" takes proxy looks like login:password@ip:port \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    ip = proxy.split('@')[1].split(':')[0]\"}, {\"line_number\": 4, \"line_content\": \"    port = int(proxy.split(':')[-1])\"}, {\"line_number\": 5, \"line_content\": \"    login = proxy.split(':')[0]\"}, {\"line_number\": 6, \"line_content\": \"    password = proxy.split('@')[0].split(':')[1]\"}, {\"line_number\": 7, \"line_content\": \"    manifest_json = \\\"\\\"\\\"\"}, {\"line_number\": 8, \"line_content\": \"        {\"}, {\"line_number\": 9, \"line_content\": \"            \\\"version\\\": \\\"1.0.0\\\",\"}, {\"line_number\": 10, \"line_content\": \"            \\\"manifest_version\\\": 2,\"}, {\"line_number\": 11, \"line_content\": \"            \\\"name\\\": \\\"Chrome Proxy\\\",\"}, {\"line_number\": 12, \"line_content\": \"            \\\"permissions\\\": [\"}, {\"line_number\": 13, \"line_content\": \"                \\\"proxy\\\",\"}, {\"line_number\": 14, \"line_content\": \"                \\\"tabs\\\",\"}, {\"line_number\": 15, \"line_content\": \"                \\\"unlimitedStorage\\\",\"}, {\"line_number\": 16, \"line_content\": \"                \\\"storage\\\",\"}, {\"line_number\": 17, \"line_content\": \"                \\\"<all_urls>\\\",\"}, {\"line_number\": 18, \"line_content\": \"                \\\"webRequest\\\",\"}, {\"line_number\": 19, \"line_content\": \"                \\\"webRequestBlocking\\\"\"}, {\"line_number\": 20, \"line_content\": \"            ],\"}, {\"line_number\": 21, \"line_content\": \"            \\\"background\\\": {\"}, {\"line_number\": 22, \"line_content\": \"                \\\"scripts\\\": [\\\"background.js\\\"]\"}, {\"line_number\": 23, \"line_content\": \"            },\"}, {\"line_number\": 24, \"line_content\": \"            \\\"minimum_chrome_version\\\":\\\"22.0.0\\\"\"}, {\"line_number\": 25, \"line_content\": \"        }\"}, {\"line_number\": 26, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 27, \"line_content\": \"    background_js = (\"}, {\"line_number\": 28, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 29, \"line_content\": \"        var config = {\"}, {\"line_number\": 30, \"line_content\": \"                mode: \\\"fixed_servers\\\",\"}, {\"line_number\": 31, \"line_content\": \"                rules: {\"}, {\"line_number\": 32, \"line_content\": \"                  singleProxy: {\"}, {\"line_number\": 33, \"line_content\": \"                    scheme: \\\"http\\\",\"}, {\"line_number\": 34, \"line_content\": \"                    host: \\\"%s\\\",\"}, {\"line_number\": 35, \"line_content\": \"                    port: parseInt(%s)\"}, {\"line_number\": 36, \"line_content\": \"                  },\"}, {\"line_number\": 37, \"line_content\": \"                  bypassList: [\\\"localhost\\\"]\"}, {\"line_number\": 38, \"line_content\": \"                }\"}, {\"line_number\": 39, \"line_content\": \"              };\"}, {\"line_number\": 40, \"line_content\": \"        chrome.proxy.settings.set({value: config, scope: \\\"regular\\\"}, \"}, {\"line_number\": 41, \"line_content\": \"        function() {});\"}, {\"line_number\": 42, \"line_content\": \"        function callbackFn(details) {\"}, {\"line_number\": 43, \"line_content\": \"            return {\"}, {\"line_number\": 44, \"line_content\": \"                authCredentials: {\"}, {\"line_number\": 45, \"line_content\": \"                    username: \\\"%s\\\",\"}, {\"line_number\": 46, \"line_content\": \"                    password: \\\"%s\\\"\"}, {\"line_number\": 47, \"line_content\": \"                }\"}, {\"line_number\": 48, \"line_content\": \"            };\"}, {\"line_number\": 49, \"line_content\": \"        }\"}, {\"line_number\": 50, \"line_content\": \"        chrome.webRequest.onAuthRequired.addListener(\"}, {\"line_number\": 51, \"line_content\": \"                    callbackFn,\"}, {\"line_number\": 52, \"line_content\": \"                    {urls: [\\\"<all_urls>\\\"]},\"}, {\"line_number\": 53, \"line_content\": \"                    ['blocking']\"}, {\"line_number\": 54, \"line_content\": \"        );\"}, {\"line_number\": 55, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 56, \"line_content\": \"         % (ip, port, login, password))\"}, {\"line_number\": 57, \"line_content\": \"    dir_path = 'assets/chrome_extensions'\"}, {\"line_number\": 58, \"line_content\": \"    if not os.path.exists(dir_path):\"}, {\"line_number\": 59, \"line_content\": \"        os.makedirs(dir_path)\"}, {\"line_number\": 60, \"line_content\": \"    pluginfile = '%s/proxy_auth_%s:%s.zip' % (dir_path, ip, port)\"}, {\"line_number\": 61, \"line_content\": \"    with zipfile.ZipFile(pluginfile, 'w') as zp:\"}, {\"line_number\": 62, \"line_content\": \"        zp.writestr('manifest.json', manifest_json)\"}, {\"line_number\": 63, \"line_content\": \"        zp.writestr('background.js', background_js)\"}, {\"line_number\": 64, \"line_content\": \"    return pluginfile\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/timgrossmann/InstaPy\", \"direct_link_to_file_line\": \"https://github.com/timgrossmann/InstaPy/blob/master/InstaPy/setup.py#L19\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def readall(*args):\"}, {\"line_number\": 2, \"line_content\": \"    with io_open(path.join(here, *args), encoding='utf-8') as fp:\"}, {\"line_number\": 3, \"line_content\": \"        return fp.read()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/timgrossmann/InstaPy\", \"direct_link_to_file_line\": \"https://github.com/timgrossmann/InstaPy/blob/master/InstaPy/instapy/database_engine.py#L55\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_database(make=False):\"}, {\"line_number\": 2, \"line_content\": \"    logger = Settings.logger\"}, {\"line_number\": 3, \"line_content\": \"    credentials = Settings.profile\"}, {\"line_number\": 4, \"line_content\": \"    profile_id, name = credentials['id'], credentials['name']\"}, {\"line_number\": 5, \"line_content\": \"    address = validate_database_address()\"}, {\"line_number\": 6, \"line_content\": \"    if not os.path.isfile(address) or make:\"}, {\"line_number\": 7, \"line_content\": \"        create_database(address, logger, name)\"}, {\"line_number\": 8, \"line_content\": \"    profile_id = get_profile(name, address, logger\"}, {\"line_number\": 9, \"line_content\": \"        ) if profile_id is None or make else profile_id\"}, {\"line_number\": 10, \"line_content\": \"    return address, profile_id\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/timgrossmann/InstaPy\", \"direct_link_to_file_line\": \"https://github.com/timgrossmann/InstaPy/blob/master/InstaPy/instapy/database_engine.py#L72\", \"contents\": {\"total_lines\": 16, \"lines\": [{\"line_number\": 1, \"line_content\": \"def create_database(address, logger, name):\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        connection = sqlite3.connect(address)\"}, {\"line_number\": 4, \"line_content\": \"        with connection:\"}, {\"line_number\": 5, \"line_content\": \"            connection.row_factory = sqlite3.Row\"}, {\"line_number\": 6, \"line_content\": \"            cursor = connection.cursor()\"}, {\"line_number\": 7, \"line_content\": \"            create_tables(cursor, ['profiles', 'recordActivity',\"}, {\"line_number\": 8, \"line_content\": \"                'followRestriction', 'shareWithPodsRestriction',\"}, {\"line_number\": 9, \"line_content\": \"                'commentRestriction', 'accountsProgress'])\"}, {\"line_number\": 10, \"line_content\": \"            connection.commit()\"}, {\"line_number\": 11, \"line_content\": \"    except Exception as exc:\"}, {\"line_number\": 12, \"line_content\": \"        logger.warning(\\\"Wah! Error occurred while getting a DB for '{}':\\\\n\\\\t{}\\\"\"}, {\"line_number\": 13, \"line_content\": \"            .format(name, str(exc).encode('utf-8')))\"}, {\"line_number\": 14, \"line_content\": \"    finally:\"}, {\"line_number\": 15, \"line_content\": \"        if connection:\"}, {\"line_number\": 16, \"line_content\": \"            connection.close()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/timgrossmann/InstaPy\", \"direct_link_to_file_line\": \"https://github.com/timgrossmann/InstaPy/blob/master/InstaPy/instapy/database_engine.py#L106\", \"contents\": {\"total_lines\": 13, \"lines\": [{\"line_number\": 1, \"line_content\": \"def create_tables(cursor, tables):\"}, {\"line_number\": 2, \"line_content\": \"    if 'profiles' in tables:\"}, {\"line_number\": 3, \"line_content\": \"        cursor.execute(SQL_CREATE_PROFILE_TABLE)\"}, {\"line_number\": 4, \"line_content\": \"    if 'recordActivity' in tables:\"}, {\"line_number\": 5, \"line_content\": \"        cursor.execute(SQL_CREATE_RECORD_ACTIVITY_TABLE)\"}, {\"line_number\": 6, \"line_content\": \"    if 'followRestriction' in tables:\"}, {\"line_number\": 7, \"line_content\": \"        cursor.execute(SQL_CREATE_FOLLOW_RESTRICTION_TABLE)\"}, {\"line_number\": 8, \"line_content\": \"    if 'shareWithPodsRestriction' in tables:\"}, {\"line_number\": 9, \"line_content\": \"        cursor.execute(SQL_CREATE_SHARE_WITH_PODS_RESTRICTION_TABLE)\"}, {\"line_number\": 10, \"line_content\": \"    if 'commentRestriction' in tables:\"}, {\"line_number\": 11, \"line_content\": \"        cursor.execute(SQL_CREATE_COMMENT_RESTRICTION_TABLE)\"}, {\"line_number\": 12, \"line_content\": \"    if 'accountsProgress' in tables:\"}, {\"line_number\": 13, \"line_content\": \"        cursor.execute(SQL_CREATE_ACCOUNTS_PROGRESS_TABLE)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Theano/Theano\", \"direct_link_to_file_line\": \"https://github.com/Theano/Theano/blob/master/Theano/setup.py#L56\", \"contents\": {\"total_lines\": 14, \"lines\": [{\"line_number\": 1, \"line_content\": \"def find_packages(where='.', exclude=()):\"}, {\"line_number\": 2, \"line_content\": \"    out = []\"}, {\"line_number\": 3, \"line_content\": \"    stack = [(convert_path(where), '')]\"}, {\"line_number\": 4, \"line_content\": \"    while stack:\"}, {\"line_number\": 5, \"line_content\": \"        where, prefix = stack.pop(0)\"}, {\"line_number\": 6, \"line_content\": \"        for name in os.listdir(where):\"}, {\"line_number\": 7, \"line_content\": \"            fn = os.path.join(where, name)\"}, {\"line_number\": 8, \"line_content\": \"            if '.' not in name and os.path.isdir(fn) and os.path.isfile(os.\"}, {\"line_number\": 9, \"line_content\": \"                path.join(fn, '__init__.py')):\"}, {\"line_number\": 10, \"line_content\": \"                out.append(prefix + name)\"}, {\"line_number\": 11, \"line_content\": \"                stack.append((fn, prefix + name + '.'))\"}, {\"line_number\": 12, \"line_content\": \"    for pat in (list(exclude) + ['ez_setup', 'distribute_setup']):\"}, {\"line_number\": 13, \"line_content\": \"        out = [item for item in out if not fnmatchcase(item, pat)]\"}, {\"line_number\": 14, \"line_content\": \"    return out\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Theano/Theano\", \"direct_link_to_file_line\": \"https://github.com/Theano/Theano/blob/master/Theano/setup.py#L88\", \"contents\": {\"total_lines\": 16, \"lines\": [{\"line_number\": 1, \"line_content\": \"def do_setup():\"}, {\"line_number\": 2, \"line_content\": \"    setup(name=NAME, version=version_data['version'], description=\"}, {\"line_number\": 3, \"line_content\": \"        DESCRIPTION, long_description=LONG_DESCRIPTION, classifiers=\"}, {\"line_number\": 4, \"line_content\": \"        CLASSIFIERS, author=AUTHOR, author_email=AUTHOR_EMAIL, url=URL,\"}, {\"line_number\": 5, \"line_content\": \"        license=LICENSE, platforms=PLATFORMS, packages=find_packages(),\"}, {\"line_number\": 6, \"line_content\": \"        cmdclass=versioneer.get_cmdclass(), install_requires=[\"}, {\"line_number\": 7, \"line_content\": \"        'numpy>=1.9.1', 'scipy>=0.14', 'six>=1.9.0'], extras_require={\"}, {\"line_number\": 8, \"line_content\": \"        'test': ['nose>=1.3.0', 'parameterized', 'flake8'], 'doc': [\"}, {\"line_number\": 9, \"line_content\": \"        'Sphinx>=0.5.1', 'pygments']}, package_data={'': ['*.txt', '*.rst',\"}, {\"line_number\": 10, \"line_content\": \"        '*.cu', '*.cuh', '*.c', '*.sh', '*.pkl', '*.h', '*.cpp',\"}, {\"line_number\": 11, \"line_content\": \"        'ChangeLog', 'c_code/*'], 'theano.misc': ['*.sh'], 'theano.d3viz':\"}, {\"line_number\": 12, \"line_content\": \"        ['html/*', 'css/*', 'js/*']}, entry_points={'console_scripts': [\"}, {\"line_number\": 13, \"line_content\": \"        'theano-cache = bin.theano_cache:main',\"}, {\"line_number\": 14, \"line_content\": \"        'theano-nose = bin.theano_nose:main']}, keywords=' '.join(['theano',\"}, {\"line_number\": 15, \"line_content\": \"        'math', 'numerical', 'symbolic', 'blas', 'numpy', 'gpu', 'autodiff',\"}, {\"line_number\": 16, \"line_content\": \"        'differentiation']))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Theano/Theano\", \"direct_link_to_file_line\": \"https://github.com/Theano/Theano/blob/master/Theano/versioneer.py#L296\", \"contents\": {\"total_lines\": 27, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_root():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Get the project root directory.\"}, {\"line_number\": 3, \"line_content\": \"    We require that all commands are run from the project root, i.e. the\"}, {\"line_number\": 4, \"line_content\": \"    directory that contains setup.py, setup.cfg, and versioneer.py .\"}, {\"line_number\": 5, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    root = os.path.realpath(os.path.abspath(os.getcwd()))\"}, {\"line_number\": 7, \"line_content\": \"    setup_py = os.path.join(root, 'setup.py')\"}, {\"line_number\": 8, \"line_content\": \"    versioneer_py = os.path.join(root, 'versioneer.py')\"}, {\"line_number\": 9, \"line_content\": \"    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\"}, {\"line_number\": 10, \"line_content\": \"        root = os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))\"}, {\"line_number\": 11, \"line_content\": \"        setup_py = os.path.join(root, 'setup.py')\"}, {\"line_number\": 12, \"line_content\": \"        versioneer_py = os.path.join(root, 'versioneer.py')\"}, {\"line_number\": 13, \"line_content\": \"    if not (os.path.exists(setup_py) or os.path.exists(versioneer_py)):\"}, {\"line_number\": 14, \"line_content\": \"        err = (\"}, {\"line_number\": 15, \"line_content\": \"            \\\"Versioneer was unable to run the project root directory. Versioneer requires setup.py to be executed from its immediate directory (like 'python setup.py COMMAND'), or in a way that lets it use sys.argv[0] to find the root (like 'python path/to/setup.py COMMAND').\\\"\"}, {\"line_number\": 16, \"line_content\": \"            )\"}, {\"line_number\": 17, \"line_content\": \"        raise VersioneerBadRootError(err)\"}, {\"line_number\": 18, \"line_content\": \"    try:\"}, {\"line_number\": 19, \"line_content\": \"        me = os.path.realpath(os.path.abspath(__file__))\"}, {\"line_number\": 20, \"line_content\": \"        me_dir = os.path.normcase(os.path.splitext(me)[0])\"}, {\"line_number\": 21, \"line_content\": \"        vsr_dir = os.path.normcase(os.path.splitext(versioneer_py)[0])\"}, {\"line_number\": 22, \"line_content\": \"        if me_dir != vsr_dir:\"}, {\"line_number\": 23, \"line_content\": \"            print('Warning: build in %s is using versioneer.py from %s' % (\"}, {\"line_number\": 24, \"line_content\": \"                os.path.dirname(me), versioneer_py))\"}, {\"line_number\": 25, \"line_content\": \"    except NameError:\"}, {\"line_number\": 26, \"line_content\": \"        pass\"}, {\"line_number\": 27, \"line_content\": \"    return root\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Theano/Theano\", \"direct_link_to_file_line\": \"https://github.com/Theano/Theano/blob/master/Theano/versioneer.py#L335\", \"contents\": {\"total_lines\": 22, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_config_from_root(root):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Read the project setup.cfg file to determine Versioneer config.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    setup_cfg = os.path.join(root, 'setup.cfg')\"}, {\"line_number\": 4, \"line_content\": \"    parser = configparser.SafeConfigParser()\"}, {\"line_number\": 5, \"line_content\": \"    with open(setup_cfg, 'r') as f:\"}, {\"line_number\": 6, \"line_content\": \"        parser.readfp(f)\"}, {\"line_number\": 7, \"line_content\": \"    VCS = parser.get('versioneer', 'VCS')\"}, {\"line_number\": 8, \"line_content\": \"    def get(parser, name):\"}, {\"line_number\": 9, \"line_content\": \"        if parser.has_option('versioneer', name):\"}, {\"line_number\": 10, \"line_content\": \"            return parser.get('versioneer', name)\"}, {\"line_number\": 11, \"line_content\": \"        return None\"}, {\"line_number\": 12, \"line_content\": \"    cfg = VersioneerConfig()\"}, {\"line_number\": 13, \"line_content\": \"    cfg.VCS = VCS\"}, {\"line_number\": 14, \"line_content\": \"    cfg.style = get(parser, 'style') or ''\"}, {\"line_number\": 15, \"line_content\": \"    cfg.versionfile_source = get(parser, 'versionfile_source')\"}, {\"line_number\": 16, \"line_content\": \"    cfg.versionfile_build = get(parser, 'versionfile_build')\"}, {\"line_number\": 17, \"line_content\": \"    cfg.tag_prefix = get(parser, 'tag_prefix')\"}, {\"line_number\": 18, \"line_content\": \"    if cfg.tag_prefix in (\\\"''\\\", '\\\"\\\"'):\"}, {\"line_number\": 19, \"line_content\": \"        cfg.tag_prefix = ''\"}, {\"line_number\": 20, \"line_content\": \"    cfg.parentdir_prefix = get(parser, 'parentdir_prefix')\"}, {\"line_number\": 21, \"line_content\": \"    cfg.verbose = get(parser, 'verbose')\"}, {\"line_number\": 22, \"line_content\": \"    return cfg\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/Theano/Theano\", \"direct_link_to_file_line\": \"https://github.com/Theano/Theano/blob/master/Theano/versioneer.py#L384\", \"contents\": {\"total_lines\": 33, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False,\"}, {\"line_number\": 2, \"line_content\": \"    env=None):\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Call the given command(s).\\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    assert isinstance(commands, list)\"}, {\"line_number\": 5, \"line_content\": \"    p = None\"}, {\"line_number\": 6, \"line_content\": \"    for c in commands:\"}, {\"line_number\": 7, \"line_content\": \"        try:\"}, {\"line_number\": 8, \"line_content\": \"            dispcmd = str([c] + args)\"}, {\"line_number\": 9, \"line_content\": \"            p = subprocess.Popen([c] + args, cwd=cwd, env=env, stdout=\"}, {\"line_number\": 10, \"line_content\": \"                subprocess.PIPE, stderr=subprocess.PIPE if hide_stderr else\"}, {\"line_number\": 11, \"line_content\": \"                None)\"}, {\"line_number\": 12, \"line_content\": \"            break\"}, {\"line_number\": 13, \"line_content\": \"        except EnvironmentError:\"}, {\"line_number\": 14, \"line_content\": \"            e = sys.exc_info()[1]\"}, {\"line_number\": 15, \"line_content\": \"            if e.errno == errno.ENOENT:\"}, {\"line_number\": 16, \"line_content\": \"                continue\"}, {\"line_number\": 17, \"line_content\": \"            if verbose:\"}, {\"line_number\": 18, \"line_content\": \"                print('unable to run %s' % dispcmd)\"}, {\"line_number\": 19, \"line_content\": \"                print(e)\"}, {\"line_number\": 20, \"line_content\": \"            return None, None\"}, {\"line_number\": 21, \"line_content\": \"    else:\"}, {\"line_number\": 22, \"line_content\": \"        if verbose:\"}, {\"line_number\": 23, \"line_content\": \"            print('unable to find command, tried %s' % (commands,))\"}, {\"line_number\": 24, \"line_content\": \"        return None, None\"}, {\"line_number\": 25, \"line_content\": \"    stdout = p.communicate()[0].strip()\"}, {\"line_number\": 26, \"line_content\": \"    if sys.version_info[0] >= 3:\"}, {\"line_number\": 27, \"line_content\": \"        stdout = stdout.decode()\"}, {\"line_number\": 28, \"line_content\": \"    if p.returncode != 0:\"}, {\"line_number\": 29, \"line_content\": \"        if verbose:\"}, {\"line_number\": 30, \"line_content\": \"            print('unable to run %s (error)' % dispcmd)\"}, {\"line_number\": 31, \"line_content\": \"            print('stdout was %s' % stdout)\"}, {\"line_number\": 32, \"line_content\": \"        return None, p.returncode\"}, {\"line_number\": 33, \"line_content\": \"    return stdout, p.returncode\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/requests\", \"direct_link_to_file_line\": \"https://github.com/psf/requests/blob/master/requests/setup.py#L17\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def initialize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    TestCommand.initialize_options(self)\"}, {\"line_number\": 3, \"line_content\": \"    try:\"}, {\"line_number\": 4, \"line_content\": \"        from multiprocessing import cpu_count\"}, {\"line_number\": 5, \"line_content\": \"        self.pytest_args = ['-n', str(cpu_count()), '--boxed']\"}, {\"line_number\": 6, \"line_content\": \"    except (ImportError, NotImplementedError):\"}, {\"line_number\": 7, \"line_content\": \"        self.pytest_args = ['-n', '1', '--boxed']\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/requests\", \"direct_link_to_file_line\": \"https://github.com/psf/requests/blob/master/requests/setup.py#L25\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def finalize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    TestCommand.finalize_options(self)\"}, {\"line_number\": 3, \"line_content\": \"    self.test_args = []\"}, {\"line_number\": 4, \"line_content\": \"    self.test_suite = True\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/requests\", \"direct_link_to_file_line\": \"https://github.com/psf/requests/blob/master/requests/setup.py#L30\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run_tests(self):\"}, {\"line_number\": 2, \"line_content\": \"    import pytest\"}, {\"line_number\": 3, \"line_content\": \"    errno = pytest.main(self.pytest_args)\"}, {\"line_number\": 4, \"line_content\": \"    sys.exit(errno)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/requests\", \"direct_link_to_file_line\": \"https://github.com/psf/requests/blob/master/requests/requests/status_codes.py#L107\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _init():\"}, {\"line_number\": 2, \"line_content\": \"    for code, titles in _codes.items():\"}, {\"line_number\": 3, \"line_content\": \"        for title in titles:\"}, {\"line_number\": 4, \"line_content\": \"            setattr(codes, title, code)\"}, {\"line_number\": 5, \"line_content\": \"            if not title.startswith(('\\\\\\\\', '/')):\"}, {\"line_number\": 6, \"line_content\": \"                setattr(codes, title.upper(), code)\"}, {\"line_number\": 7, \"line_content\": \"    def doc(code):\"}, {\"line_number\": 8, \"line_content\": \"        names = ', '.join('``%s``' % n for n in _codes[code])\"}, {\"line_number\": 9, \"line_content\": \"        return '* %d: %s' % (code, names)\"}, {\"line_number\": 10, \"line_content\": \"    global __doc__\"}, {\"line_number\": 11, \"line_content\": \"    __doc__ = __doc__ + '\\\\n' + '\\\\n'.join(doc(code) for code in sorted(_codes)\"}, {\"line_number\": 12, \"line_content\": \"        ) if __doc__ is not None else None\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/psf/requests\", \"direct_link_to_file_line\": \"https://github.com/psf/requests/blob/master/requests/requests/status_codes.py#L114\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def doc(code):\"}, {\"line_number\": 2, \"line_content\": \"    names = ', '.join('``%s``' % n for n in _codes[code])\"}, {\"line_number\": 3, \"line_content\": \"    return '* %d: %s' % (code, names)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ipython/ipython\", \"direct_link_to_file_line\": \"https://github.com/ipython/ipython/blob/master/ipython/setupbase.py#L39\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def execfile(fname, globs, locs=None):\"}, {\"line_number\": 2, \"line_content\": \"    locs = locs or globs\"}, {\"line_number\": 3, \"line_content\": \"    with open(fname) as f:\"}, {\"line_number\": 4, \"line_content\": \"        exec(compile(f.read(), fname, 'exec'), globs, locs)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ipython/ipython\", \"direct_link_to_file_line\": \"https://github.com/ipython/ipython/blob/master/ipython/setupbase.py#L91\", \"contents\": {\"total_lines\": 14, \"lines\": [{\"line_number\": 1, \"line_content\": \"def find_packages():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Find all of IPython's packages.\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    excludes = ['deathrow', 'quarantine']\"}, {\"line_number\": 6, \"line_content\": \"    packages = []\"}, {\"line_number\": 7, \"line_content\": \"    for dir, subdirs, files in os.walk('IPython'):\"}, {\"line_number\": 8, \"line_content\": \"        package = dir.replace(os.path.sep, '.')\"}, {\"line_number\": 9, \"line_content\": \"        if any(package.startswith('IPython.' + exc) for exc in excludes):\"}, {\"line_number\": 10, \"line_content\": \"            continue\"}, {\"line_number\": 11, \"line_content\": \"        if '__init__.py' not in files:\"}, {\"line_number\": 12, \"line_content\": \"            continue\"}, {\"line_number\": 13, \"line_content\": \"        packages.append(package)\"}, {\"line_number\": 14, \"line_content\": \"    return packages\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ipython/ipython\", \"direct_link_to_file_line\": \"https://github.com/ipython/ipython/blob/master/ipython/setupbase.py#L112\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def find_package_data():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Find IPython's package_data.\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    package_data = {'IPython.core': ['profile/README*'],\"}, {\"line_number\": 6, \"line_content\": \"        'IPython.core.tests': ['*.png', '*.jpg', 'daft_extension/*.py'],\"}, {\"line_number\": 7, \"line_content\": \"        'IPython.lib.tests': ['*.wav'], 'IPython.testing.plugin': ['*.txt']}\"}, {\"line_number\": 8, \"line_content\": \"    return package_data\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ipython/ipython\", \"direct_link_to_file_line\": \"https://github.com/ipython/ipython/blob/master/ipython/setupbase.py#L129\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def check_package_data(package_data):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"verify that package_data globs make sense\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    print('checking package data')\"}, {\"line_number\": 4, \"line_content\": \"    for pkg, data in package_data.items():\"}, {\"line_number\": 5, \"line_content\": \"        pkg_root = pjoin(*pkg.split('.'))\"}, {\"line_number\": 6, \"line_content\": \"        for d in data:\"}, {\"line_number\": 7, \"line_content\": \"            path = pjoin(pkg_root, d)\"}, {\"line_number\": 8, \"line_content\": \"            if '*' in path:\"}, {\"line_number\": 9, \"line_content\": \"                assert len(glob(path)) > 0, 'No files match pattern %s' % path\"}, {\"line_number\": 10, \"line_content\": \"            else:\"}, {\"line_number\": 11, \"line_content\": \"                assert os.path.exists(path), 'Missing package data: %s' % path\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/ipython/ipython\", \"direct_link_to_file_line\": \"https://github.com/ipython/ipython/blob/master/ipython/setupbase.py#L142\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def check_package_data_first(command):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"decorator for checking package_data before running a given command\"}, {\"line_number\": 3, \"line_content\": \"    Probably only needs to wrap build_py\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    class DecoratedCommand(command):\"}, {\"line_number\": 6, \"line_content\": \"        def run(self):\"}, {\"line_number\": 7, \"line_content\": \"            check_package_data(self.package_data)\"}, {\"line_number\": 8, \"line_content\": \"            command.run(self)\"}, {\"line_number\": 9, \"line_content\": \"    return DecoratedCommand\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/jakubroztocil/httpie\", \"direct_link_to_file_line\": \"https://github.com/jakubroztocil/httpie/blob/master/httpie/setup.py#L63\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def long_description():\"}, {\"line_number\": 2, \"line_content\": \"    with codecs.open('README.rst', encoding='utf8') as f:\"}, {\"line_number\": 3, \"line_content\": \"        return f.read()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/jakubroztocil/httpie\", \"direct_link_to_file_line\": \"https://github.com/jakubroztocil/httpie/blob/master/httpie/setup.py#L18\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def finalize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    TestCommand.finalize_options(self)\"}, {\"line_number\": 3, \"line_content\": \"    self.test_args = ['--doctest-modules', '--verbose', './httpie', './tests']\"}, {\"line_number\": 4, \"line_content\": \"    self.test_suite = True\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/jakubroztocil/httpie\", \"direct_link_to_file_line\": \"https://github.com/jakubroztocil/httpie/blob/master/httpie/setup.py#L26\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run_tests(self):\"}, {\"line_number\": 2, \"line_content\": \"    import pytest\"}, {\"line_number\": 3, \"line_content\": \"    sys.exit(pytest.main(self.test_args))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/jakubroztocil/httpie\", \"direct_link_to_file_line\": \"https://github.com/jakubroztocil/httpie/blob/master/httpie/httpie/models.py#L8\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, orig):\"}, {\"line_number\": 2, \"line_content\": \"    self._orig = orig\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/jakubroztocil/httpie\", \"direct_link_to_file_line\": \"https://github.com/jakubroztocil/httpie/blob/master/httpie/httpie/models.py#L19\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"@property\"}, {\"line_number\": 2, \"line_content\": \"def headers(self) ->str:\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Return a `str` with the message's headers.\\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    raise NotImplementedError()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/sivel/speedtest-cli\", \"direct_link_to_file_line\": \"https://github.com/sivel/speedtest-cli/blob/master/speedtest-cli/setup.py#L30\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def find_version(*file_paths):\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        f = codecs.open(os.path.join(here, *file_paths), 'r', 'latin1')\"}, {\"line_number\": 4, \"line_content\": \"        version_file = f.read()\"}, {\"line_number\": 5, \"line_content\": \"        f.close()\"}, {\"line_number\": 6, \"line_content\": \"    except:\"}, {\"line_number\": 7, \"line_content\": \"        raise RuntimeError('Unable to find version string.')\"}, {\"line_number\": 8, \"line_content\": \"    version_match = re.search('^__version__ = [\\\\'\\\\\\\\\\\"]([^\\\\'\\\\\\\\\\\"]*)[\\\\'\\\\\\\\\\\"]',\"}, {\"line_number\": 9, \"line_content\": \"        version_file, re.M)\"}, {\"line_number\": 10, \"line_content\": \"    if version_match:\"}, {\"line_number\": 11, \"line_content\": \"        return version_match.group(1)\"}, {\"line_number\": 12, \"line_content\": \"    raise RuntimeError('Unable to find version string.')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/sivel/speedtest-cli\", \"direct_link_to_file_line\": \"https://github.com/sivel/speedtest-cli/blob/master/speedtest-cli/speedtest.py#L367\", \"contents\": {\"total_lines\": 34, \"lines\": [{\"line_number\": 1, \"line_content\": \"def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\"}, {\"line_number\": 2, \"line_content\": \"    source_address=None):\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Connect to *address* and return the socket object.\"}, {\"line_number\": 4, \"line_content\": \"    Convenience function.  Connect to *address* (a 2-tuple ``(host,\"}, {\"line_number\": 5, \"line_content\": \"    port)``) and return the socket object.  Passing the optional\"}, {\"line_number\": 6, \"line_content\": \"    *timeout* parameter will set the timeout on the socket instance\"}, {\"line_number\": 7, \"line_content\": \"    before attempting to connect.  If no *timeout* is supplied, the\"}, {\"line_number\": 8, \"line_content\": \"    global default timeout setting returned by :func:`getdefaulttimeout`\"}, {\"line_number\": 9, \"line_content\": \"    is used.  If *source_address* is set it must be a tuple of (host, port)\"}, {\"line_number\": 10, \"line_content\": \"    for the socket to bind as a source address before making the connection.\"}, {\"line_number\": 11, \"line_content\": \"    An host of '' or port 0 tells the OS to use the default.\"}, {\"line_number\": 12, \"line_content\": \"    Largely vendored from Python 2.7, modified to work with Python 2.4\"}, {\"line_number\": 13, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 14, \"line_content\": \"    host, port = address\"}, {\"line_number\": 15, \"line_content\": \"    err = None\"}, {\"line_number\": 16, \"line_content\": \"    for res in socket.getaddrinfo(host, port, 0, socket.SOCK_STREAM):\"}, {\"line_number\": 17, \"line_content\": \"        af, socktype, proto, canonname, sa = res\"}, {\"line_number\": 18, \"line_content\": \"        sock = None\"}, {\"line_number\": 19, \"line_content\": \"        try:\"}, {\"line_number\": 20, \"line_content\": \"            sock = socket.socket(af, socktype, proto)\"}, {\"line_number\": 21, \"line_content\": \"            if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\"}, {\"line_number\": 22, \"line_content\": \"                sock.settimeout(float(timeout))\"}, {\"line_number\": 23, \"line_content\": \"            if source_address:\"}, {\"line_number\": 24, \"line_content\": \"                sock.bind(source_address)\"}, {\"line_number\": 25, \"line_content\": \"            sock.connect(sa)\"}, {\"line_number\": 26, \"line_content\": \"            return sock\"}, {\"line_number\": 27, \"line_content\": \"        except socket.error:\"}, {\"line_number\": 28, \"line_content\": \"            err = get_exception()\"}, {\"line_number\": 29, \"line_content\": \"            if sock is not None:\"}, {\"line_number\": 30, \"line_content\": \"                sock.close()\"}, {\"line_number\": 31, \"line_content\": \"    if err is not None:\"}, {\"line_number\": 32, \"line_content\": \"        raise err\"}, {\"line_number\": 33, \"line_content\": \"    else:\"}, {\"line_number\": 34, \"line_content\": \"        raise socket.error('getaddrinfo returns an empty list')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/sivel/speedtest-cli\", \"direct_link_to_file_line\": \"https://github.com/sivel/speedtest-cli/blob/master/speedtest-cli/speedtest.py#L509\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _build_connection(connection, source_address, timeout, context=None):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Cross Python 2.4 - Python 3 callable to build an ``HTTPConnection`` or\"}, {\"line_number\": 3, \"line_content\": \"    ``HTTPSConnection`` with the args we need\"}, {\"line_number\": 4, \"line_content\": \"    Called from ``http(s)_open`` methods of ``SpeedtestHTTPHandler`` or\"}, {\"line_number\": 5, \"line_content\": \"    ``SpeedtestHTTPSHandler``\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    def inner(host, **kwargs):\"}, {\"line_number\": 8, \"line_content\": \"        kwargs.update({'source_address': source_address, 'timeout': timeout})\"}, {\"line_number\": 9, \"line_content\": \"        if context:\"}, {\"line_number\": 10, \"line_content\": \"            kwargs['context'] = context\"}, {\"line_number\": 11, \"line_content\": \"        return connection(host, **kwargs)\"}, {\"line_number\": 12, \"line_content\": \"    return inner\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/sivel/speedtest-cli\", \"direct_link_to_file_line\": \"https://github.com/sivel/speedtest-cli/blob/master/speedtest-cli/speedtest.py#L574\", \"contents\": {\"total_lines\": 22, \"lines\": [{\"line_number\": 1, \"line_content\": \"def build_opener(source_address=None, timeout=10):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Function similar to ``urllib2.build_opener`` that will build\"}, {\"line_number\": 3, \"line_content\": \"    an ``OpenerDirector`` with the explicit handlers we want,\"}, {\"line_number\": 4, \"line_content\": \"    ``source_address`` for binding, ``timeout`` and our custom\"}, {\"line_number\": 5, \"line_content\": \"    `User-Agent`\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    printer('Timeout set to %d' % timeout, debug=True)\"}, {\"line_number\": 8, \"line_content\": \"    if source_address:\"}, {\"line_number\": 9, \"line_content\": \"        source_address_tuple = source_address, 0\"}, {\"line_number\": 10, \"line_content\": \"        printer('Binding to source address: %r' % (source_address_tuple,),\"}, {\"line_number\": 11, \"line_content\": \"            debug=True)\"}, {\"line_number\": 12, \"line_content\": \"    else:\"}, {\"line_number\": 13, \"line_content\": \"        source_address_tuple = None\"}, {\"line_number\": 14, \"line_content\": \"    handlers = [ProxyHandler(), SpeedtestHTTPHandler(source_address=\"}, {\"line_number\": 15, \"line_content\": \"        source_address_tuple, timeout=timeout), SpeedtestHTTPSHandler(\"}, {\"line_number\": 16, \"line_content\": \"        source_address=source_address_tuple, timeout=timeout),\"}, {\"line_number\": 17, \"line_content\": \"        HTTPDefaultErrorHandler(), HTTPRedirectHandler(), HTTPErrorProcessor()]\"}, {\"line_number\": 18, \"line_content\": \"    opener = OpenerDirector()\"}, {\"line_number\": 19, \"line_content\": \"    opener.addheaders = [('User-agent', build_user_agent())]\"}, {\"line_number\": 20, \"line_content\": \"    for handler in handlers:\"}, {\"line_number\": 21, \"line_content\": \"        opener.add_handler(handler)\"}, {\"line_number\": 22, \"line_content\": \"    return opener\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/sivel/speedtest-cli\", \"direct_link_to_file_line\": \"https://github.com/sivel/speedtest-cli/blob/master/speedtest-cli/speedtest.py#L640\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_exception():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Helper function to work with py2.4-py3 for getting the current\"}, {\"line_number\": 3, \"line_content\": \"    exception in a try/except block\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 5, \"line_content\": \"    return sys.exc_info()[1]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tornadoweb/tornado\", \"direct_link_to_file_line\": \"https://github.com/tornadoweb/tornado/blob/master/tornado/setup.py#L79\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run(self):\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        build_ext.run(self)\"}, {\"line_number\": 4, \"line_content\": \"    except Exception:\"}, {\"line_number\": 5, \"line_content\": \"        e = sys.exc_info()[1]\"}, {\"line_number\": 6, \"line_content\": \"        sys.stdout.write('%s\\\\n' % str(e))\"}, {\"line_number\": 7, \"line_content\": \"        warnings.warn(self.warning_message % ('Extension modules',\"}, {\"line_number\": 8, \"line_content\": \"            'There was an issue with your platform configuration - see above.')\"}, {\"line_number\": 9, \"line_content\": \"            )\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tornadoweb/tornado\", \"direct_link_to_file_line\": \"https://github.com/tornadoweb/tornado/blob/master/tornado/setup.py#L95\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def build_extension(self, ext):\"}, {\"line_number\": 2, \"line_content\": \"    name = ext.name\"}, {\"line_number\": 3, \"line_content\": \"    try:\"}, {\"line_number\": 4, \"line_content\": \"        build_ext.build_extension(self, ext)\"}, {\"line_number\": 5, \"line_content\": \"    except Exception:\"}, {\"line_number\": 6, \"line_content\": \"        e = sys.exc_info()[1]\"}, {\"line_number\": 7, \"line_content\": \"        sys.stdout.write('%s\\\\n' % str(e))\"}, {\"line_number\": 8, \"line_content\": \"        warnings.warn(self.warning_message % ('The %s extension module' % (\"}, {\"line_number\": 9, \"line_content\": \"            name,),\"}, {\"line_number\": 10, \"line_content\": \"            'The output above this warning shows how the compilation failed.'))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tornadoweb/tornado\", \"direct_link_to_file_line\": \"https://github.com/tornadoweb/tornado/blob/master/tornado/tornado/tcpclient.py#L75\", \"contents\": {\"total_lines\": 19, \"lines\": [{\"line_number\": 1, \"line_content\": \"@staticmethod\"}, {\"line_number\": 2, \"line_content\": \"def split(addrinfo: List[Tuple]) ->Tuple[List[Tuple[socket.AddressFamily,\"}, {\"line_number\": 3, \"line_content\": \"    Tuple]], List[Tuple[socket.AddressFamily, Tuple]]]:\"}, {\"line_number\": 4, \"line_content\": \"    \\\"\\\"\\\"Partition the ``addrinfo`` list by address family.\"}, {\"line_number\": 5, \"line_content\": \"        Returns two lists.  The first list contains the first entry from\"}, {\"line_number\": 6, \"line_content\": \"        ``addrinfo`` and all others with the same family, and the\"}, {\"line_number\": 7, \"line_content\": \"        second list contains all other addresses (normally one list will\"}, {\"line_number\": 8, \"line_content\": \"        be AF_INET and the other AF_INET6, although non-standard resolvers\"}, {\"line_number\": 9, \"line_content\": \"        may return additional families).\"}, {\"line_number\": 10, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 11, \"line_content\": \"    primary = []\"}, {\"line_number\": 12, \"line_content\": \"    secondary = []\"}, {\"line_number\": 13, \"line_content\": \"    primary_af = addrinfo[0][0]\"}, {\"line_number\": 14, \"line_content\": \"    for af, addr in addrinfo:\"}, {\"line_number\": 15, \"line_content\": \"        if af == primary_af:\"}, {\"line_number\": 16, \"line_content\": \"            primary.append((af, addr))\"}, {\"line_number\": 17, \"line_content\": \"        else:\"}, {\"line_number\": 18, \"line_content\": \"            secondary.append((af, addr))\"}, {\"line_number\": 19, \"line_content\": \"    return primary, secondary\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tornadoweb/tornado\", \"direct_link_to_file_line\": \"https://github.com/tornadoweb/tornado/blob/master/tornado/tornado/concurrent.py#L234\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"@typing.overload\"}, {\"line_number\": 2, \"line_content\": \"def future_add_done_callback(future: 'futures.Future[_T]', callback:\"}, {\"line_number\": 3, \"line_content\": \"    Callable[['futures.Future[_T]'], None]) ->None:\"}, {\"line_number\": 4, \"line_content\": \"    pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/tornadoweb/tornado\", \"direct_link_to_file_line\": \"https://github.com/tornadoweb/tornado/blob/master/tornado/tornado/concurrent.py#L234\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"@typing.overload\"}, {\"line_number\": 2, \"line_content\": \"def future_add_done_callback(future: 'Future[_T]', callback: Callable[[\"}, {\"line_number\": 3, \"line_content\": \"    'Future[_T]'], None]) ->None:\"}, {\"line_number\": 4, \"line_content\": \"    pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/geekcomputers/Python\", \"direct_link_to_file_line\": \"https://github.com/geekcomputers/Python/blob/master/Python/bubble sort.py#L25\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def bubbleSort(arr):\"}, {\"line_number\": 2, \"line_content\": \"    n = len(arr)\"}, {\"line_number\": 3, \"line_content\": \"    for i in range(n):\"}, {\"line_number\": 4, \"line_content\": \"        for j in range(0, n - i - 1):\"}, {\"line_number\": 5, \"line_content\": \"            if arr[j] > arr[j + 1]:\"}, {\"line_number\": 6, \"line_content\": \"                arr[j], arr[j + 1] = arr[j + 1], arr[j]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/geekcomputers/Python\", \"direct_link_to_file_line\": \"https://github.com/geekcomputers/Python/blob/master/Python/chaos.py#L4\", \"contents\": {\"total_lines\": 14, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    print('This program illustrates a chaotic function')\"}, {\"line_number\": 3, \"line_content\": \"    while True:\"}, {\"line_number\": 4, \"line_content\": \"        try:\"}, {\"line_number\": 5, \"line_content\": \"            x = float(input('Enter a number between 0 and 1: '))\"}, {\"line_number\": 6, \"line_content\": \"            if 0 < x and x < 1:\"}, {\"line_number\": 7, \"line_content\": \"                break\"}, {\"line_number\": 8, \"line_content\": \"            else:\"}, {\"line_number\": 9, \"line_content\": \"                print('Please enter correct number')\"}, {\"line_number\": 10, \"line_content\": \"        except Exception as e:\"}, {\"line_number\": 11, \"line_content\": \"            print('Please enter correct number')\"}, {\"line_number\": 12, \"line_content\": \"    for i in range(10):\"}, {\"line_number\": 13, \"line_content\": \"        x = 3.9 * x * (1 - x)\"}, {\"line_number\": 14, \"line_content\": \"        print(x)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/geekcomputers/Python\", \"direct_link_to_file_line\": \"https://github.com/geekcomputers/Python/blob/master/Python/stackF_Harsh2255.py#L8\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def createStack():\"}, {\"line_number\": 2, \"line_content\": \"    stack = []\"}, {\"line_number\": 3, \"line_content\": \"    return stack\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/geekcomputers/Python\", \"direct_link_to_file_line\": \"https://github.com/geekcomputers/Python/blob/master/Python/stackF_Harsh2255.py#L13\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def isEmpty(stack):\"}, {\"line_number\": 2, \"line_content\": \"    return len(stack) == 0\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/geekcomputers/Python\", \"direct_link_to_file_line\": \"https://github.com/geekcomputers/Python/blob/master/Python/stackF_Harsh2255.py#L17\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def push(stack, item):\"}, {\"line_number\": 2, \"line_content\": \"    stack.append(item)\"}, {\"line_number\": 3, \"line_content\": \"    print(item + ' pushed to stack ')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/bitcoinbook/bitcoinbook\", \"direct_link_to_file_line\": \"https://github.com/bitcoinbook/bitcoinbook/blob/master/bitcoinbook/code/proof-of-work-example.py#L17\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def proof_of_work(header, difficulty_bits):\"}, {\"line_number\": 2, \"line_content\": \"    target = 2 ** (256 - difficulty_bits)\"}, {\"line_number\": 3, \"line_content\": \"    for nonce in xrange(max_nonce):\"}, {\"line_number\": 4, \"line_content\": \"        hash_result = hashlib.sha256((str(header) + str(nonce)).encode()\"}, {\"line_number\": 5, \"line_content\": \"            ).hexdigest()\"}, {\"line_number\": 6, \"line_content\": \"        if long(hash_result, 16) < target:\"}, {\"line_number\": 7, \"line_content\": \"            print('Success with nonce %d' % nonce)\"}, {\"line_number\": 8, \"line_content\": \"            print('Hash is %s' % hash_result)\"}, {\"line_number\": 9, \"line_content\": \"            return hash_result, nonce\"}, {\"line_number\": 10, \"line_content\": \"    print('Failed after %d (max_nonce) tries' % nonce)\"}, {\"line_number\": 11, \"line_content\": \"    return nonce\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/bitcoinbook/bitcoinbook\", \"direct_link_to_file_line\": \"https://github.com/bitcoinbook/bitcoinbook/blob/master/bitcoinbook/code/pycoin_example.py#L12\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_address(which):\"}, {\"line_number\": 2, \"line_content\": \"    while 1:\"}, {\"line_number\": 3, \"line_content\": \"        print('enter the %s address=> ' % which, end='')\"}, {\"line_number\": 4, \"line_content\": \"        address = input()\"}, {\"line_number\": 5, \"line_content\": \"        is_valid = is_address_valid(address)\"}, {\"line_number\": 6, \"line_content\": \"        if is_valid:\"}, {\"line_number\": 7, \"line_content\": \"            return address\"}, {\"line_number\": 8, \"line_content\": \"        print('invalid address, please try again')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/bitcoinbook/bitcoinbook\", \"direct_link_to_file_line\": \"https://github.com/bitcoinbook/bitcoinbook/blob/master/bitcoinbook/code/ec-math.py#L22\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def random_secret():\"}, {\"line_number\": 2, \"line_content\": \"    byte_array = os.urandom(32).hex()\"}, {\"line_number\": 3, \"line_content\": \"    return int(byte_array, 16)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/bitcoinbook/bitcoinbook\", \"direct_link_to_file_line\": \"https://github.com/bitcoinbook/bitcoinbook/blob/master/bitcoinbook/code/ec-math.py#L29\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_point_pubkey(point):\"}, {\"line_number\": 2, \"line_content\": \"    if point.y() % 2 == 1:\"}, {\"line_number\": 3, \"line_content\": \"        key = '03' + '%064x' % point.x()\"}, {\"line_number\": 4, \"line_content\": \"    else:\"}, {\"line_number\": 5, \"line_content\": \"        key = '02' + '%064x' % point.x()\"}, {\"line_number\": 6, \"line_content\": \"    return key\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/bitcoinbook/bitcoinbook\", \"direct_link_to_file_line\": \"https://github.com/bitcoinbook/bitcoinbook/blob/master/bitcoinbook/code/ec-math.py#L37\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_point_pubkey_uncompressed(point):\"}, {\"line_number\": 2, \"line_content\": \"    key = '04' + '%064x' % point.x() + '%064x' % point.y()\"}, {\"line_number\": 3, \"line_content\": \"    return key\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/sylnsfar/qrcode\", \"direct_link_to_file_line\": \"https://github.com/sylnsfar/qrcode/blob/master/qrcode/MyQR/terminal.py#L7\", \"contents\": {\"total_lines\": 43, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    import argparse\"}, {\"line_number\": 3, \"line_content\": \"    argparser = argparse.ArgumentParser()\"}, {\"line_number\": 4, \"line_content\": \"    argparser.add_argument('Words', help=\"}, {\"line_number\": 5, \"line_content\": \"        'The words to produce you QR-code picture, like a URL or a sentence. Please read the README file for the supported characters.'\"}, {\"line_number\": 6, \"line_content\": \"        )\"}, {\"line_number\": 7, \"line_content\": \"    argparser.add_argument('-v', '--version', type=int, choices=range(1, 41\"}, {\"line_number\": 8, \"line_content\": \"        ), default=1, help=\"}, {\"line_number\": 9, \"line_content\": \"        'The version means the length of a side of the QR-Code picture. From little size to large is 1 to 40.'\"}, {\"line_number\": 10, \"line_content\": \"        )\"}, {\"line_number\": 11, \"line_content\": \"    argparser.add_argument('-l', '--level', choices=list('LMQH'), default=\"}, {\"line_number\": 12, \"line_content\": \"        'H', help=\"}, {\"line_number\": 13, \"line_content\": \"        'Use this argument to choose an Error-Correction-Level: L(Low), M(Medium) or Q(Quartile), H(High). Otherwise, just use the default one: H'\"}, {\"line_number\": 14, \"line_content\": \"        )\"}, {\"line_number\": 15, \"line_content\": \"    argparser.add_argument('-p', '--picture', help=\"}, {\"line_number\": 16, \"line_content\": \"        'the picture  e.g. example.jpg')\"}, {\"line_number\": 17, \"line_content\": \"    argparser.add_argument('-c', '--colorized', action='store_true', help=\"}, {\"line_number\": 18, \"line_content\": \"        \\\"Produce a colorized QR-Code with your picture. Just works when there is a correct '-p' or '--picture'.\\\"\"}, {\"line_number\": 19, \"line_content\": \"        )\"}, {\"line_number\": 20, \"line_content\": \"    argparser.add_argument('-con', '--contrast', type=float, default=1.0,\"}, {\"line_number\": 21, \"line_content\": \"        help=\"}, {\"line_number\": 22, \"line_content\": \"        'A floating point value controlling the enhancement of contrast. Factor 1.0 always returns a copy of the original image, lower factors mean less color (brightness, contrast, etc), and higher values more. There are no restrictions on this value. Default: 1.0'\"}, {\"line_number\": 23, \"line_content\": \"        )\"}, {\"line_number\": 24, \"line_content\": \"    argparser.add_argument('-bri', '--brightness', type=float, default=1.0,\"}, {\"line_number\": 25, \"line_content\": \"        help=\"}, {\"line_number\": 26, \"line_content\": \"        'A floating point value controlling the enhancement of brightness. Factor 1.0 always returns a copy of the original image, lower factors mean less color (brightness, contrast, etc), and higher values more. There are no restrictions on this value. Default: 1.0'\"}, {\"line_number\": 27, \"line_content\": \"        )\"}, {\"line_number\": 28, \"line_content\": \"    argparser.add_argument('-n', '--name', help=\"}, {\"line_number\": 29, \"line_content\": \"        \\\"The filename of output tailed with one of {'.jpg', '.png', '.bmp', '.gif'}. eg. exampl.png\\\"\"}, {\"line_number\": 30, \"line_content\": \"        )\"}, {\"line_number\": 31, \"line_content\": \"    argparser.add_argument('-d', '--directory', default=os.getcwd(), help=\"}, {\"line_number\": 32, \"line_content\": \"        'The directory of output.')\"}, {\"line_number\": 33, \"line_content\": \"    args = argparser.parse_args()\"}, {\"line_number\": 34, \"line_content\": \"    if args.picture and args.picture[-4:] == '.gif':\"}, {\"line_number\": 35, \"line_content\": \"        print('It may take a while, please wait for minutes...')\"}, {\"line_number\": 36, \"line_content\": \"    try:\"}, {\"line_number\": 37, \"line_content\": \"        ver, ecl, qr_name = run(args.Words, args.version, args.level, args.\"}, {\"line_number\": 38, \"line_content\": \"            picture, args.colorized, args.contrast, args.brightness, args.\"}, {\"line_number\": 39, \"line_content\": \"            name, args.directory)\"}, {\"line_number\": 40, \"line_content\": \"        print('Succeed! \\\\nCheck out your', str(ver) + '-' + str(ecl),\"}, {\"line_number\": 41, \"line_content\": \"            'QR-code:', qr_name)\"}, {\"line_number\": 42, \"line_content\": \"    except:\"}, {\"line_number\": 43, \"line_content\": \"        raise\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/sylnsfar/qrcode\", \"direct_link_to_file_line\": \"https://github.com/sylnsfar/qrcode/blob/master/qrcode/MyQR/mylibs/structure.py#L5\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def structure_final_bits(ver, ecl, data_codewords, ecc):\"}, {\"line_number\": 2, \"line_content\": \"    final_message = interleave_dc(ver, ecl, data_codewords) + interleave_ecc(\"}, {\"line_number\": 3, \"line_content\": \"        ecc)\"}, {\"line_number\": 4, \"line_content\": \"    final_bits = ''.join([('0' * (8 - len(i)) + i) for i in [bin(i)[2:] for\"}, {\"line_number\": 5, \"line_content\": \"        i in final_message]]) + '0' * required_remainder_bits[ver - 1]\"}, {\"line_number\": 6, \"line_content\": \"    return final_bits\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/sylnsfar/qrcode\", \"direct_link_to_file_line\": \"https://github.com/sylnsfar/qrcode/blob/master/qrcode/MyQR/mylibs/structure.py#L13\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def interleave_dc(ver, ecl, data_codewords):\"}, {\"line_number\": 2, \"line_content\": \"    id = []\"}, {\"line_number\": 3, \"line_content\": \"    for t in zip(*data_codewords):\"}, {\"line_number\": 4, \"line_content\": \"        id += list(t)\"}, {\"line_number\": 5, \"line_content\": \"    g = grouping_list[ver - 1][lindex[ecl]]\"}, {\"line_number\": 6, \"line_content\": \"    if g[3]:\"}, {\"line_number\": 7, \"line_content\": \"        for i in range(g[2]):\"}, {\"line_number\": 8, \"line_content\": \"            id.append(data_codewords[i - g[2]][-1])\"}, {\"line_number\": 9, \"line_content\": \"    return id\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/sylnsfar/qrcode\", \"direct_link_to_file_line\": \"https://github.com/sylnsfar/qrcode/blob/master/qrcode/MyQR/mylibs/structure.py#L23\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def interleave_ecc(ecc):\"}, {\"line_number\": 2, \"line_content\": \"    ie = []\"}, {\"line_number\": 3, \"line_content\": \"    for t in zip(*ecc):\"}, {\"line_number\": 4, \"line_content\": \"        ie += list(t)\"}, {\"line_number\": 5, \"line_content\": \"    return ie\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/sylnsfar/qrcode\", \"direct_link_to_file_line\": \"https://github.com/sylnsfar/qrcode/blob/master/qrcode/MyQR/mylibs/data.py#L6\", \"contents\": {\"total_lines\": 25, \"lines\": [{\"line_number\": 1, \"line_content\": \"def encode(ver, ecl, str):\"}, {\"line_number\": 2, \"line_content\": \"    mode_encoding = {'numeric': numeric_encoding, 'alphanumeric':\"}, {\"line_number\": 3, \"line_content\": \"        alphanumeric_encoding, 'byte': byte_encoding, 'kanji': kanji_encoding}\"}, {\"line_number\": 4, \"line_content\": \"    ver, mode = analyse(ver, ecl, str)\"}, {\"line_number\": 5, \"line_content\": \"    print('line 16: mode:', mode)\"}, {\"line_number\": 6, \"line_content\": \"    code = mode_indicator[mode] + get_cci(ver, mode, str) + mode_encoding[mode\"}, {\"line_number\": 7, \"line_content\": \"        ](str)\"}, {\"line_number\": 8, \"line_content\": \"    rqbits = 8 * required_bytes[ver - 1][lindex[ecl]]\"}, {\"line_number\": 9, \"line_content\": \"    b = rqbits - len(code)\"}, {\"line_number\": 10, \"line_content\": \"    code += '0000' if b >= 4 else '0' * b\"}, {\"line_number\": 11, \"line_content\": \"    while len(code) % 8 != 0:\"}, {\"line_number\": 12, \"line_content\": \"        code += '0'\"}, {\"line_number\": 13, \"line_content\": \"    while len(code) < rqbits:\"}, {\"line_number\": 14, \"line_content\": \"        code += '1110110000010001' if rqbits - len(code) >= 16 else '11101100'\"}, {\"line_number\": 15, \"line_content\": \"    data_code = [code[i:i + 8] for i in range(len(code)) if i % 8 == 0]\"}, {\"line_number\": 16, \"line_content\": \"    data_code = [int(i, 2) for i in data_code]\"}, {\"line_number\": 17, \"line_content\": \"    g = grouping_list[ver - 1][lindex[ecl]]\"}, {\"line_number\": 18, \"line_content\": \"    data_codewords, i = [], 0\"}, {\"line_number\": 19, \"line_content\": \"    for n in range(g[0]):\"}, {\"line_number\": 20, \"line_content\": \"        data_codewords.append(data_code[i:i + g[1]])\"}, {\"line_number\": 21, \"line_content\": \"        i += g[1]\"}, {\"line_number\": 22, \"line_content\": \"    for n in range(g[2]):\"}, {\"line_number\": 23, \"line_content\": \"        data_codewords.append(data_code[i:i + g[3]])\"}, {\"line_number\": 24, \"line_content\": \"        i += g[3]\"}, {\"line_number\": 25, \"line_content\": \"    return ver, data_codewords\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/microsoft/cascadia-code\", \"direct_link_to_file_line\": \"https://github.com/microsoft/cascadia-code/blob/master/cascadia-code/build.py#L20\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def step_set_font_name(n):\"}, {\"line_number\": 2, \"line_content\": \"    def _set(instance):\"}, {\"line_number\": 3, \"line_content\": \"        instance.info.familyName = n\"}, {\"line_number\": 4, \"line_content\": \"        instance.info.styleMapFamilyName = n\"}, {\"line_number\": 5, \"line_content\": \"    return _set\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/microsoft/cascadia-code\", \"direct_link_to_file_line\": \"https://github.com/microsoft/cascadia-code/blob/master/cascadia-code/build.py#L30\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def step_merge_glyphs_from_ufo(path):\"}, {\"line_number\": 2, \"line_content\": \"    def _merge(instance):\"}, {\"line_number\": 3, \"line_content\": \"        ufo = ufoLib2.Font.open(path)\"}, {\"line_number\": 4, \"line_content\": \"        print(\"}, {\"line_number\": 5, \"line_content\": \"            f'[{instance.info.familyName} {instance.info.styleName}] Merging {path}'\"}, {\"line_number\": 6, \"line_content\": \"            )\"}, {\"line_number\": 7, \"line_content\": \"        for glyph in ufo.glyphOrder:\"}, {\"line_number\": 8, \"line_content\": \"            if glyph not in instance.glyphOrder:\"}, {\"line_number\": 9, \"line_content\": \"                instance.addGlyph(ufo[glyph])\"}, {\"line_number\": 10, \"line_content\": \"    return _merge\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/microsoft/cascadia-code\", \"direct_link_to_file_line\": \"https://github.com/microsoft/cascadia-code/blob/master/cascadia-code/build.py#L41\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def step_set_feature_file(n):\"}, {\"line_number\": 2, \"line_content\": \"    fea = n.read_text()\"}, {\"line_number\": 3, \"line_content\": \"    def _set(instance):\"}, {\"line_number\": 4, \"line_content\": \"        instance.features.text = fea\"}, {\"line_number\": 5, \"line_content\": \"    return _set\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/microsoft/cascadia-code\", \"direct_link_to_file_line\": \"https://github.com/microsoft/cascadia-code/blob/master/cascadia-code/build.py#L49\", \"contents\": {\"total_lines\": 17, \"lines\": [{\"line_number\": 1, \"line_content\": \"def set_font_metaData(font, sort):\"}, {\"line_number\": 2, \"line_content\": \"    font.info.versionMajor = 2007\"}, {\"line_number\": 3, \"line_content\": \"    font.info.versionMinor = 15\"}, {\"line_number\": 4, \"line_content\": \"    font.info.openTypeOS2Panose = [2, 11, 6, 9, 2, 0, 0, 2, 0, 4]\"}, {\"line_number\": 5, \"line_content\": \"    font.info.openTypeOS2TypoAscender = 1900\"}, {\"line_number\": 6, \"line_content\": \"    font.info.openTypeOS2TypoDescender = -480\"}, {\"line_number\": 7, \"line_content\": \"    font.info.openTypeOS2TypoLineGap = 0\"}, {\"line_number\": 8, \"line_content\": \"    font.info.openTypeHheaAscender = font.info.openTypeOS2TypoAscender\"}, {\"line_number\": 9, \"line_content\": \"    font.info.openTypeHheaDescender = font.info.openTypeOS2TypoDescender\"}, {\"line_number\": 10, \"line_content\": \"    font.info.openTypeHheaLineGap = font.info.openTypeOS2TypoLineGap\"}, {\"line_number\": 11, \"line_content\": \"    font.info.openTypeOS2WinAscent = 2226\"}, {\"line_number\": 12, \"line_content\": \"    font.info.openTypeOS2WinDescent = abs(font.info.openTypeOS2TypoDescender)\"}, {\"line_number\": 13, \"line_content\": \"    if sort != 'otf':\"}, {\"line_number\": 14, \"line_content\": \"        font.info.openTypeGaspRangeRecords = [{'rangeMaxPPEM': 9,\"}, {\"line_number\": 15, \"line_content\": \"            'rangeGaspBehavior': [1, 3]}, {'rangeMaxPPEM': 50,\"}, {\"line_number\": 16, \"line_content\": \"            'rangeGaspBehavior': [0, 1, 2, 3]}, {'rangeMaxPPEM': 65535,\"}, {\"line_number\": 17, \"line_content\": \"            'rangeGaspBehavior': [1, 3]}]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/microsoft/cascadia-code\", \"direct_link_to_file_line\": \"https://github.com/microsoft/cascadia-code/blob/master/cascadia-code/build.py#L82\", \"contents\": {\"total_lines\": 24, \"lines\": [{\"line_number\": 1, \"line_content\": \"def build_font_instance(generator, instance_descriptor, *steps):\"}, {\"line_number\": 2, \"line_content\": \"    for format in ['otf']:\"}, {\"line_number\": 3, \"line_content\": \"        instance = generator.generate_instance(instance_descriptor)\"}, {\"line_number\": 4, \"line_content\": \"        for step in steps:\"}, {\"line_number\": 5, \"line_content\": \"            step(instance)\"}, {\"line_number\": 6, \"line_content\": \"        set_font_metaData(instance, format)\"}, {\"line_number\": 7, \"line_content\": \"        familyName = instance.info.familyName\"}, {\"line_number\": 8, \"line_content\": \"        fontName = familyName + ' ' + instance.info.styleName\"}, {\"line_number\": 9, \"line_content\": \"        file_stem = instance.info.familyName.replace(' ', '')\"}, {\"line_number\": 10, \"line_content\": \"        file_path = (OUTPUT_DIR / str(file_stem + '-' + instance.info.\"}, {\"line_number\": 11, \"line_content\": \"            styleName)).with_suffix(f'.{format}')\"}, {\"line_number\": 12, \"line_content\": \"        print(f'[{fontName}] Compiling')\"}, {\"line_number\": 13, \"line_content\": \"        if format == 'ttf':\"}, {\"line_number\": 14, \"line_content\": \"            instance_font = ufo2ft.compileTTF(instance, removeOverlaps=True,\"}, {\"line_number\": 15, \"line_content\": \"                inplace=True)\"}, {\"line_number\": 16, \"line_content\": \"        else:\"}, {\"line_number\": 17, \"line_content\": \"            instance_font = ufo2ft.compileOTF(instance, removeOverlaps=True,\"}, {\"line_number\": 18, \"line_content\": \"                inplace=True, optimizeCFF=ufo2ft.CFFOptimization.NONE)\"}, {\"line_number\": 19, \"line_content\": \"        if format == 'ttf':\"}, {\"line_number\": 20, \"line_content\": \"            print(f'[{fontName}] Merging VTT')\"}, {\"line_number\": 21, \"line_content\": \"            vttLib.transfer.merge_from_file(instance_font, VTT_DATA_FILE)\"}, {\"line_number\": 22, \"line_content\": \"        print(f'[{fontName}] Saving')\"}, {\"line_number\": 23, \"line_content\": \"        instance_font.save(file_path)\"}, {\"line_number\": 24, \"line_content\": \"        print(f'[{fontName}] Done: {file_path}')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/0xAX/linux-insides\", \"direct_link_to_file_line\": \"https://github.com/0xAX/linux-insides/blob/master/linux-insides/Scripts/get_all_links.py#L24\", \"contents\": {\"total_lines\": 14, \"lines\": [{\"line_number\": 1, \"line_content\": \"def check_live_url(url):\"}, {\"line_number\": 2, \"line_content\": \"    result = False\"}, {\"line_number\": 3, \"line_content\": \"    try:\"}, {\"line_number\": 4, \"line_content\": \"        ret = urlopen(url, timeout=2)\"}, {\"line_number\": 5, \"line_content\": \"        result = ret.code == 200\"}, {\"line_number\": 6, \"line_content\": \"    except HTTPError as e:\"}, {\"line_number\": 7, \"line_content\": \"        print(e, file=sys.stderr)\"}, {\"line_number\": 8, \"line_content\": \"    except URLError as e:\"}, {\"line_number\": 9, \"line_content\": \"        print(e, file=sys.stderr)\"}, {\"line_number\": 10, \"line_content\": \"    except timeout as e:\"}, {\"line_number\": 11, \"line_content\": \"        print(e, file=sys.stderr)\"}, {\"line_number\": 12, \"line_content\": \"    except Exception as e:\"}, {\"line_number\": 13, \"line_content\": \"        print(e, file=sys.stderr)\"}, {\"line_number\": 14, \"line_content\": \"    return result\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/0xAX/linux-insides\", \"direct_link_to_file_line\": \"https://github.com/0xAX/linux-insides/blob/master/linux-insides/Scripts/get_all_links.py#L42\", \"contents\": {\"total_lines\": 22, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main(path):\"}, {\"line_number\": 2, \"line_content\": \"    filenames = []\"}, {\"line_number\": 3, \"line_content\": \"    for dirpath, dnames, fnames in os.walk(path):\"}, {\"line_number\": 4, \"line_content\": \"        for fname in fnames:\"}, {\"line_number\": 5, \"line_content\": \"            if fname.endswith('.md'):\"}, {\"line_number\": 6, \"line_content\": \"                filenames.append(os.sep.join([dirpath, fname]))\"}, {\"line_number\": 7, \"line_content\": \"    urls = []\"}, {\"line_number\": 8, \"line_content\": \"    for filename in filenames:\"}, {\"line_number\": 9, \"line_content\": \"        fd = codecs.open(filename, mode='r', encoding='utf-8')\"}, {\"line_number\": 10, \"line_content\": \"        for line in fd.readlines():\"}, {\"line_number\": 11, \"line_content\": \"            refs = re.findall('(?<=<a href=\\\")[^\\\"]*', markdown.markdown(line))\"}, {\"line_number\": 12, \"line_content\": \"            for ref in refs:\"}, {\"line_number\": 13, \"line_content\": \"                if ref not in urls:\"}, {\"line_number\": 14, \"line_content\": \"                    urls.append(ref)\"}, {\"line_number\": 15, \"line_content\": \"    for url in urls:\"}, {\"line_number\": 16, \"line_content\": \"        if not url.startswith('http'):\"}, {\"line_number\": 17, \"line_content\": \"            print('markdown file name: ' + url)\"}, {\"line_number\": 18, \"line_content\": \"            continue\"}, {\"line_number\": 19, \"line_content\": \"        if check_live_url(url):\"}, {\"line_number\": 20, \"line_content\": \"            print(url)\"}, {\"line_number\": 21, \"line_content\": \"        else:\"}, {\"line_number\": 22, \"line_content\": \"            print(url, file=sys.stderr)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/satwikkansal/wtfpython\", \"direct_link_to_file_line\": \"https://github.com/satwikkansal/wtfpython/blob/master/wtfpython/irrelevant/insert_ids.py#L9\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def generate_random_id_comment():\"}, {\"line_number\": 2, \"line_content\": \"    random_id = uuid.uuid4()\"}, {\"line_number\": 3, \"line_content\": \"    return f'<!-- Example ID: {random_id} --!>'\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/satwikkansal/wtfpython\", \"direct_link_to_file_line\": \"https://github.com/satwikkansal/wtfpython/blob/master/wtfpython/irrelevant/notebook_generator.py#L57\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def generate_code_block(statements, output):\"}, {\"line_number\": 2, \"line_content\": \"    global sequence_num\"}, {\"line_number\": 3, \"line_content\": \"    result = {'type': 'code', 'sequence_num': sequence_num, 'statements':\"}, {\"line_number\": 4, \"line_content\": \"        statements, 'output': output}\"}, {\"line_number\": 5, \"line_content\": \"    sequence_num += 1\"}, {\"line_number\": 6, \"line_content\": \"    return result\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/satwikkansal/wtfpython\", \"direct_link_to_file_line\": \"https://github.com/satwikkansal/wtfpython/blob/master/wtfpython/irrelevant/notebook_generator.py#L69\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def generate_markdown_block(lines):\"}, {\"line_number\": 2, \"line_content\": \"    global sequence_num\"}, {\"line_number\": 3, \"line_content\": \"    result = {'type': 'markdown', 'sequence_num': sequence_num, 'value': lines}\"}, {\"line_number\": 4, \"line_content\": \"    sequence_num += 1\"}, {\"line_number\": 5, \"line_content\": \"    return result\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/satwikkansal/wtfpython\", \"direct_link_to_file_line\": \"https://github.com/satwikkansal/wtfpython/blob/master/wtfpython/irrelevant/notebook_generator.py#L80\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def is_interactive_statement(line):\"}, {\"line_number\": 2, \"line_content\": \"    for prefix in STATEMENT_PREFIXES:\"}, {\"line_number\": 3, \"line_content\": \"        if line.lstrip().startswith(prefix):\"}, {\"line_number\": 4, \"line_content\": \"            return True\"}, {\"line_number\": 5, \"line_content\": \"    return False\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/satwikkansal/wtfpython\", \"direct_link_to_file_line\": \"https://github.com/satwikkansal/wtfpython/blob/master/wtfpython/irrelevant/notebook_generator.py#L87\", \"contents\": {\"total_lines\": 70, \"lines\": [{\"line_number\": 1, \"line_content\": \"def parse_example_parts(lines, title, current_line):\"}, {\"line_number\": 2, \"line_content\": \"    parts = {'build_up': [], 'explanation': []}\"}, {\"line_number\": 3, \"line_content\": \"    content = [title]\"}, {\"line_number\": 4, \"line_content\": \"    statements_so_far = []\"}, {\"line_number\": 5, \"line_content\": \"    output_so_far = []\"}, {\"line_number\": 6, \"line_content\": \"    next_line = current_line\"}, {\"line_number\": 7, \"line_content\": \"    while not (next_line.startswith('#### ') or next_line.startswith('---')):\"}, {\"line_number\": 8, \"line_content\": \"        if next_line.startswith('```py'):\"}, {\"line_number\": 9, \"line_content\": \"            is_interactive = False\"}, {\"line_number\": 10, \"line_content\": \"            output_encountered = False\"}, {\"line_number\": 11, \"line_content\": \"            if content:\"}, {\"line_number\": 12, \"line_content\": \"                parts['build_up'].append(generate_markdown_block(content))\"}, {\"line_number\": 13, \"line_content\": \"                content = []\"}, {\"line_number\": 14, \"line_content\": \"            next_line = next(lines)\"}, {\"line_number\": 15, \"line_content\": \"            while not next_line.startswith('```'):\"}, {\"line_number\": 16, \"line_content\": \"                if is_interactive_statement(next_line):\"}, {\"line_number\": 17, \"line_content\": \"                    is_interactive = True\"}, {\"line_number\": 18, \"line_content\": \"                    if output_so_far:\"}, {\"line_number\": 19, \"line_content\": \"                        parts['build_up'].append(generate_code_block(\"}, {\"line_number\": 20, \"line_content\": \"                            statements_so_far, output_so_far))\"}, {\"line_number\": 21, \"line_content\": \"                        statements_so_far, output_so_far = [], []\"}, {\"line_number\": 22, \"line_content\": \"                    statements_so_far.append(next_line)\"}, {\"line_number\": 23, \"line_content\": \"                elif is_interactive:\"}, {\"line_number\": 24, \"line_content\": \"                    output_so_far.append(next_line)\"}, {\"line_number\": 25, \"line_content\": \"                elif output_encountered:\"}, {\"line_number\": 26, \"line_content\": \"                    output_so_far.append(next_line)\"}, {\"line_number\": 27, \"line_content\": \"                else:\"}, {\"line_number\": 28, \"line_content\": \"                    statements_so_far.append(next_line)\"}, {\"line_number\": 29, \"line_content\": \"                next_line = next(lines)\"}, {\"line_number\": 30, \"line_content\": \"            parts['build_up'].append(generate_code_block(statements_so_far,\"}, {\"line_number\": 31, \"line_content\": \"                output_so_far))\"}, {\"line_number\": 32, \"line_content\": \"            statements_so_far, output_so_far = [], []\"}, {\"line_number\": 33, \"line_content\": \"            next_line = next(lines)\"}, {\"line_number\": 34, \"line_content\": \"        else:\"}, {\"line_number\": 35, \"line_content\": \"            content.append(next_line)\"}, {\"line_number\": 36, \"line_content\": \"            next_line = next(lines)\"}, {\"line_number\": 37, \"line_content\": \"    if content:\"}, {\"line_number\": 38, \"line_content\": \"        parts['build_up'].append(generate_markdown_block(content))\"}, {\"line_number\": 39, \"line_content\": \"    content = []\"}, {\"line_number\": 40, \"line_content\": \"    statements_so_far, output_so_far = [], []\"}, {\"line_number\": 41, \"line_content\": \"    while not (next_line.startswith('---') or next_line.startswith('### ')):\"}, {\"line_number\": 42, \"line_content\": \"        if next_line.lstrip().startswith('```py'):\"}, {\"line_number\": 43, \"line_content\": \"            is_interactive = False\"}, {\"line_number\": 44, \"line_content\": \"            if content:\"}, {\"line_number\": 45, \"line_content\": \"                parts['explanation'].append(generate_markdown_block(content))\"}, {\"line_number\": 46, \"line_content\": \"                content = []\"}, {\"line_number\": 47, \"line_content\": \"            next_line = next(lines)\"}, {\"line_number\": 48, \"line_content\": \"            while not next_line.lstrip().startswith('```'):\"}, {\"line_number\": 49, \"line_content\": \"                if is_interactive_statement(next_line):\"}, {\"line_number\": 50, \"line_content\": \"                    is_interactive = True\"}, {\"line_number\": 51, \"line_content\": \"                    if output_so_far:\"}, {\"line_number\": 52, \"line_content\": \"                        parts['explanation'].append(generate_code_block(\"}, {\"line_number\": 53, \"line_content\": \"                            statements_so_far, output_so_far))\"}, {\"line_number\": 54, \"line_content\": \"                        statements_so_far, output_so_far = [], []\"}, {\"line_number\": 55, \"line_content\": \"                    statements_so_far.append(next_line)\"}, {\"line_number\": 56, \"line_content\": \"                elif is_interactive:\"}, {\"line_number\": 57, \"line_content\": \"                    output_so_far.append(next_line)\"}, {\"line_number\": 58, \"line_content\": \"                else:\"}, {\"line_number\": 59, \"line_content\": \"                    statements_so_far.append(next_line)\"}, {\"line_number\": 60, \"line_content\": \"                next_line = next(lines)\"}, {\"line_number\": 61, \"line_content\": \"            parts['explanation'].append(generate_code_block(\"}, {\"line_number\": 62, \"line_content\": \"                statements_so_far, output_so_far))\"}, {\"line_number\": 63, \"line_content\": \"            statements_so_far, output_so_far = [], []\"}, {\"line_number\": 64, \"line_content\": \"            next_line = next(lines)\"}, {\"line_number\": 65, \"line_content\": \"        else:\"}, {\"line_number\": 66, \"line_content\": \"            content.append(next_line)\"}, {\"line_number\": 67, \"line_content\": \"            next_line = next(lines)\"}, {\"line_number\": 68, \"line_content\": \"    if content:\"}, {\"line_number\": 69, \"line_content\": \"        parts['explanation'].append(generate_markdown_block(content))\"}, {\"line_number\": 70, \"line_content\": \"    return next_line, parts\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/rsms/inter\", \"direct_link_to_file_line\": \"https://github.com/rsms/inter/blob/master/inter/docs/lab/serve.py#L9\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def sighandler(signum, frame):\"}, {\"line_number\": 2, \"line_content\": \"    sys.stdout.write('\\\\n')\"}, {\"line_number\": 3, \"line_content\": \"    sys.stdout.flush()\"}, {\"line_number\": 4, \"line_content\": \"    sys.exit(1)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/rsms/inter\", \"direct_link_to_file_line\": \"https://github.com/rsms/inter/blob/master/inter/docs/lab/serve.py#L16\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, addr):\"}, {\"line_number\": 2, \"line_content\": \"    http.server.HTTPServer.__init__(self, addr, http.server.\"}, {\"line_number\": 3, \"line_content\": \"        SimpleHTTPRequestHandler)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/rsms/inter\", \"direct_link_to_file_line\": \"https://github.com/rsms/inter/blob/master/inter/docs/lab/serve.py#L20\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def server_bind(self):\"}, {\"line_number\": 2, \"line_content\": \"    self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\"}, {\"line_number\": 3, \"line_content\": \"    http.server.HTTPServer.server_bind(self)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/rsms/inter\", \"direct_link_to_file_line\": \"https://github.com/rsms/inter/blob/master/inter/misc/glyphs-scripts/preflight.py#L16\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def getLowerCaseGlyphNames():\"}, {\"line_number\": 2, \"line_content\": \"    global _lowerCaseGlyphNames\"}, {\"line_number\": 3, \"line_content\": \"    if _lowerCaseGlyphNames is None:\"}, {\"line_number\": 4, \"line_content\": \"        _lowerCaseGlyphNames = set(font.classes['Lowercase'].code.strip().\"}, {\"line_number\": 5, \"line_content\": \"            split(' '))\"}, {\"line_number\": 6, \"line_content\": \"    return _lowerCaseGlyphNames\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/rsms/inter\", \"direct_link_to_file_line\": \"https://github.com/rsms/inter/blob/master/inter/misc/glyphs-scripts/preflight.py#L23\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def yieldAppMain():\"}, {\"line_number\": 2, \"line_content\": \"    mainRunLoop.runMode_beforeDate_(AppKit.NSRunLoopCommonModes, AppKit.\"}, {\"line_number\": 3, \"line_content\": \"        NSDate.new())\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/home-assistant/core\", \"direct_link_to_file_line\": \"https://github.com/home-assistant/core/blob/master/core/script/lazytox.py#L27\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def printc(the_color, *args):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Color print helper.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    msg = ' '.join(args)\"}, {\"line_number\": 4, \"line_content\": \"    if not escape_codes:\"}, {\"line_number\": 5, \"line_content\": \"        print(msg)\"}, {\"line_number\": 6, \"line_content\": \"        return\"}, {\"line_number\": 7, \"line_content\": \"    try:\"}, {\"line_number\": 8, \"line_content\": \"        print(escape_codes[the_color] + msg + escape_codes['reset'])\"}, {\"line_number\": 9, \"line_content\": \"    except KeyError:\"}, {\"line_number\": 10, \"line_content\": \"        print(msg)\"}, {\"line_number\": 11, \"line_content\": \"        raise ValueError(f'Invalid color {the_color}')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/home-assistant/core\", \"direct_link_to_file_line\": \"https://github.com/home-assistant/core/blob/master/core/script/lazytox.py#L40\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def validate_requirements_ok():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Validate requirements, returns True of ok.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    from gen_requirements_all import main as req_main\"}, {\"line_number\": 4, \"line_content\": \"    return req_main(True) == 0\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/home-assistant/core\", \"direct_link_to_file_line\": \"https://github.com/home-assistant/core/blob/master/core/script/version_bump.py#L13\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _bump_release(release, bump_type):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Bump a release tuple consisting of 3 numbers.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    major, minor, patch = release\"}, {\"line_number\": 4, \"line_content\": \"    if bump_type == 'patch':\"}, {\"line_number\": 5, \"line_content\": \"        patch += 1\"}, {\"line_number\": 6, \"line_content\": \"    elif bump_type == 'minor':\"}, {\"line_number\": 7, \"line_content\": \"        minor += 1\"}, {\"line_number\": 8, \"line_content\": \"        patch = 0\"}, {\"line_number\": 9, \"line_content\": \"    return major, minor, patch\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/home-assistant/core\", \"direct_link_to_file_line\": \"https://github.com/home-assistant/core/blob/master/core/script/version_bump.py#L26\", \"contents\": {\"total_lines\": 44, \"lines\": [{\"line_number\": 1, \"line_content\": \"def bump_version(version, bump_type):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Return a new version given a current version and action.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    to_change = {}\"}, {\"line_number\": 4, \"line_content\": \"    if bump_type == 'minor':\"}, {\"line_number\": 5, \"line_content\": \"        to_change['dev'] = None\"}, {\"line_number\": 6, \"line_content\": \"        to_change['pre'] = None\"}, {\"line_number\": 7, \"line_content\": \"        if not version.is_prerelease or version.release[2] != 0:\"}, {\"line_number\": 8, \"line_content\": \"            to_change['release'] = _bump_release(version.release, 'minor')\"}, {\"line_number\": 9, \"line_content\": \"    elif bump_type == 'patch':\"}, {\"line_number\": 10, \"line_content\": \"        to_change['dev'] = None\"}, {\"line_number\": 11, \"line_content\": \"        to_change['pre'] = None\"}, {\"line_number\": 12, \"line_content\": \"        if not version.is_prerelease:\"}, {\"line_number\": 13, \"line_content\": \"            to_change['release'] = _bump_release(version.release, 'patch')\"}, {\"line_number\": 14, \"line_content\": \"    elif bump_type == 'dev':\"}, {\"line_number\": 15, \"line_content\": \"        if version.is_devrelease:\"}, {\"line_number\": 16, \"line_content\": \"            to_change['dev'] = 'dev', version.dev + 1\"}, {\"line_number\": 17, \"line_content\": \"        else:\"}, {\"line_number\": 18, \"line_content\": \"            to_change['pre'] = 'dev', 0\"}, {\"line_number\": 19, \"line_content\": \"            to_change['release'] = _bump_release(version.release, 'minor')\"}, {\"line_number\": 20, \"line_content\": \"    elif bump_type == 'beta':\"}, {\"line_number\": 21, \"line_content\": \"        if version.is_devrelease:\"}, {\"line_number\": 22, \"line_content\": \"            to_change['dev'] = None\"}, {\"line_number\": 23, \"line_content\": \"            to_change['pre'] = 'b', 0\"}, {\"line_number\": 24, \"line_content\": \"        elif version.is_prerelease:\"}, {\"line_number\": 25, \"line_content\": \"            if version.pre[0] == 'a':\"}, {\"line_number\": 26, \"line_content\": \"                to_change['pre'] = 'b', 0\"}, {\"line_number\": 27, \"line_content\": \"            if version.pre[0] == 'b':\"}, {\"line_number\": 28, \"line_content\": \"                to_change['pre'] = 'b', version.pre[1] + 1\"}, {\"line_number\": 29, \"line_content\": \"            else:\"}, {\"line_number\": 30, \"line_content\": \"                to_change['pre'] = 'b', 0\"}, {\"line_number\": 31, \"line_content\": \"                to_change['release'] = _bump_release(version.release, 'patch')\"}, {\"line_number\": 32, \"line_content\": \"        else:\"}, {\"line_number\": 33, \"line_content\": \"            to_change['release'] = _bump_release(version.release, 'patch')\"}, {\"line_number\": 34, \"line_content\": \"            to_change['pre'] = 'b', 0\"}, {\"line_number\": 35, \"line_content\": \"    elif bump_type == 'nightly':\"}, {\"line_number\": 36, \"line_content\": \"        if not version.is_devrelease:\"}, {\"line_number\": 37, \"line_content\": \"            raise ValueError('Can only be run on dev release')\"}, {\"line_number\": 38, \"line_content\": \"        to_change['dev'] = 'dev', datetime.utcnow().date().isoformat().replace(\"}, {\"line_number\": 39, \"line_content\": \"            '-', '')\"}, {\"line_number\": 40, \"line_content\": \"    else:\"}, {\"line_number\": 41, \"line_content\": \"        assert False, f'Unsupported type: {bump_type}'\"}, {\"line_number\": 42, \"line_content\": \"    temp = Version('0')\"}, {\"line_number\": 43, \"line_content\": \"    temp._version = version._version._replace(**to_change)\"}, {\"line_number\": 44, \"line_content\": \"    return Version(str(temp))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/home-assistant/core\", \"direct_link_to_file_line\": \"https://github.com/home-assistant/core/blob/master/core/script/version_bump.py#L102\", \"contents\": {\"total_lines\": 13, \"lines\": [{\"line_number\": 1, \"line_content\": \"def write_version(version):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Update Home Assistant constant file with new version.\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    with open('homeassistant/const.py') as fil:\"}, {\"line_number\": 4, \"line_content\": \"        content = fil.read()\"}, {\"line_number\": 5, \"line_content\": \"    major, minor, patch = str(version).split('.', 2)\"}, {\"line_number\": 6, \"line_content\": \"    content = re.sub('MAJOR_VERSION = .*\\\\n', f'MAJOR_VERSION = {major}\\\\n',\"}, {\"line_number\": 7, \"line_content\": \"        content)\"}, {\"line_number\": 8, \"line_content\": \"    content = re.sub('MINOR_VERSION = .*\\\\n', f'MINOR_VERSION = {minor}\\\\n',\"}, {\"line_number\": 9, \"line_content\": \"        content)\"}, {\"line_number\": 10, \"line_content\": \"    content = re.sub('PATCH_VERSION = .*\\\\n', f'PATCH_VERSION = \\\"{patch}\\\"\\\\n',\"}, {\"line_number\": 11, \"line_content\": \"        content)\"}, {\"line_number\": 12, \"line_content\": \"    with open('homeassistant/const.py', 'wt') as fil:\"}, {\"line_number\": 13, \"line_content\": \"        content = fil.write(content)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chubin/cheat.sh\", \"direct_link_to_file_line\": \"https://github.com/chubin/cheat.sh/blob/master/cheat.sh/lib/options.py#L5\", \"contents\": {\"total_lines\": 25, \"lines\": [{\"line_number\": 1, \"line_content\": \"def parse_args(args):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Parse arguments and options.\"}, {\"line_number\": 4, \"line_content\": \"    Replace short options with their long counterparts.\"}, {\"line_number\": 5, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    result = {'add_comments': True}\"}, {\"line_number\": 7, \"line_content\": \"    query = ''\"}, {\"line_number\": 8, \"line_content\": \"    newargs = {}\"}, {\"line_number\": 9, \"line_content\": \"    for key, val in args.items():\"}, {\"line_number\": 10, \"line_content\": \"        if val == '' or val == [] or val == ['']:\"}, {\"line_number\": 11, \"line_content\": \"            query += key\"}, {\"line_number\": 12, \"line_content\": \"            continue\"}, {\"line_number\": 13, \"line_content\": \"        if val == 'True':\"}, {\"line_number\": 14, \"line_content\": \"            val = True\"}, {\"line_number\": 15, \"line_content\": \"        if val == 'False':\"}, {\"line_number\": 16, \"line_content\": \"            val = False\"}, {\"line_number\": 17, \"line_content\": \"        newargs[key] = val\"}, {\"line_number\": 18, \"line_content\": \"    options_meaning = {'c': dict(add_comments=False, unindent_code=False),\"}, {\"line_number\": 19, \"line_content\": \"        'C': dict(add_comments=False, unindent_code=True), 'Q': dict(\"}, {\"line_number\": 20, \"line_content\": \"        remove_text=True), 'q': dict(quiet=True), 'T': {'no-terminal': True}}\"}, {\"line_number\": 21, \"line_content\": \"    for option, meaning in options_meaning.items():\"}, {\"line_number\": 22, \"line_content\": \"        if option in query:\"}, {\"line_number\": 23, \"line_content\": \"            result.update(meaning)\"}, {\"line_number\": 24, \"line_content\": \"    result.update(newargs)\"}, {\"line_number\": 25, \"line_content\": \"    return result\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chubin/cheat.sh\", \"direct_link_to_file_line\": \"https://github.com/chubin/cheat.sh/blob/master/cheat.sh/lib/cheat_wrapper.py#L22\", \"contents\": {\"total_lines\": 68, \"lines\": [{\"line_number\": 1, \"line_content\": \"def cheat_wrapper(query, request_options=None, output_format='ansi'):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    Function that delivers cheat sheet for `query`.\"}, {\"line_number\": 4, \"line_content\": \"    If `html` is True, the answer is formatted as HTML.\"}, {\"line_number\": 5, \"line_content\": \"    Additional request options specified in `request_options`.\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    def _add_section_name(query):\"}, {\"line_number\": 8, \"line_content\": \"        if ' ' not in query and '+' not in query:\"}, {\"line_number\": 9, \"line_content\": \"            return query\"}, {\"line_number\": 10, \"line_content\": \"        if '/' in query:\"}, {\"line_number\": 11, \"line_content\": \"            return query\"}, {\"line_number\": 12, \"line_content\": \"        if ' ' in query:\"}, {\"line_number\": 13, \"line_content\": \"            return '%s/%s' % tuple(query.split(' ', 1))\"}, {\"line_number\": 14, \"line_content\": \"        return '%s/%s' % tuple(query.split('+', 1))\"}, {\"line_number\": 15, \"line_content\": \"    def _rewrite_aliases(word):\"}, {\"line_number\": 16, \"line_content\": \"        if word == ':bash.completion':\"}, {\"line_number\": 17, \"line_content\": \"            return ':bash_completion'\"}, {\"line_number\": 18, \"line_content\": \"        return word\"}, {\"line_number\": 19, \"line_content\": \"    def _rewrite_section_name(query):\"}, {\"line_number\": 20, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 21, \"line_content\": \"        Rewriting special section names:\"}, {\"line_number\": 22, \"line_content\": \"        * EDITOR:NAME => emacs:go-mode\"}, {\"line_number\": 23, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 24, \"line_content\": \"        if '/' not in query:\"}, {\"line_number\": 25, \"line_content\": \"            return query\"}, {\"line_number\": 26, \"line_content\": \"        section_name, rest = query.split('/', 1)\"}, {\"line_number\": 27, \"line_content\": \"        if ':' in section_name:\"}, {\"line_number\": 28, \"line_content\": \"            section_name = rewrite_editor_section_name(section_name)\"}, {\"line_number\": 29, \"line_content\": \"        section_name = LANGUAGE_ALIAS.get(section_name, section_name)\"}, {\"line_number\": 30, \"line_content\": \"        return '%s/%s' % (section_name, rest)\"}, {\"line_number\": 31, \"line_content\": \"    def _sanitize_query(query):\"}, {\"line_number\": 32, \"line_content\": \"        return re.sub('[<>\\\"]', '', query)\"}, {\"line_number\": 33, \"line_content\": \"    def _strip_hyperlink(query):\"}, {\"line_number\": 34, \"line_content\": \"        return re.sub('(,[0-9]+)+$', '', query)\"}, {\"line_number\": 35, \"line_content\": \"    def _parse_query(query):\"}, {\"line_number\": 36, \"line_content\": \"        topic = query\"}, {\"line_number\": 37, \"line_content\": \"        keyword = None\"}, {\"line_number\": 38, \"line_content\": \"        search_options = ''\"}, {\"line_number\": 39, \"line_content\": \"        keyword = None\"}, {\"line_number\": 40, \"line_content\": \"        if '~' in query:\"}, {\"line_number\": 41, \"line_content\": \"            topic = query\"}, {\"line_number\": 42, \"line_content\": \"            pos = topic.index('~')\"}, {\"line_number\": 43, \"line_content\": \"            keyword = topic[pos + 1:]\"}, {\"line_number\": 44, \"line_content\": \"            topic = topic[:pos]\"}, {\"line_number\": 45, \"line_content\": \"            if '/' in keyword:\"}, {\"line_number\": 46, \"line_content\": \"                search_options = keyword[::-1]\"}, {\"line_number\": 47, \"line_content\": \"                search_options = search_options[:search_options.index('/')]\"}, {\"line_number\": 48, \"line_content\": \"                keyword = keyword[:-len(search_options) - 1]\"}, {\"line_number\": 49, \"line_content\": \"        return topic, keyword, search_options\"}, {\"line_number\": 50, \"line_content\": \"    query = _sanitize_query(query)\"}, {\"line_number\": 51, \"line_content\": \"    query = _add_section_name(query)\"}, {\"line_number\": 52, \"line_content\": \"    query = _rewrite_aliases(query)\"}, {\"line_number\": 53, \"line_content\": \"    query = _rewrite_section_name(query)\"}, {\"line_number\": 54, \"line_content\": \"    topic, keyword, search_options = _parse_query(query)\"}, {\"line_number\": 55, \"line_content\": \"    if keyword:\"}, {\"line_number\": 56, \"line_content\": \"        answers = find_answers_by_keyword(topic, keyword, options=\"}, {\"line_number\": 57, \"line_content\": \"            search_options, request_options=request_options)\"}, {\"line_number\": 58, \"line_content\": \"    else:\"}, {\"line_number\": 59, \"line_content\": \"        answers = [get_answer_dict(topic, request_options=request_options)]\"}, {\"line_number\": 60, \"line_content\": \"    answers = [postprocessing.postprocess(answer, keyword, search_options,\"}, {\"line_number\": 61, \"line_content\": \"        request_options=request_options) for answer in answers]\"}, {\"line_number\": 62, \"line_content\": \"    answer_data = {'query': query, 'keyword': keyword, 'answers': answers}\"}, {\"line_number\": 63, \"line_content\": \"    if output_format == 'html':\"}, {\"line_number\": 64, \"line_content\": \"        answer_data['topics_list'] = get_topics_list()\"}, {\"line_number\": 65, \"line_content\": \"        return frontend.html.visualize(answer_data, request_options)\"}, {\"line_number\": 66, \"line_content\": \"    elif output_format == 'json':\"}, {\"line_number\": 67, \"line_content\": \"        return json.dumps(answer_data, indent=4)\"}, {\"line_number\": 68, \"line_content\": \"    return frontend.ansi.visualize(answer_data, request_options)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chubin/cheat.sh\", \"direct_link_to_file_line\": \"https://github.com/chubin/cheat.sh/blob/master/cheat.sh/lib/cheat_wrapper.py#L29\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _add_section_name(query):\"}, {\"line_number\": 2, \"line_content\": \"    if ' ' not in query and '+' not in query:\"}, {\"line_number\": 3, \"line_content\": \"        return query\"}, {\"line_number\": 4, \"line_content\": \"    if '/' in query:\"}, {\"line_number\": 5, \"line_content\": \"        return query\"}, {\"line_number\": 6, \"line_content\": \"    if ' ' in query:\"}, {\"line_number\": 7, \"line_content\": \"        return '%s/%s' % tuple(query.split(' ', 1))\"}, {\"line_number\": 8, \"line_content\": \"    return '%s/%s' % tuple(query.split('+', 1))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chubin/cheat.sh\", \"direct_link_to_file_line\": \"https://github.com/chubin/cheat.sh/blob/master/cheat.sh/lib/cheat_wrapper.py#L40\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _rewrite_aliases(word):\"}, {\"line_number\": 2, \"line_content\": \"    if word == ':bash.completion':\"}, {\"line_number\": 3, \"line_content\": \"        return ':bash_completion'\"}, {\"line_number\": 4, \"line_content\": \"    return word\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/chubin/cheat.sh\", \"direct_link_to_file_line\": \"https://github.com/chubin/cheat.sh/blob/master/cheat.sh/lib/cheat_wrapper.py#L45\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _rewrite_section_name(query):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"        Rewriting special section names:\"}, {\"line_number\": 4, \"line_content\": \"        * EDITOR:NAME => emacs:go-mode\"}, {\"line_number\": 5, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    if '/' not in query:\"}, {\"line_number\": 7, \"line_content\": \"        return query\"}, {\"line_number\": 8, \"line_content\": \"    section_name, rest = query.split('/', 1)\"}, {\"line_number\": 9, \"line_content\": \"    if ':' in section_name:\"}, {\"line_number\": 10, \"line_content\": \"        section_name = rewrite_editor_section_name(section_name)\"}, {\"line_number\": 11, \"line_content\": \"    section_name = LANGUAGE_ALIAS.get(section_name, section_name)\"}, {\"line_number\": 12, \"line_content\": \"    return '%s/%s' % (section_name, rest)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/reddit-archive/reddit\", \"direct_link_to_file_line\": \"https://github.com/reddit-archive/reddit/blob/master/reddit/scripts/geoip_service.py#L60\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def json_response(result):\"}, {\"line_number\": 2, \"line_content\": \"    json_output = json.dumps(result, ensure_ascii=False, encoding='iso-8859-1')\"}, {\"line_number\": 3, \"line_content\": \"    response = make_response(json_output.encode('utf-8'), 200)\"}, {\"line_number\": 4, \"line_content\": \"    response.headers['Content-Type'] = 'application/json; charset=utf-8'\"}, {\"line_number\": 5, \"line_content\": \"    return response\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/reddit-archive/reddit\", \"direct_link_to_file_line\": \"https://github.com/reddit-archive/reddit/blob/master/reddit/scripts/geoip_service.py#L67\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"@application.route('/geoip/<ips>')\"}, {\"line_number\": 2, \"line_content\": \"def get_record(ips):\"}, {\"line_number\": 3, \"line_content\": \"    if gi:\"}, {\"line_number\": 4, \"line_content\": \"        result = {ip: gi.record_by_addr(ip) for ip in ips.split('+')}\"}, {\"line_number\": 5, \"line_content\": \"    elif gc:\"}, {\"line_number\": 6, \"line_content\": \"        result = {ip: {'country_code': gc.country_code_by_addr(ip),\"}, {\"line_number\": 7, \"line_content\": \"            'country_name': gc.country_name_by_addr(ip)} for ip in ips.\"}, {\"line_number\": 8, \"line_content\": \"            split('+')}\"}, {\"line_number\": 9, \"line_content\": \"    else:\"}, {\"line_number\": 10, \"line_content\": \"        result = {}\"}, {\"line_number\": 11, \"line_content\": \"    return json_response(result)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/reddit-archive/reddit\", \"direct_link_to_file_line\": \"https://github.com/reddit-archive/reddit/blob/master/reddit/scripts/geoip_service.py#L84\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"@application.route('/org/<ips>')\"}, {\"line_number\": 2, \"line_content\": \"def get_organizations(ips):\"}, {\"line_number\": 3, \"line_content\": \"    if go:\"}, {\"line_number\": 4, \"line_content\": \"        return json_response({ip: go.org_by_addr(ip) for ip in ips.split('+')})\"}, {\"line_number\": 5, \"line_content\": \"    else:\"}, {\"line_number\": 6, \"line_content\": \"        return json_response({})\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/reddit-archive/reddit\", \"direct_link_to_file_line\": \"https://github.com/reddit-archive/reddit/blob/master/reddit/scripts/tracker.py#L97\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"@application.route('/')\"}, {\"line_number\": 2, \"line_content\": \"def healthcheck():\"}, {\"line_number\": 3, \"line_content\": \"    return 'I am healthy.'\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/reddit-archive/reddit\", \"direct_link_to_file_line\": \"https://github.com/reddit-archive/reddit/blob/master/reddit/scripts/tracker.py#L102\", \"contents\": {\"total_lines\": 15, \"lines\": [{\"line_number\": 1, \"line_content\": \"@application.route('/click')\"}, {\"line_number\": 2, \"line_content\": \"def click_redirect():\"}, {\"line_number\": 3, \"line_content\": \"    destination = request.args['url'].encode('utf-8')\"}, {\"line_number\": 4, \"line_content\": \"    fullname = request.args['id'].encode('utf-8')\"}, {\"line_number\": 5, \"line_content\": \"    observed_mac = request.args['hash']\"}, {\"line_number\": 6, \"line_content\": \"    expected_hashable = ''.join((destination, fullname))\"}, {\"line_number\": 7, \"line_content\": \"    expected_mac = hmac.new(tracking_secret, expected_hashable, hashlib.sha1\"}, {\"line_number\": 8, \"line_content\": \"        ).hexdigest()\"}, {\"line_number\": 9, \"line_content\": \"    if not constant_time_compare(expected_mac, observed_mac):\"}, {\"line_number\": 10, \"line_content\": \"        abort(403)\"}, {\"line_number\": 11, \"line_content\": \"    u = urlparse(destination)\"}, {\"line_number\": 12, \"line_content\": \"    if u.query:\"}, {\"line_number\": 13, \"line_content\": \"        u = _fix_query_encoding(u)\"}, {\"line_number\": 14, \"line_content\": \"        destination = u.geturl()\"}, {\"line_number\": 15, \"line_content\": \"    return _redirect_nocache(destination)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/python-pillow/Pillow\", \"direct_link_to_file_line\": \"https://github.com/python-pillow/Pillow/blob/master/Pillow/selftest.py#L17\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _info(im):\"}, {\"line_number\": 2, \"line_content\": \"    im.load()\"}, {\"line_number\": 3, \"line_content\": \"    return im.format, im.mode, im.size\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/python-pillow/Pillow\", \"direct_link_to_file_line\": \"https://github.com/python-pillow/Pillow/blob/master/Pillow/selftest.py#L22\", \"contents\": {\"total_lines\": 118, \"lines\": [{\"line_number\": 1, \"line_content\": \"def testimage():\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    PIL lets you create in-memory images with various pixel types:\"}, {\"line_number\": 4, \"line_content\": \"    >>> from PIL import Image, ImageDraw, ImageFilter, ImageMath\"}, {\"line_number\": 5, \"line_content\": \"    >>> im = Image.new(\\\"1\\\", (128, 128)) # monochrome\"}, {\"line_number\": 6, \"line_content\": \"    >>> _info(im)\"}, {\"line_number\": 7, \"line_content\": \"    (None, '1', (128, 128))\"}, {\"line_number\": 8, \"line_content\": \"    >>> _info(Image.new(\\\"L\\\", (128, 128))) # grayscale (luminance)\"}, {\"line_number\": 9, \"line_content\": \"    (None, 'L', (128, 128))\"}, {\"line_number\": 10, \"line_content\": \"    >>> _info(Image.new(\\\"P\\\", (128, 128))) # palette\"}, {\"line_number\": 11, \"line_content\": \"    (None, 'P', (128, 128))\"}, {\"line_number\": 12, \"line_content\": \"    >>> _info(Image.new(\\\"RGB\\\", (128, 128))) # truecolor\"}, {\"line_number\": 13, \"line_content\": \"    (None, 'RGB', (128, 128))\"}, {\"line_number\": 14, \"line_content\": \"    >>> _info(Image.new(\\\"I\\\", (128, 128))) # 32-bit integer\"}, {\"line_number\": 15, \"line_content\": \"    (None, 'I', (128, 128))\"}, {\"line_number\": 16, \"line_content\": \"    >>> _info(Image.new(\\\"F\\\", (128, 128))) # 32-bit floating point\"}, {\"line_number\": 17, \"line_content\": \"    (None, 'F', (128, 128))\"}, {\"line_number\": 18, \"line_content\": \"    Or open existing files:\"}, {\"line_number\": 19, \"line_content\": \"    >>> with Image.open(\\\"Tests/images/hopper.gif\\\") as im:\"}, {\"line_number\": 20, \"line_content\": \"    ...     _info(im)\"}, {\"line_number\": 21, \"line_content\": \"    ('GIF', 'P', (128, 128))\"}, {\"line_number\": 22, \"line_content\": \"    >>> _info(Image.open(\\\"Tests/images/hopper.ppm\\\"))\"}, {\"line_number\": 23, \"line_content\": \"    ('PPM', 'RGB', (128, 128))\"}, {\"line_number\": 24, \"line_content\": \"    >>> try:\"}, {\"line_number\": 25, \"line_content\": \"    ...  _info(Image.open(\\\"Tests/images/hopper.jpg\\\"))\"}, {\"line_number\": 26, \"line_content\": \"    ... except OSError as v:\"}, {\"line_number\": 27, \"line_content\": \"    ...  print(v)\"}, {\"line_number\": 28, \"line_content\": \"    ('JPEG', 'RGB', (128, 128))\"}, {\"line_number\": 29, \"line_content\": \"    PIL doesn't actually load the image data until it's needed,\"}, {\"line_number\": 30, \"line_content\": \"    or you call the \\\"load\\\" method:\"}, {\"line_number\": 31, \"line_content\": \"    >>> im = Image.open(\\\"Tests/images/hopper.ppm\\\")\"}, {\"line_number\": 32, \"line_content\": \"    >>> print(im.im) # internal image attribute\"}, {\"line_number\": 33, \"line_content\": \"    None\"}, {\"line_number\": 34, \"line_content\": \"    >>> a = im.load()\"}, {\"line_number\": 35, \"line_content\": \"    >>> type(im.im) # doctest: +ELLIPSIS\"}, {\"line_number\": 36, \"line_content\": \"    <... '...ImagingCore'>\"}, {\"line_number\": 37, \"line_content\": \"    You can apply many different operations on images.  Most\"}, {\"line_number\": 38, \"line_content\": \"    operations return a new image:\"}, {\"line_number\": 39, \"line_content\": \"    >>> im = Image.open(\\\"Tests/images/hopper.ppm\\\")\"}, {\"line_number\": 40, \"line_content\": \"    >>> _info(im.convert(\\\"L\\\"))\"}, {\"line_number\": 41, \"line_content\": \"    (None, 'L', (128, 128))\"}, {\"line_number\": 42, \"line_content\": \"    >>> _info(im.copy())\"}, {\"line_number\": 43, \"line_content\": \"    (None, 'RGB', (128, 128))\"}, {\"line_number\": 44, \"line_content\": \"    >>> _info(im.crop((32, 32, 96, 96)))\"}, {\"line_number\": 45, \"line_content\": \"    (None, 'RGB', (64, 64))\"}, {\"line_number\": 46, \"line_content\": \"    >>> _info(im.filter(ImageFilter.BLUR))\"}, {\"line_number\": 47, \"line_content\": \"    (None, 'RGB', (128, 128))\"}, {\"line_number\": 48, \"line_content\": \"    >>> im.getbands()\"}, {\"line_number\": 49, \"line_content\": \"    ('R', 'G', 'B')\"}, {\"line_number\": 50, \"line_content\": \"    >>> im.getbbox()\"}, {\"line_number\": 51, \"line_content\": \"    (0, 0, 128, 128)\"}, {\"line_number\": 52, \"line_content\": \"    >>> len(im.getdata())\"}, {\"line_number\": 53, \"line_content\": \"    16384\"}, {\"line_number\": 54, \"line_content\": \"    >>> im.getextrema()\"}, {\"line_number\": 55, \"line_content\": \"    ((0, 255), (0, 255), (0, 255))\"}, {\"line_number\": 56, \"line_content\": \"    >>> im.getpixel((0, 0))\"}, {\"line_number\": 57, \"line_content\": \"    (20, 20, 70)\"}, {\"line_number\": 58, \"line_content\": \"    >>> len(im.getprojection())\"}, {\"line_number\": 59, \"line_content\": \"    2\"}, {\"line_number\": 60, \"line_content\": \"    >>> len(im.histogram())\"}, {\"line_number\": 61, \"line_content\": \"    768\"}, {\"line_number\": 62, \"line_content\": \"    >>> '%.7f' % im.entropy()\"}, {\"line_number\": 63, \"line_content\": \"    '8.8212866'\"}, {\"line_number\": 64, \"line_content\": \"    >>> _info(im.point(list(range(256))*3))\"}, {\"line_number\": 65, \"line_content\": \"    (None, 'RGB', (128, 128))\"}, {\"line_number\": 66, \"line_content\": \"    >>> _info(im.resize((64, 64)))\"}, {\"line_number\": 67, \"line_content\": \"    (None, 'RGB', (64, 64))\"}, {\"line_number\": 68, \"line_content\": \"    >>> _info(im.rotate(45))\"}, {\"line_number\": 69, \"line_content\": \"    (None, 'RGB', (128, 128))\"}, {\"line_number\": 70, \"line_content\": \"    >>> [_info(ch) for ch in im.split()]\"}, {\"line_number\": 71, \"line_content\": \"    [(None, 'L', (128, 128)), (None, 'L', (128, 128)), (None, 'L', (128, 128))]\"}, {\"line_number\": 72, \"line_content\": \"    >>> len(im.convert(\\\"1\\\").tobitmap())\"}, {\"line_number\": 73, \"line_content\": \"    10456\"}, {\"line_number\": 74, \"line_content\": \"    >>> len(im.tobytes())\"}, {\"line_number\": 75, \"line_content\": \"    49152\"}, {\"line_number\": 76, \"line_content\": \"    >>> _info(im.transform((512, 512), Image.AFFINE, (1,0,0,0,1,0)))\"}, {\"line_number\": 77, \"line_content\": \"    (None, 'RGB', (512, 512))\"}, {\"line_number\": 78, \"line_content\": \"    >>> _info(im.transform((512, 512), Image.EXTENT, (32,32,96,96)))\"}, {\"line_number\": 79, \"line_content\": \"    (None, 'RGB', (512, 512))\"}, {\"line_number\": 80, \"line_content\": \"    The ImageDraw module lets you draw stuff in raster images:\"}, {\"line_number\": 81, \"line_content\": \"    >>> im = Image.new(\\\"L\\\", (128, 128), 64)\"}, {\"line_number\": 82, \"line_content\": \"    >>> d = ImageDraw.ImageDraw(im)\"}, {\"line_number\": 83, \"line_content\": \"    >>> d.line((0, 0, 128, 128), fill=128)\"}, {\"line_number\": 84, \"line_content\": \"    >>> d.line((0, 128, 128, 0), fill=128)\"}, {\"line_number\": 85, \"line_content\": \"    >>> im.getextrema()\"}, {\"line_number\": 86, \"line_content\": \"    (64, 128)\"}, {\"line_number\": 87, \"line_content\": \"    In 1.1.4, you can specify colors in a number of ways:\"}, {\"line_number\": 88, \"line_content\": \"    >>> xy = 0, 0, 128, 128\"}, {\"line_number\": 89, \"line_content\": \"    >>> im = Image.new(\\\"RGB\\\", (128, 128), 0)\"}, {\"line_number\": 90, \"line_content\": \"    >>> d = ImageDraw.ImageDraw(im)\"}, {\"line_number\": 91, \"line_content\": \"    >>> d.rectangle(xy, \\\"#f00\\\")\"}, {\"line_number\": 92, \"line_content\": \"    >>> im.getpixel((0, 0))\"}, {\"line_number\": 93, \"line_content\": \"    (255, 0, 0)\"}, {\"line_number\": 94, \"line_content\": \"    >>> d.rectangle(xy, \\\"#ff0000\\\")\"}, {\"line_number\": 95, \"line_content\": \"    >>> im.getpixel((0, 0))\"}, {\"line_number\": 96, \"line_content\": \"    (255, 0, 0)\"}, {\"line_number\": 97, \"line_content\": \"    >>> d.rectangle(xy, \\\"rgb(255,0,0)\\\")\"}, {\"line_number\": 98, \"line_content\": \"    >>> im.getpixel((0, 0))\"}, {\"line_number\": 99, \"line_content\": \"    (255, 0, 0)\"}, {\"line_number\": 100, \"line_content\": \"    >>> d.rectangle(xy, \\\"rgb(100%,0%,0%)\\\")\"}, {\"line_number\": 101, \"line_content\": \"    >>> im.getpixel((0, 0))\"}, {\"line_number\": 102, \"line_content\": \"    (255, 0, 0)\"}, {\"line_number\": 103, \"line_content\": \"    >>> d.rectangle(xy, \\\"hsl(0, 100%, 50%)\\\")\"}, {\"line_number\": 104, \"line_content\": \"    >>> im.getpixel((0, 0))\"}, {\"line_number\": 105, \"line_content\": \"    (255, 0, 0)\"}, {\"line_number\": 106, \"line_content\": \"    >>> d.rectangle(xy, \\\"red\\\")\"}, {\"line_number\": 107, \"line_content\": \"    >>> im.getpixel((0, 0))\"}, {\"line_number\": 108, \"line_content\": \"    (255, 0, 0)\"}, {\"line_number\": 109, \"line_content\": \"    In 1.1.6, you can use the ImageMath module to do image\"}, {\"line_number\": 110, \"line_content\": \"    calculations.\"}, {\"line_number\": 111, \"line_content\": \"    >>> im = ImageMath.eval(\\\"float(im + 20)\\\", im=im.convert(\\\"L\\\"))\"}, {\"line_number\": 112, \"line_content\": \"    >>> im.mode, im.size\"}, {\"line_number\": 113, \"line_content\": \"    ('F', (128, 128))\"}, {\"line_number\": 114, \"line_content\": \"    PIL can do many other things, but I'll leave that for another\"}, {\"line_number\": 115, \"line_content\": \"    day.  If you're curious, check the handbook, available from:\"}, {\"line_number\": 116, \"line_content\": \"        http://www.pythonware.com\"}, {\"line_number\": 117, \"line_content\": \"    Cheers /F\"}, {\"line_number\": 118, \"line_content\": \"    \\\"\\\"\\\"\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/python-pillow/Pillow\", \"direct_link_to_file_line\": \"https://github.com/python-pillow/Pillow/blob/master/Pillow/setup.py#L23\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_version():\"}, {\"line_number\": 2, \"line_content\": \"    version_file = 'src/PIL/_version.py'\"}, {\"line_number\": 3, \"line_content\": \"    with open(version_file, 'r') as f:\"}, {\"line_number\": 4, \"line_content\": \"        exec(compile(f.read(), version_file, 'exec'))\"}, {\"line_number\": 5, \"line_content\": \"    return locals()['__version__']\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/python-pillow/Pillow\", \"direct_link_to_file_line\": \"https://github.com/python-pillow/Pillow/blob/master/Pillow/setup.py#L150\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _dbg(s, tp=None):\"}, {\"line_number\": 2, \"line_content\": \"    if DEBUG:\"}, {\"line_number\": 3, \"line_content\": \"        if tp:\"}, {\"line_number\": 4, \"line_content\": \"            print(s % tp)\"}, {\"line_number\": 5, \"line_content\": \"            return\"}, {\"line_number\": 6, \"line_content\": \"        print(s)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/python-pillow/Pillow\", \"direct_link_to_file_line\": \"https://github.com/python-pillow/Pillow/blob/master/Pillow/setup.py#L158\", \"contents\": {\"total_lines\": 33, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _find_library_dirs_ldconfig():\"}, {\"line_number\": 2, \"line_content\": \"    if sys.platform.startswith('linux') or sys.platform.startswith('gnu'):\"}, {\"line_number\": 3, \"line_content\": \"        if struct.calcsize('l') == 4:\"}, {\"line_number\": 4, \"line_content\": \"            machine = os.uname()[4] + '-32'\"}, {\"line_number\": 5, \"line_content\": \"        else:\"}, {\"line_number\": 6, \"line_content\": \"            machine = os.uname()[4] + '-64'\"}, {\"line_number\": 7, \"line_content\": \"        mach_map = {'x86_64-64': 'libc6,x86-64', 'ppc64-64': 'libc6,64bit',\"}, {\"line_number\": 8, \"line_content\": \"            'sparc64-64': 'libc6,64bit', 's390x-64': 'libc6,64bit',\"}, {\"line_number\": 9, \"line_content\": \"            'ia64-64': 'libc6,IA-64'}\"}, {\"line_number\": 10, \"line_content\": \"        abi_type = mach_map.get(machine, 'libc6')\"}, {\"line_number\": 11, \"line_content\": \"        args = ['/sbin/ldconfig', '-p']\"}, {\"line_number\": 12, \"line_content\": \"        expr = '.*\\\\\\\\(%s.*\\\\\\\\) => (.*)' % abi_type\"}, {\"line_number\": 13, \"line_content\": \"        env = dict(os.environ)\"}, {\"line_number\": 14, \"line_content\": \"        env['LC_ALL'] = 'C'\"}, {\"line_number\": 15, \"line_content\": \"        env['LANG'] = 'C'\"}, {\"line_number\": 16, \"line_content\": \"    elif sys.platform.startswith('freebsd'):\"}, {\"line_number\": 17, \"line_content\": \"        args = ['/sbin/ldconfig', '-r']\"}, {\"line_number\": 18, \"line_content\": \"        expr = '.* => (.*)'\"}, {\"line_number\": 19, \"line_content\": \"        env = {}\"}, {\"line_number\": 20, \"line_content\": \"    try:\"}, {\"line_number\": 21, \"line_content\": \"        p = subprocess.Popen(args, stderr=subprocess.DEVNULL, stdout=\"}, {\"line_number\": 22, \"line_content\": \"            subprocess.PIPE, env=env)\"}, {\"line_number\": 23, \"line_content\": \"    except OSError:\"}, {\"line_number\": 24, \"line_content\": \"        return []\"}, {\"line_number\": 25, \"line_content\": \"    [data, _] = p.communicate()\"}, {\"line_number\": 26, \"line_content\": \"    if isinstance(data, bytes):\"}, {\"line_number\": 27, \"line_content\": \"        data = data.decode()\"}, {\"line_number\": 28, \"line_content\": \"    dirs = []\"}, {\"line_number\": 29, \"line_content\": \"    for dll in re.findall(expr, data):\"}, {\"line_number\": 30, \"line_content\": \"        dir = os.path.dirname(dll)\"}, {\"line_number\": 31, \"line_content\": \"        if dir not in dirs:\"}, {\"line_number\": 32, \"line_content\": \"            dirs.append(dir)\"}, {\"line_number\": 33, \"line_content\": \"    return dirs\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apachecn/awesome-algorithm\", \"direct_link_to_file_line\": \"https://github.com/apachecn/awesome-algorithm/blob/master/awesome-algorithm/docs/Algorithm_Implementation/Python/Sort/insertionSort.py#L1\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def insertionSort(nums):\"}, {\"line_number\": 2, \"line_content\": \"    if not nums or len(nums) < 2:\"}, {\"line_number\": 3, \"line_content\": \"        return nums\"}, {\"line_number\": 4, \"line_content\": \"    for i in range(1, len(nums)):\"}, {\"line_number\": 5, \"line_content\": \"        for j in range(i):\"}, {\"line_number\": 6, \"line_content\": \"            if nums[i] < nums[j]:\"}, {\"line_number\": 7, \"line_content\": \"                nums[i], nums[j] = nums[j], nums[i]\"}, {\"line_number\": 8, \"line_content\": \"    return nums\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apachecn/awesome-algorithm\", \"direct_link_to_file_line\": \"https://github.com/apachecn/awesome-algorithm/blob/master/awesome-algorithm/docs/Algorithm_Implementation/Java/Sort/insertionSort.py#L1\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def insertionSort(nums):\"}, {\"line_number\": 2, \"line_content\": \"    if not nums or len(nums) < 2:\"}, {\"line_number\": 3, \"line_content\": \"        return nums\"}, {\"line_number\": 4, \"line_content\": \"    for i in range(1, len(nums)):\"}, {\"line_number\": 5, \"line_content\": \"        for j in range(i):\"}, {\"line_number\": 6, \"line_content\": \"            if nums[i] < nums[j]:\"}, {\"line_number\": 7, \"line_content\": \"                nums[i], nums[j] = nums[j], nums[i]\"}, {\"line_number\": 8, \"line_content\": \"    return nums\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apachecn/awesome-algorithm\", \"direct_link_to_file_line\": \"https://github.com/apachecn/awesome-algorithm/blob/master/awesome-algorithm/docs/\\u5251\\u6307offer/Python/28-\\u6570\\u7ec4\\u4e2d\\u51fa\\u73b0\\u6b21\\u6570\\u8d85\\u8fc7\\u4e00\\u534a\\u7684\\u6570\\u5b57.py#L2\", \"contents\": {\"total_lines\": 17, \"lines\": [{\"line_number\": 1, \"line_content\": \"def MoreThanHalfNum_Solution(self, numbers):\"}, {\"line_number\": 2, \"line_content\": \"    length = len(numbers)\"}, {\"line_number\": 3, \"line_content\": \"    if not numbers:\"}, {\"line_number\": 4, \"line_content\": \"        return 0\"}, {\"line_number\": 5, \"line_content\": \"    result = numbers[0]\"}, {\"line_number\": 6, \"line_content\": \"    times = 1\"}, {\"line_number\": 7, \"line_content\": \"    for i in range(1, length):\"}, {\"line_number\": 8, \"line_content\": \"        if times == 0:\"}, {\"line_number\": 9, \"line_content\": \"            result = numbers[i]\"}, {\"line_number\": 10, \"line_content\": \"            times = 1\"}, {\"line_number\": 11, \"line_content\": \"        elif numbers[i] == result:\"}, {\"line_number\": 12, \"line_content\": \"            times += 1\"}, {\"line_number\": 13, \"line_content\": \"        else:\"}, {\"line_number\": 14, \"line_content\": \"            times -= 1\"}, {\"line_number\": 15, \"line_content\": \"    if not self.CheckNoreThanHalf(numbers, length, result):\"}, {\"line_number\": 16, \"line_content\": \"        return 0\"}, {\"line_number\": 17, \"line_content\": \"    return result\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apachecn/awesome-algorithm\", \"direct_link_to_file_line\": \"https://github.com/apachecn/awesome-algorithm/blob/master/awesome-algorithm/docs/\\u5251\\u6307offer/Python/29-\\u6700\\u5c0f\\u7684k\\u4e2a\\u6570.py#L3\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def GetLeastNumbers_Solution(self, tinput, k):\"}, {\"line_number\": 2, \"line_content\": \"    if not tinput or k > len(tinput):\"}, {\"line_number\": 3, \"line_content\": \"        return []\"}, {\"line_number\": 4, \"line_content\": \"    tinput = self.quick_sort(tinput)\"}, {\"line_number\": 5, \"line_content\": \"    return tinput[:k]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/apachecn/awesome-algorithm\", \"direct_link_to_file_line\": \"https://github.com/apachecn/awesome-algorithm/blob/master/awesome-algorithm/docs/\\u5251\\u6307offer/Python/25-\\u590d\\u6742\\u94fe\\u8868\\u7684\\u590d\\u5236.py#L9\", \"contents\": {\"total_lines\": 25, \"lines\": [{\"line_number\": 1, \"line_content\": \"def Clone(self, pHead):\"}, {\"line_number\": 2, \"line_content\": \"    if not pHead:\"}, {\"line_number\": 3, \"line_content\": \"        return None\"}, {\"line_number\": 4, \"line_content\": \"    pNode = pHead\"}, {\"line_number\": 5, \"line_content\": \"    while pNode:\"}, {\"line_number\": 6, \"line_content\": \"        pClone = RandomListNode(pNode.label)\"}, {\"line_number\": 7, \"line_content\": \"        pClone.next = pNode.next\"}, {\"line_number\": 8, \"line_content\": \"        pNode.next = pClone\"}, {\"line_number\": 9, \"line_content\": \"        pNode = pClone.next\"}, {\"line_number\": 10, \"line_content\": \"    pNode = pHead\"}, {\"line_number\": 11, \"line_content\": \"    while pNode:\"}, {\"line_number\": 12, \"line_content\": \"        pClone = pNode.next\"}, {\"line_number\": 13, \"line_content\": \"        if pNode.random != None:\"}, {\"line_number\": 14, \"line_content\": \"            pClone.random = pNode.random.next\"}, {\"line_number\": 15, \"line_content\": \"        pNode = pClone.next\"}, {\"line_number\": 16, \"line_content\": \"    pNode = pHead\"}, {\"line_number\": 17, \"line_content\": \"    pCloneHead = pCloneNode = pNode.next\"}, {\"line_number\": 18, \"line_content\": \"    pNode.next = pCloneHead.next\"}, {\"line_number\": 19, \"line_content\": \"    pNode = pNode.next\"}, {\"line_number\": 20, \"line_content\": \"    while pNode:\"}, {\"line_number\": 21, \"line_content\": \"        pCloneNode.next = pNode.next\"}, {\"line_number\": 22, \"line_content\": \"        pCloneNode = pCloneNode.next\"}, {\"line_number\": 23, \"line_content\": \"        pNode.next = pCloneNode.next\"}, {\"line_number\": 24, \"line_content\": \"        pNode = pNode.next\"}, {\"line_number\": 25, \"line_content\": \"    return pCloneHead\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pallets/click\", \"direct_link_to_file_line\": \"https://github.com/pallets/click/blob/master/click/tests/test_bashcomplete.py#L7\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def choices_without_help(cli, args, incomplete):\"}, {\"line_number\": 2, \"line_content\": \"    completions = get_choices(cli, 'dummy', args, incomplete)\"}, {\"line_number\": 3, \"line_content\": \"    return [c[0] for c in completions]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pallets/click\", \"direct_link_to_file_line\": \"https://github.com/pallets/click/blob/master/click/tests/test_bashcomplete.py#L12\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def choices_with_help(cli, args, incomplete):\"}, {\"line_number\": 2, \"line_content\": \"    return list(get_choices(cli, 'dummy', args, incomplete))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pallets/click\", \"direct_link_to_file_line\": \"https://github.com/pallets/click/blob/master/click/tests/test_bashcomplete.py#L16\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_single_command():\"}, {\"line_number\": 2, \"line_content\": \"    @click.command()\"}, {\"line_number\": 3, \"line_content\": \"    @click.option('--local-opt')\"}, {\"line_number\": 4, \"line_content\": \"    def cli(local_opt):\"}, {\"line_number\": 5, \"line_content\": \"        pass\"}, {\"line_number\": 6, \"line_content\": \"    assert choices_without_help(cli, [], '-') == ['--local-opt', '--help']\"}, {\"line_number\": 7, \"line_content\": \"    assert choices_without_help(cli, [], '') == []\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pallets/click\", \"direct_link_to_file_line\": \"https://github.com/pallets/click/blob/master/click/tests/test_bashcomplete.py#L26\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_boolean_flag():\"}, {\"line_number\": 2, \"line_content\": \"    @click.command()\"}, {\"line_number\": 3, \"line_content\": \"    @click.option('--shout/--no-shout', default=False)\"}, {\"line_number\": 4, \"line_content\": \"    def cli(local_opt):\"}, {\"line_number\": 5, \"line_content\": \"        pass\"}, {\"line_number\": 6, \"line_content\": \"    assert choices_without_help(cli, [], '-') == ['--shout', '--no-shout',\"}, {\"line_number\": 7, \"line_content\": \"        '--help']\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pallets/click\", \"direct_link_to_file_line\": \"https://github.com/pallets/click/blob/master/click/tests/test_bashcomplete.py#L35\", \"contents\": {\"total_lines\": 13, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_multi_value_option():\"}, {\"line_number\": 2, \"line_content\": \"    @click.group()\"}, {\"line_number\": 3, \"line_content\": \"    @click.option('--pos', nargs=2, type=float)\"}, {\"line_number\": 4, \"line_content\": \"    def cli(local_opt):\"}, {\"line_number\": 5, \"line_content\": \"        pass\"}, {\"line_number\": 6, \"line_content\": \"    @cli.command()\"}, {\"line_number\": 7, \"line_content\": \"    @click.option('--local-opt')\"}, {\"line_number\": 8, \"line_content\": \"    def sub(local_opt):\"}, {\"line_number\": 9, \"line_content\": \"        pass\"}, {\"line_number\": 10, \"line_content\": \"    assert choices_without_help(cli, [], '-') == ['--pos', '--help']\"}, {\"line_number\": 11, \"line_content\": \"    assert choices_without_help(cli, ['--pos'], '') == []\"}, {\"line_number\": 12, \"line_content\": \"    assert choices_without_help(cli, ['--pos', '1.0'], '') == []\"}, {\"line_number\": 13, \"line_content\": \"    assert choices_without_help(cli, ['--pos', '1.0', '1.0'], '') == ['sub']\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pyecharts/pyecharts\", \"direct_link_to_file_line\": \"https://github.com/pyecharts/pyecharts/blob/master/pyecharts/setup.py#L40\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"@staticmethod\"}, {\"line_number\": 2, \"line_content\": \"def status(s):\"}, {\"line_number\": 3, \"line_content\": \"    print('\\u2728\\u2728 {0}'.format(s))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pyecharts/pyecharts\", \"direct_link_to_file_line\": \"https://github.com/pyecharts/pyecharts/blob/master/pyecharts/setup.py#L44\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def initialize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pyecharts/pyecharts\", \"direct_link_to_file_line\": \"https://github.com/pyecharts/pyecharts/blob/master/pyecharts/setup.py#L47\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def finalize_options(self):\"}, {\"line_number\": 2, \"line_content\": \"    pass\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pyecharts/pyecharts\", \"direct_link_to_file_line\": \"https://github.com/pyecharts/pyecharts/blob/master/pyecharts/setup.py#L50\", \"contents\": {\"total_lines\": 16, \"lines\": [{\"line_number\": 1, \"line_content\": \"def run(self):\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        self.status('Removing previous builds\\u2026')\"}, {\"line_number\": 4, \"line_content\": \"        rmtree(os.path.join(here, 'dist'))\"}, {\"line_number\": 5, \"line_content\": \"        rmtree(os.path.join(here, 'build'))\"}, {\"line_number\": 6, \"line_content\": \"        rmtree(os.path.join(here, '{0}.egg-info'.format(__title__)))\"}, {\"line_number\": 7, \"line_content\": \"    except OSError:\"}, {\"line_number\": 8, \"line_content\": \"        pass\"}, {\"line_number\": 9, \"line_content\": \"    self.status('Building Source and Wheel distribution\\u2026')\"}, {\"line_number\": 10, \"line_content\": \"    os.system('{0} setup.py bdist_wheel'.format(sys.executable))\"}, {\"line_number\": 11, \"line_content\": \"    self.status('Uploading the package to PyPI via Twine\\u2026')\"}, {\"line_number\": 12, \"line_content\": \"    os.system('twine upload dist/*')\"}, {\"line_number\": 13, \"line_content\": \"    self.status('Pushing git tags\\u2026')\"}, {\"line_number\": 14, \"line_content\": \"    os.system('git tag -a v{0} -m \\\"release version v{0}\\\"'.format(__version__))\"}, {\"line_number\": 15, \"line_content\": \"    os.system('git push origin v{0}'.format(__version__))\"}, {\"line_number\": 16, \"line_content\": \"    sys.exit()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/pyecharts/pyecharts\", \"direct_link_to_file_line\": \"https://github.com/pyecharts/pyecharts/blob/master/pyecharts/test/test_parallel.py#L8\", \"contents\": {\"total_lines\": 13, \"lines\": [{\"line_number\": 1, \"line_content\": \"@patch('pyecharts.render.engine.write_utf8_html_file')\"}, {\"line_number\": 2, \"line_content\": \"def test_parallel_base(fake_writer):\"}, {\"line_number\": 3, \"line_content\": \"    data = [[1, 91, 45, 125, 0.82, 34], [2, 65, 27, 78, 0.86, 45], [3, 83, \"}, {\"line_number\": 4, \"line_content\": \"        60, 84, 1.09, 73], [4, 109, 81, 121, 1.28, 68], [5, 106, 77, 114, \"}, {\"line_number\": 5, \"line_content\": \"        1.07, 55], [6, 109, 81, 121, 1.28, 68]]\"}, {\"line_number\": 6, \"line_content\": \"    c = Parallel().add_schema([{'dim': 0, 'name': 'data'}, {'dim': 1,\"}, {\"line_number\": 7, \"line_content\": \"        'name': 'AQI'}, {'dim': 2, 'name': 'PM2.5'}, {'dim': 3, 'name':\"}, {\"line_number\": 8, \"line_content\": \"        'PM10'}, {'dim': 4, 'name': 'CO'}, {'dim': 5, 'name': 'NO2'}]).add(\"}, {\"line_number\": 9, \"line_content\": \"        'parallel', data)\"}, {\"line_number\": 10, \"line_content\": \"    c.render()\"}, {\"line_number\": 11, \"line_content\": \"    _, content = fake_writer.call_args[0]\"}, {\"line_number\": 12, \"line_content\": \"    assert_equal(c.theme, 'white')\"}, {\"line_number\": 13, \"line_content\": \"    assert_equal(c.renderer, 'canvas')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/nvbn/thefuck\", \"direct_link_to_file_line\": \"https://github.com/nvbn/thefuck/blob/master/thefuck/release.py#L10\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_new_setup_py_lines():\"}, {\"line_number\": 2, \"line_content\": \"    global version\"}, {\"line_number\": 3, \"line_content\": \"    with open('setup.py', 'r') as sf:\"}, {\"line_number\": 4, \"line_content\": \"        current_setup = sf.readlines()\"}, {\"line_number\": 5, \"line_content\": \"    for line in current_setup:\"}, {\"line_number\": 6, \"line_content\": \"        if line.startswith('VERSION = '):\"}, {\"line_number\": 7, \"line_content\": \"            major, minor = re.findall(\\\"VERSION = '(\\\\\\\\d+)\\\\\\\\.(\\\\\\\\d+)'\\\", line)[0]\"}, {\"line_number\": 8, \"line_content\": \"            version = '{}.{}'.format(major, int(minor) + 1)\"}, {\"line_number\": 9, \"line_content\": \"            yield \\\"VERSION = '{}'\\\\n\\\".format(version)\"}, {\"line_number\": 10, \"line_content\": \"        else:\"}, {\"line_number\": 11, \"line_content\": \"            yield line\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/nvbn/thefuck\", \"direct_link_to_file_line\": \"https://github.com/nvbn/thefuck/blob/master/thefuck/fastentrypoints.py#L54\", \"contents\": {\"total_lines\": 19, \"lines\": [{\"line_number\": 1, \"line_content\": \"@classmethod\"}, {\"line_number\": 2, \"line_content\": \"def get_args(cls, dist, header=None):\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    Yield write_script() argument tuples for a distribution's\"}, {\"line_number\": 5, \"line_content\": \"    console_scripts and gui_scripts entry points.\"}, {\"line_number\": 6, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 7, \"line_content\": \"    if header is None:\"}, {\"line_number\": 8, \"line_content\": \"        header = cls.get_header()\"}, {\"line_number\": 9, \"line_content\": \"    spec = str(dist.as_requirement())\"}, {\"line_number\": 10, \"line_content\": \"    for type_ in ('console', 'gui'):\"}, {\"line_number\": 11, \"line_content\": \"        group = type_ + '_scripts'\"}, {\"line_number\": 12, \"line_content\": \"        for name, ep in dist.get_entry_map(group).items():\"}, {\"line_number\": 13, \"line_content\": \"            if re.search('[\\\\\\\\\\\\\\\\/]', name):\"}, {\"line_number\": 14, \"line_content\": \"                raise ValueError('Path separators not allowed in script names')\"}, {\"line_number\": 15, \"line_content\": \"            script_text = TEMPLATE.format(ep.module_name, ep.attrs[0], '.'.\"}, {\"line_number\": 16, \"line_content\": \"                join(ep.attrs), spec, group, name)\"}, {\"line_number\": 17, \"line_content\": \"            args = cls._get_script_args(type_, name, header, script_text)\"}, {\"line_number\": 18, \"line_content\": \"            for res in args:\"}, {\"line_number\": 19, \"line_content\": \"                yield res\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/nvbn/thefuck\", \"direct_link_to_file_line\": \"https://github.com/nvbn/thefuck/blob/master/thefuck/fastentrypoints.py#L80\", \"contents\": {\"total_lines\": 24, \"lines\": [{\"line_number\": 1, \"line_content\": \"def main():\"}, {\"line_number\": 2, \"line_content\": \"    import os\"}, {\"line_number\": 3, \"line_content\": \"    import re\"}, {\"line_number\": 4, \"line_content\": \"    import shutil\"}, {\"line_number\": 5, \"line_content\": \"    import sys\"}, {\"line_number\": 6, \"line_content\": \"    dests = sys.argv[1:] or ['.']\"}, {\"line_number\": 7, \"line_content\": \"    filename = re.sub('\\\\\\\\.pyc$', '.py', __file__)\"}, {\"line_number\": 8, \"line_content\": \"    for dst in dests:\"}, {\"line_number\": 9, \"line_content\": \"        shutil.copy(filename, dst)\"}, {\"line_number\": 10, \"line_content\": \"        manifest_path = os.path.join(dst, 'MANIFEST.in')\"}, {\"line_number\": 11, \"line_content\": \"        setup_path = os.path.join(dst, 'setup.py')\"}, {\"line_number\": 12, \"line_content\": \"        with open(manifest_path, 'a+') as manifest:\"}, {\"line_number\": 13, \"line_content\": \"            manifest.seek(0)\"}, {\"line_number\": 14, \"line_content\": \"            manifest_content = manifest.read()\"}, {\"line_number\": 15, \"line_content\": \"            if not 'include fastentrypoints.py' in manifest_content:\"}, {\"line_number\": 16, \"line_content\": \"                manifest.write(('\\\\n' if manifest_content else '') +\"}, {\"line_number\": 17, \"line_content\": \"                    'include fastentrypoints.py')\"}, {\"line_number\": 18, \"line_content\": \"        with open(setup_path, 'a+') as setup:\"}, {\"line_number\": 19, \"line_content\": \"            setup.seek(0)\"}, {\"line_number\": 20, \"line_content\": \"            setup_content = setup.read()\"}, {\"line_number\": 21, \"line_content\": \"            if not 'import fastentrypoints' in setup_content:\"}, {\"line_number\": 22, \"line_content\": \"                setup.seek(0)\"}, {\"line_number\": 23, \"line_content\": \"                setup.truncate()\"}, {\"line_number\": 24, \"line_content\": \"                setup.write('import fastentrypoints\\\\n' + setup_content)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/nvbn/thefuck\", \"direct_link_to_file_line\": \"https://github.com/nvbn/thefuck/blob/master/thefuck/thefuck/types.py#L16\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __init__(self, script, output):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Initializes command with given values.\"}, {\"line_number\": 3, \"line_content\": \"        :type script: basestring\"}, {\"line_number\": 4, \"line_content\": \"        :type output: basestring\"}, {\"line_number\": 5, \"line_content\": \"        \\\"\\\"\\\"\"}, {\"line_number\": 6, \"line_content\": \"    self.script = script\"}, {\"line_number\": 7, \"line_content\": \"    self.output = output\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/nvbn/thefuck\", \"direct_link_to_file_line\": \"https://github.com/nvbn/thefuck/blob/master/thefuck/thefuck/types.py#L26\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"@property\"}, {\"line_number\": 2, \"line_content\": \"def stdout(self):\"}, {\"line_number\": 3, \"line_content\": \"    logs.warn('`stdout` is deprecated, please use `output` instead')\"}, {\"line_number\": 4, \"line_content\": \"    return self.output\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/joke2k/faker\", \"direct_link_to_file_line\": \"https://github.com/joke2k/faker/blob/master/faker/faker/factory.py#L23\", \"contents\": {\"total_lines\": 23, \"lines\": [{\"line_number\": 1, \"line_content\": \"@classmethod\"}, {\"line_number\": 2, \"line_content\": \"def create(cls, locale=None, providers=None, generator=None, includes=None,\"}, {\"line_number\": 3, \"line_content\": \"    **config):\"}, {\"line_number\": 4, \"line_content\": \"    if includes is None:\"}, {\"line_number\": 5, \"line_content\": \"        includes = []\"}, {\"line_number\": 6, \"line_content\": \"    locale = locale.replace('-', '_') if locale else DEFAULT_LOCALE\"}, {\"line_number\": 7, \"line_content\": \"    locale = pylocale.normalize(locale).split('.')[0]\"}, {\"line_number\": 8, \"line_content\": \"    if locale not in AVAILABLE_LOCALES:\"}, {\"line_number\": 9, \"line_content\": \"        msg = 'Invalid configuration for faker locale `{}`'.format(locale)\"}, {\"line_number\": 10, \"line_content\": \"        raise AttributeError(msg)\"}, {\"line_number\": 11, \"line_content\": \"    config['locale'] = locale\"}, {\"line_number\": 12, \"line_content\": \"    providers = providers or PROVIDERS\"}, {\"line_number\": 13, \"line_content\": \"    providers += includes\"}, {\"line_number\": 14, \"line_content\": \"    faker = generator or Generator(**config)\"}, {\"line_number\": 15, \"line_content\": \"    for prov_name in providers:\"}, {\"line_number\": 16, \"line_content\": \"        if prov_name == 'faker.providers':\"}, {\"line_number\": 17, \"line_content\": \"            continue\"}, {\"line_number\": 18, \"line_content\": \"        prov_cls, lang_found = cls._get_provider_class(prov_name, locale)\"}, {\"line_number\": 19, \"line_content\": \"        provider = prov_cls(faker)\"}, {\"line_number\": 20, \"line_content\": \"        provider.__provider__ = prov_name\"}, {\"line_number\": 21, \"line_content\": \"        provider.__lang__ = lang_found\"}, {\"line_number\": 22, \"line_content\": \"        faker.add_provider(provider)\"}, {\"line_number\": 23, \"line_content\": \"    return faker\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/joke2k/faker\", \"direct_link_to_file_line\": \"https://github.com/joke2k/faker/blob/master/faker/faker/factory.py#L23\", \"contents\": {\"total_lines\": 15, \"lines\": [{\"line_number\": 1, \"line_content\": \"@classmethod\"}, {\"line_number\": 2, \"line_content\": \"def _get_provider_class(cls, provider, locale=''):\"}, {\"line_number\": 3, \"line_content\": \"    provider_class = cls._find_provider_class(provider, locale)\"}, {\"line_number\": 4, \"line_content\": \"    if provider_class:\"}, {\"line_number\": 5, \"line_content\": \"        return provider_class, locale\"}, {\"line_number\": 6, \"line_content\": \"    if locale and locale != DEFAULT_LOCALE:\"}, {\"line_number\": 7, \"line_content\": \"        provider_class = cls._find_provider_class(provider, DEFAULT_LOCALE)\"}, {\"line_number\": 8, \"line_content\": \"        if provider_class:\"}, {\"line_number\": 9, \"line_content\": \"            return provider_class, DEFAULT_LOCALE\"}, {\"line_number\": 10, \"line_content\": \"    provider_class = cls._find_provider_class(provider)\"}, {\"line_number\": 11, \"line_content\": \"    if provider_class:\"}, {\"line_number\": 12, \"line_content\": \"        return provider_class, None\"}, {\"line_number\": 13, \"line_content\": \"    msg = 'Unable to find provider `{}` with locale `{}`'.format(provider,\"}, {\"line_number\": 14, \"line_content\": \"        locale)\"}, {\"line_number\": 15, \"line_content\": \"    raise ValueError(msg)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/joke2k/faker\", \"direct_link_to_file_line\": \"https://github.com/joke2k/faker/blob/master/faker/faker/factory.py#L23\", \"contents\": {\"total_lines\": 26, \"lines\": [{\"line_number\": 1, \"line_content\": \"@classmethod\"}, {\"line_number\": 2, \"line_content\": \"def _find_provider_class(cls, provider_path, locale=None):\"}, {\"line_number\": 3, \"line_content\": \"    provider_module = import_module(provider_path)\"}, {\"line_number\": 4, \"line_content\": \"    if getattr(provider_module, 'localized', False):\"}, {\"line_number\": 5, \"line_content\": \"        logger.debug('Looking for locale `{}` in provider `{}`.'.format(\"}, {\"line_number\": 6, \"line_content\": \"            locale, provider_module.__name__))\"}, {\"line_number\": 7, \"line_content\": \"        available_locales = list_module(provider_module)\"}, {\"line_number\": 8, \"line_content\": \"        if not locale or locale not in available_locales:\"}, {\"line_number\": 9, \"line_content\": \"            unavailable_locale = locale\"}, {\"line_number\": 10, \"line_content\": \"            locale = getattr(provider_module, 'default_locale', DEFAULT_LOCALE)\"}, {\"line_number\": 11, \"line_content\": \"            logger.debug(\"}, {\"line_number\": 12, \"line_content\": \"                'Specified locale `{}` is not available for provider `{}`. Locale reset to `{}` for this provider.'\"}, {\"line_number\": 13, \"line_content\": \"                .format(unavailable_locale, provider_module.__name__, locale))\"}, {\"line_number\": 14, \"line_content\": \"        else:\"}, {\"line_number\": 15, \"line_content\": \"            logger.debug('Provider `{}` has been localized to `{}`.'.format\"}, {\"line_number\": 16, \"line_content\": \"                (provider_module.__name__, locale))\"}, {\"line_number\": 17, \"line_content\": \"        path = '{provider_path}.{locale}'.format(provider_path=\"}, {\"line_number\": 18, \"line_content\": \"            provider_path, locale=locale)\"}, {\"line_number\": 19, \"line_content\": \"        provider_module = import_module(path)\"}, {\"line_number\": 20, \"line_content\": \"    else:\"}, {\"line_number\": 21, \"line_content\": \"        logger.debug(\"}, {\"line_number\": 22, \"line_content\": \"            'Provider `{}` does not feature localization. Specified locale `{}` is not utilized for this provider.'\"}, {\"line_number\": 23, \"line_content\": \"            .format(provider_module.__name__, locale))\"}, {\"line_number\": 24, \"line_content\": \"        if locale is not None:\"}, {\"line_number\": 25, \"line_content\": \"            provider_module = import_module(provider_path)\"}, {\"line_number\": 26, \"line_content\": \"    return provider_module.Provider\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/joke2k/faker\", \"direct_link_to_file_line\": \"https://github.com/joke2k/faker/blob/master/faker/faker/proxy.py#L58\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __dir__(self):\"}, {\"line_number\": 2, \"line_content\": \"    attributes = set(super(Faker, self).__dir__())\"}, {\"line_number\": 3, \"line_content\": \"    for factory in self.factories:\"}, {\"line_number\": 4, \"line_content\": \"        attributes |= {attr for attr in dir(factory) if not attr.startswith\"}, {\"line_number\": 5, \"line_content\": \"            ('_')}\"}, {\"line_number\": 6, \"line_content\": \"    return sorted(attributes)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/joke2k/faker\", \"direct_link_to_file_line\": \"https://github.com/joke2k/faker/blob/master/faker/faker/proxy.py#L66\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def __getitem__(self, locale):\"}, {\"line_number\": 2, \"line_content\": \"    return self._factory_map[locale.replace('-', '_')]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/eliangcs/http-prompt\", \"direct_link_to_file_line\": \"https://github.com/eliangcs/http-prompt/blob/master/http-prompt/setup.py#L18\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def find_version(*file_paths):\"}, {\"line_number\": 2, \"line_content\": \"    with codecs.open(os.path.join(here, *file_paths), 'r', 'latin1') as f:\"}, {\"line_number\": 3, \"line_content\": \"        version_file = f.read()\"}, {\"line_number\": 4, \"line_content\": \"    version_match = re.search('^__version__ = [\\\\'\\\\\\\\\\\"]([^\\\\'\\\\\\\\\\\"]*)[\\\\'\\\\\\\\\\\"]',\"}, {\"line_number\": 5, \"line_content\": \"        version_file, re.M)\"}, {\"line_number\": 6, \"line_content\": \"    if version_match:\"}, {\"line_number\": 7, \"line_content\": \"        return version_match.group(1)\"}, {\"line_number\": 8, \"line_content\": \"    raise RuntimeError('Unable to find version string')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/eliangcs/http-prompt\", \"direct_link_to_file_line\": \"https://github.com/eliangcs/http-prompt/blob/master/http-prompt/setup.py#L33\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def read_description(filename):\"}, {\"line_number\": 2, \"line_content\": \"    with codecs.open(filename, encoding='utf-8') as f:\"}, {\"line_number\": 3, \"line_content\": \"        return f.read()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/eliangcs/http-prompt\", \"direct_link_to_file_line\": \"https://github.com/eliangcs/http-prompt/blob/master/http-prompt/setup.py#L38\", \"contents\": {\"total_lines\": 10, \"lines\": [{\"line_number\": 1, \"line_content\": \"def read_requirements(filename):\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        with open(filename) as f:\"}, {\"line_number\": 4, \"line_content\": \"            result = [line.rstrip() for line in f]\"}, {\"line_number\": 5, \"line_content\": \"    except IOError:\"}, {\"line_number\": 6, \"line_content\": \"        raise IOError(os.getcwd())\"}, {\"line_number\": 7, \"line_content\": \"    else:\"}, {\"line_number\": 8, \"line_content\": \"        if sys.version_info < (2, 7):\"}, {\"line_number\": 9, \"line_content\": \"            result.append('ordereddict>=1.1')\"}, {\"line_number\": 10, \"line_content\": \"        return result\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/eliangcs/http-prompt\", \"direct_link_to_file_line\": \"https://github.com/eliangcs/http-prompt/blob/master/http-prompt/http_prompt/completer.py#L43\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def compile_rules(rules):\"}, {\"line_number\": 2, \"line_content\": \"    compiled_rules = []\"}, {\"line_number\": 3, \"line_content\": \"    for pattern, meta_dict in rules:\"}, {\"line_number\": 4, \"line_content\": \"        regex = re.compile(pattern)\"}, {\"line_number\": 5, \"line_content\": \"        compiled_rules.append((regex, meta_dict))\"}, {\"line_number\": 6, \"line_content\": \"    return compiled_rules\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/eliangcs/http-prompt\", \"direct_link_to_file_line\": \"https://github.com/eliangcs/http-prompt/blob/master/http-prompt/http_prompt/completer.py#L53\", \"contents\": {\"total_lines\": 12, \"lines\": [{\"line_number\": 1, \"line_content\": \"def fuzzyfinder(text, collection):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"https://github.com/amjith/fuzzyfinder\\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    suggestions = []\"}, {\"line_number\": 4, \"line_content\": \"    if not isinstance(text, six.text_type):\"}, {\"line_number\": 5, \"line_content\": \"        text = six.u(text)\"}, {\"line_number\": 6, \"line_content\": \"    pat = '.*?'.join(map(re.escape, text))\"}, {\"line_number\": 7, \"line_content\": \"    regex = re.compile(pat, flags=re.IGNORECASE)\"}, {\"line_number\": 8, \"line_content\": \"    for item in collection:\"}, {\"line_number\": 9, \"line_content\": \"        r = regex.search(item)\"}, {\"line_number\": 10, \"line_content\": \"        if r:\"}, {\"line_number\": 11, \"line_content\": \"            suggestions.append((len(r.group()), r.start(), item))\"}, {\"line_number\": 12, \"line_content\": \"    return (z for _, _, z in sorted(suggestions))\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/soimort/you-get\", \"direct_link_to_file_line\": \"https://github.com/soimort/you-get/blob/master/you-get/tests/test.py#L17\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_imgur(self):\"}, {\"line_number\": 2, \"line_content\": \"    imgur.download('http://imgur.com/WVLk5nD', info_only=True)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/soimort/you-get\", \"direct_link_to_file_line\": \"https://github.com/soimort/you-get/blob/master/you-get/tests/test.py#L20\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_magisto(self):\"}, {\"line_number\": 2, \"line_content\": \"    magisto.download('http://www.magisto.com/album/video/f3x9AAQORAkfDnIFDA',\"}, {\"line_number\": 3, \"line_content\": \"        info_only=True)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/soimort/you-get\", \"direct_link_to_file_line\": \"https://github.com/soimort/you-get/blob/master/you-get/tests/test.py#L26\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_youtube(self):\"}, {\"line_number\": 2, \"line_content\": \"    youtube.download('http://www.youtube.com/watch?v=pzKerr0JIPA',\"}, {\"line_number\": 3, \"line_content\": \"        info_only=True)\"}, {\"line_number\": 4, \"line_content\": \"    youtube.download('http://youtu.be/pzKerr0JIPA', info_only=True)\"}, {\"line_number\": 5, \"line_content\": \"    youtube.download(\"}, {\"line_number\": 6, \"line_content\": \"        'http://www.youtube.com/attribution_link?u=/watch?v%3DldAKIzq7bvs%26feature%3Dshare'\"}, {\"line_number\": 7, \"line_content\": \"        , info_only=True)\"}, {\"line_number\": 8, \"line_content\": \"    youtube.download('https://www.youtube.com/watch?v=Fpr4fQSh1cc',\"}, {\"line_number\": 9, \"line_content\": \"        info_only=True)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/soimort/you-get\", \"direct_link_to_file_line\": \"https://github.com/soimort/you-get/blob/master/you-get/tests/test.py#L39\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_acfun(self):\"}, {\"line_number\": 2, \"line_content\": \"    acfun.download('https://www.acfun.cn/v/ac11701912', info_only=True)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/soimort/you-get\", \"direct_link_to_file_line\": \"https://github.com/soimort/you-get/blob/master/you-get/tests/test.py#L42\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def test_bilibil(self):\"}, {\"line_number\": 2, \"line_content\": \"    bilibili.download('https://www.bilibili.com/watchlater/#/BV1PE411q7mZ/p6',\"}, {\"line_number\": 3, \"line_content\": \"        info_only=True)\"}, {\"line_number\": 4, \"line_content\": \"    bilibili.download('https://www.bilibili.com/watchlater/#/av74906671/p6',\"}, {\"line_number\": 5, \"line_content\": \"        info_only=True)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/localstack/localstack\", \"direct_link_to_file_line\": \"https://github.com/localstack/localstack/blob/master/localstack/localstack/plugins.py#L8\", \"contents\": {\"total_lines\": 9, \"lines\": [{\"line_number\": 1, \"line_content\": \"def register_localstack_plugins():\"}, {\"line_number\": 2, \"line_content\": \"    if os.environ.get(ENV_SCRIPT_STARTING_DOCKER) not in TRUE_STRINGS:\"}, {\"line_number\": 3, \"line_content\": \"        do_register_localstack_plugins()\"}, {\"line_number\": 4, \"line_content\": \"    docker_flags = []\"}, {\"line_number\": 5, \"line_content\": \"    for port in [config.EDGE_PORT, config.EDGE_PORT_HTTP]:\"}, {\"line_number\": 6, \"line_content\": \"        if port:\"}, {\"line_number\": 7, \"line_content\": \"            docker_flags += ['-p {p}:{p}'.format(p=port)]\"}, {\"line_number\": 8, \"line_content\": \"    result = {'docker': {'run_flags': ' '.join(docker_flags)}}\"}, {\"line_number\": 9, \"line_content\": \"    return result\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/localstack/localstack\", \"direct_link_to_file_line\": \"https://github.com/localstack/localstack/blob/master/localstack/localstack/plugins.py#L29\", \"contents\": {\"total_lines\": 76, \"lines\": [{\"line_number\": 1, \"line_content\": \"def do_register_localstack_plugins():\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        from localstack.services import edge\"}, {\"line_number\": 4, \"line_content\": \"        from localstack.services.apigateway import apigateway_starter\"}, {\"line_number\": 5, \"line_content\": \"        from localstack.services.s3 import s3_listener, s3_starter\"}, {\"line_number\": 6, \"line_content\": \"        from localstack.services.ec2 import ec2_starter\"}, {\"line_number\": 7, \"line_content\": \"        from localstack.services.kms import kms_starter\"}, {\"line_number\": 8, \"line_content\": \"        from localstack.services.sns import sns_listener\"}, {\"line_number\": 9, \"line_content\": \"        from localstack.services.sqs import sqs_listener, sqs_starter\"}, {\"line_number\": 10, \"line_content\": \"        from localstack.services.iam import iam_listener, iam_starter\"}, {\"line_number\": 11, \"line_content\": \"        from localstack.services.sts import sts_starter, sts_listener\"}, {\"line_number\": 12, \"line_content\": \"        from localstack.services.ses import ses_starter\"}, {\"line_number\": 13, \"line_content\": \"        from localstack.services.ssm import ssm_listener\"}, {\"line_number\": 14, \"line_content\": \"        from localstack.services.logs import logs_listener, logs_starter\"}, {\"line_number\": 15, \"line_content\": \"        from localstack.services.infra import start_sns, start_route53, start_elasticsearch_service, start_lambda, start_sts, start_ssm, start_redshift, start_firehose, start_cloudwatch, start_dynamodbstreams\"}, {\"line_number\": 16, \"line_content\": \"        from localstack.services.events import events_listener, events_starter\"}, {\"line_number\": 17, \"line_content\": \"        from localstack.services.plugins import Plugin, register_plugin\"}, {\"line_number\": 18, \"line_content\": \"        from localstack.services.kinesis import kinesis_listener, kinesis_starter\"}, {\"line_number\": 19, \"line_content\": \"        from localstack.services.dynamodb import dynamodb_listener, dynamodb_starter\"}, {\"line_number\": 20, \"line_content\": \"        from localstack.services.apigateway import apigateway_listener\"}, {\"line_number\": 21, \"line_content\": \"        from localstack.services.stepfunctions import stepfunctions_starter, stepfunctions_listener\"}, {\"line_number\": 22, \"line_content\": \"        from localstack.services.cloudformation import cloudformation_listener, cloudformation_starter\"}, {\"line_number\": 23, \"line_content\": \"        from localstack.services.secretsmanager import secretsmanager_listener\"}, {\"line_number\": 24, \"line_content\": \"        from localstack.services.secretsmanager import secretsmanager_starter\"}, {\"line_number\": 25, \"line_content\": \"        register_plugin(Plugin('edge', start=edge.start_edge, active=True))\"}, {\"line_number\": 26, \"line_content\": \"        register_plugin(Plugin('apigateway', start=apigateway_starter.\"}, {\"line_number\": 27, \"line_content\": \"            start_apigateway, listener=apigateway_listener.UPDATE_APIGATEWAY))\"}, {\"line_number\": 28, \"line_content\": \"        register_plugin(Plugin('cloudformation', start=\"}, {\"line_number\": 29, \"line_content\": \"            cloudformation_starter.start_cloudformation, listener=\"}, {\"line_number\": 30, \"line_content\": \"            cloudformation_listener.UPDATE_CLOUDFORMATION))\"}, {\"line_number\": 31, \"line_content\": \"        register_plugin(Plugin('cloudwatch', start=start_cloudwatch))\"}, {\"line_number\": 32, \"line_content\": \"        register_plugin(Plugin('dynamodb', start=dynamodb_starter.\"}, {\"line_number\": 33, \"line_content\": \"            start_dynamodb, check=dynamodb_starter.check_dynamodb, listener\"}, {\"line_number\": 34, \"line_content\": \"            =dynamodb_listener.UPDATE_DYNAMODB))\"}, {\"line_number\": 35, \"line_content\": \"        register_plugin(Plugin('dynamodbstreams', start=start_dynamodbstreams))\"}, {\"line_number\": 36, \"line_content\": \"        register_plugin(Plugin('ec2', start=ec2_starter.start_ec2))\"}, {\"line_number\": 37, \"line_content\": \"        register_plugin(Plugin('es', start=start_elasticsearch_service))\"}, {\"line_number\": 38, \"line_content\": \"        register_plugin(Plugin('firehose', start=start_firehose))\"}, {\"line_number\": 39, \"line_content\": \"        register_plugin(Plugin('iam', start=iam_starter.start_iam, listener\"}, {\"line_number\": 40, \"line_content\": \"            =iam_listener.UPDATE_IAM))\"}, {\"line_number\": 41, \"line_content\": \"        register_plugin(Plugin('sts', start=sts_starter.start_sts, listener\"}, {\"line_number\": 42, \"line_content\": \"            =sts_listener.UPDATE_STS))\"}, {\"line_number\": 43, \"line_content\": \"        register_plugin(Plugin('kinesis', start=kinesis_starter.\"}, {\"line_number\": 44, \"line_content\": \"            start_kinesis, check=kinesis_starter.check_kinesis, listener=\"}, {\"line_number\": 45, \"line_content\": \"            kinesis_listener.UPDATE_KINESIS))\"}, {\"line_number\": 46, \"line_content\": \"        register_plugin(Plugin('kms', start=kms_starter.start_kms, priority=10)\"}, {\"line_number\": 47, \"line_content\": \"            )\"}, {\"line_number\": 48, \"line_content\": \"        register_plugin(Plugin('lambda', start=start_lambda))\"}, {\"line_number\": 49, \"line_content\": \"        register_plugin(Plugin('logs', start=logs_starter.\"}, {\"line_number\": 50, \"line_content\": \"            start_cloudwatch_logs, listener=logs_listener.UPDATE_LOGS))\"}, {\"line_number\": 51, \"line_content\": \"        register_plugin(Plugin('redshift', start=start_redshift))\"}, {\"line_number\": 52, \"line_content\": \"        register_plugin(Plugin('route53', start=start_route53))\"}, {\"line_number\": 53, \"line_content\": \"        register_plugin(Plugin('s3', start=s3_starter.start_s3, check=\"}, {\"line_number\": 54, \"line_content\": \"            s3_starter.check_s3, listener=s3_listener.UPDATE_S3))\"}, {\"line_number\": 55, \"line_content\": \"        register_plugin(Plugin('secretsmanager', start=\"}, {\"line_number\": 56, \"line_content\": \"            secretsmanager_starter.start_secretsmanager, check=\"}, {\"line_number\": 57, \"line_content\": \"            secretsmanager_starter.check_secretsmanager, listener=\"}, {\"line_number\": 58, \"line_content\": \"            secretsmanager_listener.UPDATE_SECRETSMANAGER))\"}, {\"line_number\": 59, \"line_content\": \"        register_plugin(Plugin('ses', start=ses_starter.start_ses))\"}, {\"line_number\": 60, \"line_content\": \"        register_plugin(Plugin('sns', start=start_sns, listener=\"}, {\"line_number\": 61, \"line_content\": \"            sns_listener.UPDATE_SNS))\"}, {\"line_number\": 62, \"line_content\": \"        register_plugin(Plugin('sqs', start=sqs_starter.start_sqs, listener\"}, {\"line_number\": 63, \"line_content\": \"            =sqs_listener.UPDATE_SQS, check=sqs_starter.check_sqs))\"}, {\"line_number\": 64, \"line_content\": \"        register_plugin(Plugin('ssm', start=start_ssm, listener=\"}, {\"line_number\": 65, \"line_content\": \"            ssm_listener.UPDATE_SSM))\"}, {\"line_number\": 66, \"line_content\": \"        register_plugin(Plugin('sts', start=start_sts))\"}, {\"line_number\": 67, \"line_content\": \"        register_plugin(Plugin('events', start=events_starter.start_events,\"}, {\"line_number\": 68, \"line_content\": \"            listener=events_listener.UPDATE_EVENTS))\"}, {\"line_number\": 69, \"line_content\": \"        register_plugin(Plugin('stepfunctions', start=stepfunctions_starter\"}, {\"line_number\": 70, \"line_content\": \"            .start_stepfunctions, listener=stepfunctions_listener.\"}, {\"line_number\": 71, \"line_content\": \"            UPDATE_STEPFUNCTIONS))\"}, {\"line_number\": 72, \"line_content\": \"    except Exception as e:\"}, {\"line_number\": 73, \"line_content\": \"        if not os.environ.get(ENV_SCRIPT_STARTING_DOCKER):\"}, {\"line_number\": 74, \"line_content\": \"            print('Unable to register plugins: %s' % e)\"}, {\"line_number\": 75, \"line_content\": \"            sys.stdout.flush()\"}, {\"line_number\": 76, \"line_content\": \"        raise e\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/localstack/localstack\", \"direct_link_to_file_line\": \"https://github.com/localstack/localstack/blob/master/localstack/localstack/config.py#L16\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def is_env_true(env_var_name):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Whether the given environment variable has a truthy value. \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    return os.environ.get(env_var_name, '').lower().strip() in TRUE_STRINGS\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/localstack/localstack\", \"direct_link_to_file_line\": \"https://github.com/localstack/localstack/blob/master/localstack/localstack/config.py#L21\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"def is_env_not_false(env_var_name):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\" Whether the given environment variable is empty or has a truthy value. \\\"\\\"\\\"\"}, {\"line_number\": 3, \"line_content\": \"    return os.environ.get(env_var_name, '').lower().strip(\"}, {\"line_number\": 4, \"line_content\": \"        ) not in FALSE_STRINGS\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/localstack/localstack\", \"direct_link_to_file_line\": \"https://github.com/localstack/localstack/blob/master/localstack/localstack/config.py#L156\", \"contents\": {\"total_lines\": 7, \"lines\": [{\"line_number\": 1, \"line_content\": \"def has_docker():\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        with open(os.devnull, 'w') as devnull:\"}, {\"line_number\": 4, \"line_content\": \"            subprocess.check_output('docker ps', stderr=devnull, shell=True)\"}, {\"line_number\": 5, \"line_content\": \"        return True\"}, {\"line_number\": 6, \"line_content\": \"    except Exception:\"}, {\"line_number\": 7, \"line_content\": \"        return False\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/cool-RR/PySnooper\", \"direct_link_to_file_line\": \"https://github.com/cool-RR/PySnooper/blob/master/PySnooper/setup.py#L7\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def read_file(filename):\"}, {\"line_number\": 2, \"line_content\": \"    with open(filename) as file:\"}, {\"line_number\": 3, \"line_content\": \"        return file.read()\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/cool-RR/PySnooper\", \"direct_link_to_file_line\": \"https://github.com/cool-RR/PySnooper/blob/master/PySnooper/pysnooper/pycompat.py#L83\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def timedelta_format(timedelta):\"}, {\"line_number\": 2, \"line_content\": \"    time = (datetime_module.datetime.min + timedelta).time()\"}, {\"line_number\": 3, \"line_content\": \"    return time_isoformat(time, timespec='microseconds')\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/cool-RR/PySnooper\", \"direct_link_to_file_line\": \"https://github.com/cool-RR/PySnooper/blob/master/PySnooper/pysnooper/pycompat.py#L87\", \"contents\": {\"total_lines\": 5, \"lines\": [{\"line_number\": 1, \"line_content\": \"def timedelta_parse(s):\"}, {\"line_number\": 2, \"line_content\": \"    hours, minutes, seconds, microseconds = map(int, s.replace('.', ':').\"}, {\"line_number\": 3, \"line_content\": \"        split(':'))\"}, {\"line_number\": 4, \"line_content\": \"    return datetime_module.timedelta(hours=hours, minutes=minutes, seconds=\"}, {\"line_number\": 5, \"line_content\": \"        seconds, microseconds=microseconds)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/cool-RR/PySnooper\", \"direct_link_to_file_line\": \"https://github.com/cool-RR/PySnooper/blob/master/PySnooper/pysnooper/pycompat.py#L72\", \"contents\": {\"total_lines\": 8, \"lines\": [{\"line_number\": 1, \"line_content\": \"def time_isoformat(time, timespec='microseconds'):\"}, {\"line_number\": 2, \"line_content\": \"    assert isinstance(time, datetime_module.time)\"}, {\"line_number\": 3, \"line_content\": \"    if timespec != 'microseconds':\"}, {\"line_number\": 4, \"line_content\": \"        raise NotImplementedError\"}, {\"line_number\": 5, \"line_content\": \"    result = '{:02d}:{:02d}:{:02d}.{:06d}'.format(time.hour, time.minute,\"}, {\"line_number\": 6, \"line_content\": \"        time.second, time.microsecond)\"}, {\"line_number\": 7, \"line_content\": \"    assert len(result) == 15\"}, {\"line_number\": 8, \"line_content\": \"    return result\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/cool-RR/PySnooper\", \"direct_link_to_file_line\": \"https://github.com/cool-RR/PySnooper/blob/master/PySnooper/pysnooper/pycompat.py#L31\", \"contents\": {\"total_lines\": 4, \"lines\": [{\"line_number\": 1, \"line_content\": \"@abc.abstractmethod\"}, {\"line_number\": 2, \"line_content\": \"def __fspath__(self):\"}, {\"line_number\": 3, \"line_content\": \"    \\\"\\\"\\\"Return the file system path representation of the object.\\\"\\\"\\\"\"}, {\"line_number\": 4, \"line_content\": \"    raise NotImplementedError\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/nbedos/termtosvg\", \"direct_link_to_file_line\": \"https://github.com/nbedos/termtosvg/blob/master/termtosvg/termtosvg/term.py#L70\", \"contents\": {\"total_lines\": 34, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _record(process_args, columns, lines, input_fileno, output_fileno):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Record raw input and output of a process\"}, {\"line_number\": 3, \"line_content\": \"    This function forks the current process. The child process runs the command\"}, {\"line_number\": 4, \"line_content\": \"    specified by 'process_args' which is a session leader and has a controlling\"}, {\"line_number\": 5, \"line_content\": \"    terminal and is run in the background. The parent process, which runs in\"}, {\"line_number\": 6, \"line_content\": \"    the foreground, transmits data between the standard input, output and the\"}, {\"line_number\": 7, \"line_content\": \"    child process and logs it. From the user point of view, it appears they are\"}, {\"line_number\": 8, \"line_content\": \"    communicating with the process they intend to record (through their\"}, {\"line_number\": 9, \"line_content\": \"    terminal emulator) when in fact they communicate with our parent process\"}, {\"line_number\": 10, \"line_content\": \"    which logs all data exchanges with the user\"}, {\"line_number\": 11, \"line_content\": \"    The implementation of this method is mostly copied from the pty.spawn\"}, {\"line_number\": 12, \"line_content\": \"    function of the CPython standard library. It has been modified in order to\"}, {\"line_number\": 13, \"line_content\": \"    make the record function a generator.\"}, {\"line_number\": 14, \"line_content\": \"    See https://github.com/python/cpython/blob/master/Lib/pty.py\"}, {\"line_number\": 15, \"line_content\": \"    :param process_args: List of arguments to run the process to be recorded\"}, {\"line_number\": 16, \"line_content\": \"    :param columns: Initial number of columns of the terminal\"}, {\"line_number\": 17, \"line_content\": \"    :param lines: Initial number of lines of the terminal\"}, {\"line_number\": 18, \"line_content\": \"    :param input_fileno: File descriptor of the input data stream\"}, {\"line_number\": 19, \"line_content\": \"    :param output_fileno: File descriptor of the output data stream\"}, {\"line_number\": 20, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 21, \"line_content\": \"    pid, master_fd = pty.fork()\"}, {\"line_number\": 22, \"line_content\": \"    if pid == 0:\"}, {\"line_number\": 23, \"line_content\": \"        os.execlp(process_args[0], *process_args)\"}, {\"line_number\": 24, \"line_content\": \"    ttysize = struct.pack('HHHH', lines, columns, 0, 0)\"}, {\"line_number\": 25, \"line_content\": \"    fcntl.ioctl(master_fd, termios.TIOCSWINSZ, ttysize)\"}, {\"line_number\": 26, \"line_content\": \"    try:\"}, {\"line_number\": 27, \"line_content\": \"        tty.setraw(input_fileno)\"}, {\"line_number\": 28, \"line_content\": \"    except tty.error:\"}, {\"line_number\": 29, \"line_content\": \"        pass\"}, {\"line_number\": 30, \"line_content\": \"    for data, time in _capture_output(input_fileno, output_fileno, master_fd):\"}, {\"line_number\": 31, \"line_content\": \"        yield data, time\"}, {\"line_number\": 32, \"line_content\": \"    os.close(master_fd)\"}, {\"line_number\": 33, \"line_content\": \"    _, child_exit_status = os.waitpid(pid, 0)\"}, {\"line_number\": 34, \"line_content\": \"    return child_exit_status\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/nbedos/termtosvg\", \"direct_link_to_file_line\": \"https://github.com/nbedos/termtosvg/blob/master/termtosvg/termtosvg/term.py#L117\", \"contents\": {\"total_lines\": 30, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _capture_output(input_fileno, output_fileno, master_fd, buffer_size=1024):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Send data from input_fileno to master_fd and send data from master_fd to\"}, {\"line_number\": 3, \"line_content\": \"    output_fileno and to the caller\"}, {\"line_number\": 4, \"line_content\": \"    The implementation of this method is mostly copied from the pty.spawn\"}, {\"line_number\": 5, \"line_content\": \"    function of the CPython standard library. It has been modified in order to\"}, {\"line_number\": 6, \"line_content\": \"    make the `record` function a generator.\"}, {\"line_number\": 7, \"line_content\": \"    See https://github.com/python/cpython/blob/master/Lib/pty.py\"}, {\"line_number\": 8, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 9, \"line_content\": \"    rlist = [input_fileno, master_fd]\"}, {\"line_number\": 10, \"line_content\": \"    xlist = [input_fileno, output_fileno, master_fd]\"}, {\"line_number\": 11, \"line_content\": \"    xfds = []\"}, {\"line_number\": 12, \"line_content\": \"    while not xfds:\"}, {\"line_number\": 13, \"line_content\": \"        rfds, _, xfds = select.select(rlist, [], xlist)\"}, {\"line_number\": 14, \"line_content\": \"        for fd in rfds:\"}, {\"line_number\": 15, \"line_content\": \"            try:\"}, {\"line_number\": 16, \"line_content\": \"                data = os.read(fd, buffer_size)\"}, {\"line_number\": 17, \"line_content\": \"            except OSError:\"}, {\"line_number\": 18, \"line_content\": \"                xfds.append(fd)\"}, {\"line_number\": 19, \"line_content\": \"                continue\"}, {\"line_number\": 20, \"line_content\": \"            if not data:\"}, {\"line_number\": 21, \"line_content\": \"                xfds.append(fd)\"}, {\"line_number\": 22, \"line_content\": \"                continue\"}, {\"line_number\": 23, \"line_content\": \"            if fd == input_fileno:\"}, {\"line_number\": 24, \"line_content\": \"                write_fileno = master_fd\"}, {\"line_number\": 25, \"line_content\": \"            else:\"}, {\"line_number\": 26, \"line_content\": \"                write_fileno = output_fileno\"}, {\"line_number\": 27, \"line_content\": \"                yield data, datetime.datetime.now()\"}, {\"line_number\": 28, \"line_content\": \"            while data:\"}, {\"line_number\": 29, \"line_content\": \"                n = os.write(write_fileno, data)\"}, {\"line_number\": 30, \"line_content\": \"                data = data[n:]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/nbedos/termtosvg\", \"direct_link_to_file_line\": \"https://github.com/nbedos/termtosvg/blob/master/termtosvg/termtosvg/term.py#L212\", \"contents\": {\"total_lines\": 30, \"lines\": [{\"line_number\": 1, \"line_content\": \"def record(process_args, columns, lines, input_fileno, output_fileno):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Record a process in asciicast v2 format\"}, {\"line_number\": 3, \"line_content\": \"    The records returned by this method are:\"}, {\"line_number\": 4, \"line_content\": \"        - a single header containing configuration information\"}, {\"line_number\": 5, \"line_content\": \"        - multiple event records made of data captured from the terminal and\"}, {\"line_number\": 6, \"line_content\": \"        timing information (except for record duration which needs to be\"}, {\"line_number\": 7, \"line_content\": \"        computed separately)\"}, {\"line_number\": 8, \"line_content\": \"    :param process_args: Arguments required to spawn the process (list of\"}, {\"line_number\": 9, \"line_content\": \"    string)\"}, {\"line_number\": 10, \"line_content\": \"    :param columns: Width of the terminal screen (integer)\"}, {\"line_number\": 11, \"line_content\": \"    :param lines: Height of the terminal screen (integer)\"}, {\"line_number\": 12, \"line_content\": \"    :param input_fileno: File descriptor that will be used as the standard\"}, {\"line_number\": 13, \"line_content\": \"    input of the process\"}, {\"line_number\": 14, \"line_content\": \"    :param output_fileno: File descriptor that will be used as the standard\"}, {\"line_number\": 15, \"line_content\": \"    output of the process\"}, {\"line_number\": 16, \"line_content\": \"    When using `sys.stdout.fileno()` for `output_fileno` there is a risk\"}, {\"line_number\": 17, \"line_content\": \"    that the terminal is left in an unusable state if `record` fails. To\"}, {\"line_number\": 18, \"line_content\": \"    prevent this, `record` should be called inside the `TerminalMode`\"}, {\"line_number\": 19, \"line_content\": \"    context manager.\"}, {\"line_number\": 20, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 21, \"line_content\": \"    yield AsciiCastV2Header(version=2, width=columns, height=lines, theme=None)\"}, {\"line_number\": 22, \"line_content\": \"    start = None\"}, {\"line_number\": 23, \"line_content\": \"    utf8_decoder = codecs.getincrementaldecoder('utf-8')('replace')\"}, {\"line_number\": 24, \"line_content\": \"    for data, time in _record(process_args, columns, lines, input_fileno,\"}, {\"line_number\": 25, \"line_content\": \"        output_fileno):\"}, {\"line_number\": 26, \"line_content\": \"        if start is None:\"}, {\"line_number\": 27, \"line_content\": \"            start = time\"}, {\"line_number\": 28, \"line_content\": \"        yield AsciiCastV2Event(time=(time - start).total_seconds(),\"}, {\"line_number\": 29, \"line_content\": \"            event_type='o', event_data=utf8_decoder.decode(data), duration=None\"}, {\"line_number\": 30, \"line_content\": \"            )\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/nbedos/termtosvg\", \"direct_link_to_file_line\": \"https://github.com/nbedos/termtosvg/blob/master/termtosvg/termtosvg/term.py#L296\", \"contents\": {\"total_lines\": 16, \"lines\": [{\"line_number\": 1, \"line_content\": \"def _screen_buffer(screen):\"}, {\"line_number\": 2, \"line_content\": \"    assert isinstance(screen, pyte.Screen)\"}, {\"line_number\": 3, \"line_content\": \"    buffer = defaultdict(dict)\"}, {\"line_number\": 4, \"line_content\": \"    for row in range(screen.lines):\"}, {\"line_number\": 5, \"line_content\": \"        buffer[row] = {column: anim.CharacterCell.from_pyte(screen.buffer[\"}, {\"line_number\": 6, \"line_content\": \"            row][column]) for column in screen.buffer[row]}\"}, {\"line_number\": 7, \"line_content\": \"    if not screen.cursor.hidden:\"}, {\"line_number\": 8, \"line_content\": \"        row, column = screen.cursor.y, screen.cursor.x\"}, {\"line_number\": 9, \"line_content\": \"        try:\"}, {\"line_number\": 10, \"line_content\": \"            data = screen.buffer[row][column].data\"}, {\"line_number\": 11, \"line_content\": \"        except KeyError:\"}, {\"line_number\": 12, \"line_content\": \"            data = ' '\"}, {\"line_number\": 13, \"line_content\": \"        cursor_char = pyte.screens.Char(data=data, fg=screen.cursor.attrs.\"}, {\"line_number\": 14, \"line_content\": \"            fg, bg=screen.cursor.attrs.bg, reverse=True)\"}, {\"line_number\": 15, \"line_content\": \"        buffer[row][column] = anim.CharacterCell.from_pyte(cursor_char)\"}, {\"line_number\": 16, \"line_content\": \"    return buffer\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/nbedos/termtosvg\", \"direct_link_to_file_line\": \"https://github.com/nbedos/termtosvg/blob/master/termtosvg/termtosvg/term.py#L321\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def get_terminal_size(fileno):\"}, {\"line_number\": 2, \"line_content\": \"    try:\"}, {\"line_number\": 3, \"line_content\": \"        columns, lines = os.get_terminal_size(fileno)\"}, {\"line_number\": 4, \"line_content\": \"    except OSError:\"}, {\"line_number\": 5, \"line_content\": \"        columns, lines = 80, 24\"}, {\"line_number\": 6, \"line_content\": \"    return columns, lines\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/keras-team/keras\", \"direct_link_to_file_line\": \"https://github.com/keras-team/keras/blob/master/keras/keras/utils/generic_utils.py#L14\", \"contents\": {\"total_lines\": 18, \"lines\": [{\"line_number\": 1, \"line_content\": \"def to_list(x, allow_tuple=False):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Normalizes a list/tensor into a list.\"}, {\"line_number\": 3, \"line_content\": \"    If a tensor is passed, we return\"}, {\"line_number\": 4, \"line_content\": \"    a list of size 1 containing the tensor.\"}, {\"line_number\": 5, \"line_content\": \"    # Arguments\"}, {\"line_number\": 6, \"line_content\": \"        x: target object to be normalized.\"}, {\"line_number\": 7, \"line_content\": \"        allow_tuple: If False and x is a tuple,\"}, {\"line_number\": 8, \"line_content\": \"            it will be converted into a list\"}, {\"line_number\": 9, \"line_content\": \"            with a single element (the tuple).\"}, {\"line_number\": 10, \"line_content\": \"            Else converts the tuple to a list.\"}, {\"line_number\": 11, \"line_content\": \"    # Returns\"}, {\"line_number\": 12, \"line_content\": \"        A list.\"}, {\"line_number\": 13, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 14, \"line_content\": \"    if isinstance(x, list):\"}, {\"line_number\": 15, \"line_content\": \"        return x\"}, {\"line_number\": 16, \"line_content\": \"    if allow_tuple and isinstance(x, tuple):\"}, {\"line_number\": 17, \"line_content\": \"        return list(x)\"}, {\"line_number\": 18, \"line_content\": \"    return [x]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/keras-team/keras\", \"direct_link_to_file_line\": \"https://github.com/keras-team/keras/blob/master/keras/keras/utils/generic_utils.py#L37\", \"contents\": {\"total_lines\": 11, \"lines\": [{\"line_number\": 1, \"line_content\": \"def unpack_singleton(x):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Gets the first element if the iterable has only one value.\"}, {\"line_number\": 3, \"line_content\": \"    Otherwise return the iterable.\"}, {\"line_number\": 4, \"line_content\": \"    # Argument\"}, {\"line_number\": 5, \"line_content\": \"        x: A list or tuple.\"}, {\"line_number\": 6, \"line_content\": \"    # Returns\"}, {\"line_number\": 7, \"line_content\": \"        The same iterable or the first element.\"}, {\"line_number\": 8, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 9, \"line_content\": \"    if len(x) == 1:\"}, {\"line_number\": 10, \"line_content\": \"        return x[0]\"}, {\"line_number\": 11, \"line_content\": \"    return x\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/keras-team/keras\", \"direct_link_to_file_line\": \"https://github.com/keras-team/keras/blob/master/keras/keras/utils/generic_utils.py#L53\", \"contents\": {\"total_lines\": 3, \"lines\": [{\"line_number\": 1, \"line_content\": \"def object_list_uid(object_list):\"}, {\"line_number\": 2, \"line_content\": \"    object_list = to_list(object_list)\"}, {\"line_number\": 3, \"line_content\": \"    return ', '.join(str(abs(id(x))) for x in object_list)\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/keras-team/keras\", \"direct_link_to_file_line\": \"https://github.com/keras-team/keras/blob/master/keras/keras/utils/generic_utils.py#L58\", \"contents\": {\"total_lines\": 6, \"lines\": [{\"line_number\": 1, \"line_content\": \"def is_all_none(iterable_or_element):\"}, {\"line_number\": 2, \"line_content\": \"    iterable = to_list(iterable_or_element, allow_tuple=True)\"}, {\"line_number\": 3, \"line_content\": \"    for element in iterable:\"}, {\"line_number\": 4, \"line_content\": \"        if element is not None:\"}, {\"line_number\": 5, \"line_content\": \"            return False\"}, {\"line_number\": 6, \"line_content\": \"    return True\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/keras-team/keras\", \"direct_link_to_file_line\": \"https://github.com/keras-team/keras/blob/master/keras/keras/utils/generic_utils.py#L66\", \"contents\": {\"total_lines\": 33, \"lines\": [{\"line_number\": 1, \"line_content\": \"def slice_arrays(arrays, start=None, stop=None):\"}, {\"line_number\": 2, \"line_content\": \"    \\\"\\\"\\\"Slices an array or list of arrays.\"}, {\"line_number\": 3, \"line_content\": \"    This takes an array-like, or a list of\"}, {\"line_number\": 4, \"line_content\": \"    array-likes, and outputs:\"}, {\"line_number\": 5, \"line_content\": \"        - arrays[start:stop] if `arrays` is an array-like\"}, {\"line_number\": 6, \"line_content\": \"        - [x[start:stop] for x in arrays] if `arrays` is a list\"}, {\"line_number\": 7, \"line_content\": \"    Can also work on list/array of indices: `_slice_arrays(x, indices)`\"}, {\"line_number\": 8, \"line_content\": \"    # Arguments\"}, {\"line_number\": 9, \"line_content\": \"        arrays: Single array or list of arrays.\"}, {\"line_number\": 10, \"line_content\": \"        start: can be an integer index (start index)\"}, {\"line_number\": 11, \"line_content\": \"            or a list/array of indices\"}, {\"line_number\": 12, \"line_content\": \"        stop: integer (stop index); should be None if\"}, {\"line_number\": 13, \"line_content\": \"            `start` was a list.\"}, {\"line_number\": 14, \"line_content\": \"    # Returns\"}, {\"line_number\": 15, \"line_content\": \"        A slice of the array(s).\"}, {\"line_number\": 16, \"line_content\": \"    \\\"\\\"\\\"\"}, {\"line_number\": 17, \"line_content\": \"    if arrays is None:\"}, {\"line_number\": 18, \"line_content\": \"        return [None]\"}, {\"line_number\": 19, \"line_content\": \"    elif isinstance(arrays, list):\"}, {\"line_number\": 20, \"line_content\": \"        if hasattr(start, '__len__'):\"}, {\"line_number\": 21, \"line_content\": \"            if hasattr(start, 'shape'):\"}, {\"line_number\": 22, \"line_content\": \"                start = start.tolist()\"}, {\"line_number\": 23, \"line_content\": \"            return [(None if x is None else x[start]) for x in arrays]\"}, {\"line_number\": 24, \"line_content\": \"        else:\"}, {\"line_number\": 25, \"line_content\": \"            return [(None if x is None else x[start:stop]) for x in arrays]\"}, {\"line_number\": 26, \"line_content\": \"    elif hasattr(start, '__len__'):\"}, {\"line_number\": 27, \"line_content\": \"        if hasattr(start, 'shape'):\"}, {\"line_number\": 28, \"line_content\": \"            start = start.tolist()\"}, {\"line_number\": 29, \"line_content\": \"        return arrays[start]\"}, {\"line_number\": 30, \"line_content\": \"    elif hasattr(start, '__getitem__'):\"}, {\"line_number\": 31, \"line_content\": \"        return arrays[start:stop]\"}, {\"line_number\": 32, \"line_content\": \"    else:\"}, {\"line_number\": 33, \"line_content\": \"        return [None]\"}]}}", "{\"type\": \"functions\", \"project_source\": \"https://github.com/jupyter/jupyter\", \"direct_link_to_file_line\": \"https://github.com/jupyter/jupyter/blob/master/jupyter/docs/source/conf.py#L177\", \"contents\": {\"total_lines\": 2, \"lines\": [{\"line_number\": 1, \"line_content\": \"def setup(app):\"}, {\"line_number\": 2, \"line_content\": \"    app.add_css_file('custom.css')\"}]}}"]}